/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ControlFlowGraphUtil.hppml"
#include "../Language/ApplySignature.hppml"
#include "../../core/cppml/CPPMLVisit.hppml"
#include "../../core/StringUtil.hpp"
#include <boost/lexical_cast.hpp>

namespace ControlFlowGraphUtil {

ControlFlowContinuationTupleArg applyArgToTupleArg(const ControlFlowApplyArg& inArg)
	{
	@match ControlFlowApplyArg(inArg)
		-| Normal(field, arg) ->> {
			return ControlFlowContinuationTupleArg::Normal(
				field, 
				ControlFlowContinuationArg::Arg(arg)
				);
			}
		-| TupleCall(arg) ->> {
			return ControlFlowContinuationTupleArg::TupleCall(
				ControlFlowContinuationArg::Arg(arg)
				);
			}
			
	}

ControlFlowNodeBody ApplyNodeBody(
			const ImmutableTreeVector<ControlFlowArg>& args,
			const ControlFlowContinuation& normal,
			const ControlFlowContinuation& exception
			)
	{
	ImmutableTreeVector<ControlFlowApplyArg> args2;
	for (long k = 0; k < args.size();k++)
		args2 = args2 + ControlFlowApplyArg::Normal(null(), args[k]);

	return ControlFlowNodeBody::Apply(args2, normal, exception);
	}

ImmutableTreeVector<ControlFlowArg> arglist(uword_t low, uword_t high)
	{
	ImmutableTreeVector<ControlFlowArg> tr;
	while(low < high)
		tr = tr + ControlFlowArg::Arg(low++);
	return tr;
	}
	
ImmutableTreeVector<ControlFlowContinuationArg> contArglist(uword_t low, uword_t high)
	{
	ImmutableTreeVector<ControlFlowContinuationArg> tr;
	while(low < high)
		tr = tr +
				ControlFlowContinuationArg::Arg(
						ControlFlowArg::Arg(low++)
						);
	return tr;
	}

ControlFlowContinuation Return(int arg)
	{
	return ControlFlowContinuation::Return(
		ControlFlowContinuationArg::Arg(
			ControlFlowArg::Arg(arg)
			),
		true
		);
	}

ControlFlowContinuation Return(const CSTValue& inConstant)
	{
	return ControlFlowContinuation::Return(
		ControlFlowContinuationArg::Arg(
			ControlFlowArg::Constant(inConstant)
			),
		true
		);
	}

ControlFlowNodeBody Jump(const ControlFlowContinuation& inCont)
	{
	return ControlFlowNodeBody::Jump(inCont);
	}

ControlFlowContinuationArg Result(void)
	{
	return ControlFlowContinuationArg::Result();
	}

ControlFlowArg arg(uword_t index)
	{
	return ControlFlowArg::Arg(index);
	}

ControlFlowContinuationArg contArg(uword_t index)
	{
	return ControlFlowContinuationArg::Arg(arg(index));
	}

ControlFlowContinuation Node(const string& inString, 
							const ImmutableTreeVector<ControlFlowContinuationArg>& inArgs
							)
	{
	return ControlFlowContinuation::Node(inString, inArgs);
	}

ControlFlowContinuation composeContinuationArgsWithContinuation(
			const ImmutableTreeVector<ControlFlowContinuationArg>& inArgs,
			const ControlFlowContinuation& inContinuation,
			Nullable<ControlFlowContinuationArg> inResultOverride
			)
	{
	@match ControlFlowContinuation(inContinuation)
		-| Return(arg, isException) ->> {
			return ControlFlowContinuation::Return(
				composeContinuationArgsWithContinuationArg(inArgs, arg, inResultOverride),
				isException
				);
			}
		-| Node(label, args) ->> {
			ImmutableTreeVector<ControlFlowContinuationArg> newArgs;
			for (long k = 0; k < args.size();k++)
				newArgs = newArgs + 
					composeContinuationArgsWithContinuationArg(inArgs, args[k], inResultOverride);

			return ControlFlowContinuation::Node(
				label,
				newArgs
				);
			}
	}

ControlFlowContinuationTupleArg composeContinuationArgsWithTupleArg(
			const ImmutableTreeVector<ControlFlowContinuationArg>& inArgs,
			const ControlFlowContinuationTupleArg& inTupleArg,
			Nullable<ControlFlowContinuationArg> inResultOverride
			)
	{
	@match ControlFlowContinuationTupleArg(inTupleArg)
		-|	Normal(field, arg) ->> {
			return ControlFlowContinuationTupleArg::Normal(
				field,
				composeContinuationArgsWithContinuationArg(inArgs, arg, inResultOverride)
				);
			}
		-|	TupleCall(arg) ->> {
			return ControlFlowContinuationTupleArg::TupleCall(
				composeContinuationArgsWithContinuationArg(inArgs, arg, inResultOverride)
				);
			}
	}

ControlFlowContinuationArg composeContinuationArgsWithContinuationArg(
			const ImmutableTreeVector<ControlFlowContinuationArg>& inArgs,
			const ControlFlowContinuationArg& inContArg,
			Nullable<ControlFlowContinuationArg> inResultOverride
			)
	{
	@match ControlFlowContinuationArg(inContArg)
		-| Arg(Constant()) ->> {
			return inContArg;
			}
		-| Arg(Arg(index)) ->> {
			return inArgs[index];
			}
		-| MakeTuple(args) ->> {
			ImmutableTreeVector<ControlFlowContinuationTupleArg> newArgs;
			for (long k = 0; k < args.size();k++)
				newArgs = newArgs + composeContinuationArgsWithTupleArg(inArgs, args[k], inResultOverride);
			return ControlFlowContinuationArg::MakeTuple(newArgs);
			}
		-| Result() ->> {
			if (inResultOverride)
				return *inResultOverride;
			}
		-| _ ->> {}
		;

	throw standardLogicErrorWithStacktrace(
		"doesn't make sense to compose a continuations containing Result or TupleExpand "
		"since they can't be produced by a Jump instruction."
		);
	}



ImmutableTreeVector<Nullable<string> > naturalNextNodes(const ControlFlowContinuation& node)
	{
	@match ControlFlowContinuation(node)
		-|	Return() ->> { return emptyTreeVec(); }
		-|	Node(l, _) ->> { return emptyTreeVec() + (null() << l); }
		;
	}

ImmutableTreeVector<Nullable<string> > naturalNextNodes(const ControlFlowNode& node)
	{
	@match ControlFlowNodeBody(node.body())
		-|	Apply(_,n,e) ->> {
			return  naturalNextNodes(n) + naturalNextNodes(e);
			}
		-|	Cached(_,n,e) ->> {
			return  naturalNextNodes(n) + naturalNextNodes(e);
			}
		-|	Branch(_,n,e) ->> {
			return  naturalNextNodes(n) + naturalNextNodes(e);
			}
		-|	Jump(n) ->> {
			return  naturalNextNodes(n);
			}
		-|	TupleExpand(arg, (_,_,ifMatch), ifNotMatch) ->> {
			return naturalNextNodes(ifMatch) + naturalNextNodes(ifNotMatch);
			}
		-|	Switch(a, branches, otherwise) ->> {
			ImmutableTreeVector<Nullable<string> > tr;
			
			for (long k = 0; k < branches.size();k++)
				tr = tr + naturalNextNodes(branches.pairAtPosition(k).second);
			tr = tr + naturalNextNodes(otherwise);
			
			return tr;
			}
		;
	}

bool referencesResult(const ControlFlowContinuationArg& inArg)
	{
	@match ControlFlowContinuationArg(inArg)
		-|	Result() ->> {
			return true;
			}
		-|	MakeTuple(elts) ->> {
			for (long k = 0; k < elts.size();k++)
				if (referencesResult(elts[k]))
					return true;
			}
		
		-|	_ ->> {}
		;
	return false;
	}

bool referencesResult(const ControlFlowContinuationTupleArg& inArg)
	{
	return referencesResult(inArg.arg());
	}

ControlFlowContinuation throwSymbolCont(const Symbol& s)
	{
	return ControlFlowContinuation::Return(
		ControlFlowContinuationArg::Arg(
			ControlFlowArg::Constant(CSTValue(s)
				)
			),
		true
		);
	}

std::string freshNodeName(const ImmutableTreeMap<std::string, ControlFlowNode>& nodes, std::string prefix)
	{
	std::string temp = prefix;
	uword_t index = 0;

	while (nodes.contains(temp))
		temp = "temp_" + boost::lexical_cast<string>(++index);

	return temp;
	}

bool resultUsedInContinuation(const ControlFlowContinuation& inCont)
	{
	@match ControlFlowContinuation(inCont)
		-| Return(arg) ->> {
			return resultUsedInContinuation(arg);
			}
		-| Node(_, args) ->> {
			for (long k = 0; k < args.size();k++)
				if (resultUsedInContinuation(args[k]))
					return true;
			return false;
			}
	}

bool resultUsedInContinuation(const ControlFlowContinuationArg& inCont)
	{
	@match ControlFlowContinuationArg(inCont)
		-| Arg() ->> { return false; }
		-| Result() ->> { return true; }
		-| TupleElement() ->> { return false; }
		-| TupleRemainingElements() ->> { return false; }
		-| MakeTuple(args) ->> { 
			for (long k = 0; k < args.size();k++)
				if (resultUsedInContinuation(args[k].arg()))
					return true;
			return false; 
			}
	}

void  removeIndicesOfArgsUsedInContinuation(const ControlFlowContinuation& inCont, 
											set<uword_t>& ioUsedIndices,
											Nullable<uword_t> inTupleElementIndex
											)
	{
	@match ControlFlowContinuation(inCont)
		-| Return(arg) ->> {
			return removeIndicesOfArgsUsedInContinuation(arg, ioUsedIndices, inTupleElementIndex);
			}
		-| Node(_, args) ->> {
			for (long k = 0; k < args.size();k++)
				removeIndicesOfArgsUsedInContinuation(args[k], ioUsedIndices, inTupleElementIndex);
			}
	}

void  removeIndicesOfArgsUsedInContinuation(const ControlFlowContinuationArg& inCont, 
											set<uword_t>& ioUsedIndices,
											Nullable<uword_t> inTupleElementIndex
											)
	{
	@match ControlFlowContinuationArg(inCont)
		-| Arg(Arg(k)) ->> { ioUsedIndices.erase(k); }
		-| Arg(Constant()) ->> {  }
		-| Result() ->> { }
		-| TupleElement() ->> { ioUsedIndices.erase(*inTupleElementIndex); }
		-| TupleRemainingElements() ->> { ioUsedIndices.erase(*inTupleElementIndex); }
		-| MakeTuple(args) ->> { 
			for (long k = 0; k < args.size();k++)
				removeIndicesOfArgsUsedInContinuation(
					args[k].arg(), 
					ioUsedIndices, 
					inTupleElementIndex
					);
			}
	}

ControlFlowGraph canonicalApplyGraph(int argCount)
	{
	return canonicalApplyGraph(ApplySignature(argCount));
	}

ControlFlowGraph canonicalApplyGraph(const ApplySignature& args)
	{
	static boost::recursive_mutex mutex;
	boost::recursive_mutex::scoped_lock lock(mutex);

	static map<hash_type, ControlFlowGraph> graphs;
	if (graphs.find(args.hash()) == graphs.end())
		{
		graphs[args.hash()] = ControlFlowGraph(
			ControlFlowNode(
				args.terms().size(),
				ControlFlowNodeBody::Apply(
					mapITVWithIndices(args.terms(), 
						[&](ApplyArgumentSignature sig, long index) {
							@match ApplyArgumentSignature(sig)
								-| Normal(sym) ->> {
									return ControlFlowApplyArg::Normal(sym, ControlFlowArg::Arg(index));
									}
								-| TupleCall() ->> {
									return ControlFlowApplyArg::TupleCall(ControlFlowArg::Arg(index));
									}
							}
						),
					ControlFlowContinuation::Return(
						Result(),
						0
						),
					ControlFlowContinuation::Return(
						Result(),
						1
						)
					)
				),
			"CanonicalApply(" + prettyPrintStringWithoutWrapping(args) + ")"
			);
		}

	return graphs[args.hash()];
	}

bool isCanonicalApplyNode(const ControlFlowGraph& inGraph, const Nullable<std::string>& label)
	{
	auto node = inGraph[label];

	@match ControlFlowNodeBody(node.body())
		-| Apply(_, Return(_, shouldBeFalse), Return(_, shouldBeTrue)) ->> {
			return !shouldBeFalse && shouldBeTrue;
			}
		-| _ ->> {
			return false;
			}
	}

bool isCanonicalApplyGraph(const ControlFlowGraph& inGraph)
	{
	return Ufora::beginsWith(inGraph.graphName(), "CanonicalApply");
	}

ControlFlowGraph canonicalReturnGraph(bool isException)
	{
	return ControlFlowGraph(
		ControlFlowNode(
			1,
			Jump(
				ControlFlowContinuation::Return(
					ControlFlowContinuationArg::Arg(arg(0)),
					isException ? 1 : 0
					)
				)
			)
		);
	}

@type ExtractUsedIndicesVisitor = 
	ImmutableTreeSet<uint32_t> usedIndices,
	bool isInsideContinuation
{
public:
	template<class T>
	void processDown(const T& in,
					 bool& outKeepProcessing
					 )
		{
		}

	template<class T>
	void processUp(const T& in)
		{
		}

	void processDown(const ControlFlowArg_ArgType& in,
					 bool& outKeepProcessing
					 )
		{
		if (isInsideContinuation())
			usedIndices() = usedIndices() + in.index();
		}

	void processDown(const ControlFlowContinuation& in,
					 bool& outKeepProcessing
					 )
		{
		isInsideContinuation() = true;
		}

	void processUp(const ControlFlowContinuation& in)
		{
		isInsideContinuation() = false;
		}
};

}


