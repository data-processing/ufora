/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CFGWithFutures.hppml"

#include <stdint.h>
#include "../python/FORAPythonUtil.hppml"
#include <boost/python.hpp>
#include "../../native/Registrar.hpp"
#include "../../core/python/CPPMLWrapper.hpp"
#include "../../core/python/ScopedPyThreads.hpp"
#include "../../core/containers/ImmutableTreeMap.py.hpp"
#include "../../core/containers/ImmutableTreeSet.py.hpp"
#include "../Core/ComputationResult.hppml"
#include "../Language/ApplySignature.hppml"

using Fora::Interpreter::ComputationResult;

class CFGWithFuturesWrapper :
    public native::module::Exporter<CFGWithFuturesWrapper> {
public:
    std::string	getModuleName(void)
        {
        return "FORA";
        }
    
    static boost::python::object createCfgWithFutures(
            const ControlFlowGraph& inGraph,
            boost::python::object inLabel,
            boost::python::object inArgs
            )
        {
        ImmutableTreeVector<ImplValContainer> argsAsIvcList = 
            pythonListToIVCList(inArgs);

        Nullable<std::string> label;

        if (!inLabel.is_none())
            {
            boost::python::extract<std::string> extractor(inLabel);
            lassert(extractor.check());

            label = extractor();
            }
        
        PolymorphicSharedPtr<CFGWithFutures> tr = 
            CFGWithFutures::createCfgWithFutures(
                inGraph, label, argsAsIvcList
                );
        
        if (!tr)
            {
            return boost::python::object();
            }
        
        return boost::python::object(tr);
        }

    static boost::python::object indicesOfSubmittableFutures(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        boost::python::list tr;
        
        for (auto index: cfgWithFutures->indicesOfSubmittableFutures())
            {
            tr.append(index);
            }

        return tr;
        }

    static bool continueSimulation(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures        
            )
        {
        return cfgWithFutures->continueSimulation();
        }

    static boost::python::object currentNode(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        return boost::python::object(
            cfgWithFutures->graph()[cfgWithFutures->currentLabel()]
            );
        }

    static boost::python::object currentLabel(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        auto label = cfgWithFutures->currentLabel();

        if (label.isNull())
            return boost::python::object();

        return boost::python::str(*label);
        }

    static boost::python::object strCfgWithFutures(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        return boost::python::str(cfgWithFutures->toString());
        }

    static void slotCompleted(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures,
            uint64_t slotIndex,
            const ComputationResult& result
            )
        {
        cfgWithFutures->slotCompleted(slotIndex, result);
        }

    static bool hasResolvedToSimpleState(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        return cfgWithFutures->hasResolvedToSimpleState();
        }

    static boost::python::object asSubmittable(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures,
            uint64_t slotIndex
            )
        {
        Nullable<CFGWithFutures::SubmittableArgs> asSubmittable = 
            cfgWithFutures->asSubmittable(slotIndex);

        if (asSubmittable.isNull())
            {
            return boost::python::object();
            }

        return boost::python::object(*asSubmittable);
        }

    static bool mustBailEarly(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        return cfgWithFutures->mustBailEarly();
        }

    static boost::python::object getFinalResult(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        Nullable<CFGWithFutures::SimulationResult> result = 
            cfgWithFutures->getFinalResult();

        if (result.isNull())
            return boost::python::object();

        return boost::python::object(*result);
        }

    static void disallowRepeatNodes(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        cfgWithFutures->disallowRepeatNodes();
        }

    static boost::python::object getSlots(
            PolymorphicSharedPtr<CFGWithFutures>& cfgWithFutures
            )
        {
        boost::python::list tr;

        for (auto slotIndex: cfgWithFutures->getSlots())
            {
            tr.append(slotIndex);
            }

        return tr;
        }

    static Fora::Interpreter::PausedComputation toPausedComputation(
            CFGWithFutures::SubmittableArgs submittableArgs
            )
        {
        return submittableArgs.toPausedComputation();
        }

    static ImmutableTreeVector<ImplValContainer> pythonListToIVCList(
                boost::python::object l
                )
        {
        uword_t length;
		
        ImmutableTreeVector<ImplValContainer*> ptrs;
		
            {
            ScopedPyThreadsReacquire threads;
            length = boost::python::len(l);
			
            for (long k = 0; k < length; k++)
                {
                boost::python::extract<ImplValContainer&> extractor(l[k]);
                lassert(extractor.check());
				
                ptrs = ptrs + &extractor();
                }
            }
        
        ImmutableTreeVector<ImplValContainer>	tr;
        for (long k = 0; k < ptrs.size();k++)
            tr = tr + *ptrs[k];
        
        return tr;
        }

    static PolymorphicSharedPtr<CFGWithFutures>* createEmptyCfgWithFutures()
        {
        return new PolymorphicSharedPtr<CFGWithFutures>(
            CFGWithFutures::createEmpty()
            );
        }

    void exportPythonWrapper()
        {
        using namespace boost::python;

        class_<PolymorphicSharedPtr<CFGWithFutures>>("CFGWithFutures", no_init)
            .def("__init__", make_constructor(createEmptyCfgWithFutures))
            .def("__str__", &strCfgWithFutures)
            .def("createCfgWithFutures", &createCfgWithFutures)
            .staticmethod("createCfgWithFutures")
            .def("indicesOfSubmittableFutures", &indicesOfSubmittableFutures)
            .def("continueSimulation", &continueSimulation)
            .def("submittableArgs", &asSubmittable)
            .def("currentLabel", &currentLabel)
            .def("currentNode", &currentNode)
            .def("slotCompleted", &slotCompleted)
            .def("getSlots", &getSlots)
            .def("hasResolvedToSimpleState", &hasResolvedToSimpleState)
            .def("getFinalResult", &getFinalResult)
            .def("mustBailEarly", &mustBailEarly)
            .def("disallowRepeatNodes", &disallowRepeatNodes)
            .def("__getstate__", &FORAPythonUtil::serializeEntireObjectGraph<PolymorphicSharedPtr<CFGWithFutures> >)
            .def("__setstate__", &FORAPythonUtil::deserializeEntireObjectGraph<PolymorphicSharedPtr<CFGWithFutures> >)
            .enable_pickling()
            ;

        FORAPythonUtil::exposeValueLikeCppmlType<FutureSlot>();
        FORAPythonUtil::exposeValueLikeCppmlType<FutureValue>();
        FORAPythonUtil::exposeValueLikeCppmlType<CFGWithFutures::SimulationResult>();

        boost::python::object applyArgsCls = 
            FORAPythonUtil::exposeValueLikeCppmlType<CFGWithFutures::ApplyArgs>()
            .class_()
            ;
        def("CFGWithFuturesApplyArgs", applyArgsCls);

        boost::python::object submittableArgsCls = 
            FORAPythonUtil::exposeValueLikeCppmlType<CFGWithFutures::SubmittableArgs>()
            .class_()
            .def("toPausedComputation", &toPausedComputation)
            ;
        def("CFGWithFuturesSubmittableArgs", submittableArgsCls);

        FORAPythonUtil::exposeValueLikeCppmlType<ApplyArgumentSignature>();

        FORAPythonUtil::exposeValueLikeCppmlType<ApplySignature>();

        PythonWrapper<ImmutableTreeVector<ApplyArgumentSignature>>::
            exportPythonInterface("ApplySignatureTerms");
        }

    };

//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<CFGWithFuturesWrapper>::mEnforceRegistration =
		native::module::ExportRegistrar<
			CFGWithFuturesWrapper>::registerWrapper();




    

