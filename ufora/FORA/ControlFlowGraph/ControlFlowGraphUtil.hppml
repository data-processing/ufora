/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ControlFlowGraph.hppml"

class ApplySignature;

namespace ControlFlowGraphUtil {

ControlFlowNodeBody ApplyNodeBody(
			const ImmutableTreeVector<ControlFlowArg>& args,
			const ControlFlowContinuation& normal,
			const ControlFlowContinuation& exception
			);

std::string freshNodeName(
				const ImmutableTreeMap<std::string, ControlFlowNode>& nodes,
				std::string prefix = "temp"
				);

ControlFlowNodeBody Jump(const ControlFlowContinuation& inCont);

ControlFlowNodeBody Jump(const ControlFlowContinuation& inCont);

ControlFlowContinuation Return(int arg);

ControlFlowContinuation Return(const CSTValue& inConstant);

ControlFlowContinuation Return(const CSTValue& inConstant);

ControlFlowContinuation Node(const string& inString, 
							const ImmutableTreeVector<ControlFlowContinuationArg>& inArgs
							);

ControlFlowContinuationArg Result(void);

ControlFlowArg arg(uword_t index);

ImmutableTreeVector<ControlFlowArg> arglist(uword_t low, uword_t high);

ImmutableTreeVector<ControlFlowContinuationArg> contArglist(uword_t low, uword_t high);

ControlFlowContinuationArg contArg(uword_t index);


ControlFlowContinuation composeContinuationArgsWithContinuation(
			const ImmutableTreeVector<ControlFlowContinuationArg>& inArgs,
			const ControlFlowContinuation& inContinuation,
			Nullable<ControlFlowContinuationArg> resultOverride = null()
			);

ControlFlowContinuationArg composeContinuationArgsWithContinuationArg(
			const ImmutableTreeVector<ControlFlowContinuationArg>& inArgs,
			const ControlFlowContinuationArg& inContinuation,
			Nullable<ControlFlowContinuationArg> resultOverride = null()
			);

ControlFlowContinuationTupleArg composeContinuationArgsWithTupleArg(
			const ImmutableTreeVector<ControlFlowContinuationArg>& inArgs,
			const ControlFlowContinuationTupleArg& inTupleArg,
			Nullable<ControlFlowContinuationArg> resultOverride = null()
			);

bool referencesResult(const ControlFlowContinuationArg& inArg);
bool referencesResult(const ControlFlowContinuationTupleArg& inArg);

ControlFlowContinuationTupleArg applyArgToTupleArg(const ControlFlowApplyArg& inArg);

ImmutableTreeVector<Nullable<string> > naturalNextNodes(const ControlFlowContinuation& node);

ImmutableTreeVector<Nullable<string> > naturalNextNodes(const ControlFlowNode& node);

ControlFlowContinuation throwSymbolCont(const Symbol& s);

bool resultUsedInContinuation(const ControlFlowContinuation& inCont);

bool resultUsedInContinuation(const ControlFlowContinuationArg& inCont);

void  removeIndicesOfArgsUsedInContinuation(const ControlFlowContinuation& inCont, 
											set<uword_t>& ioUsedIndices,
											Nullable<uword_t> inTupleElementIndex
											);

void  removeIndicesOfArgsUsedInContinuation(const ControlFlowContinuationArg& inCont, 
											set<uword_t>& ioUsedIndices,
											Nullable<uword_t> inTupleElementIndex
											);

//produce a graph that just takes 'argCount' arguments and passes them straight to an apply.
ControlFlowGraph canonicalApplyGraph(int argCount);

ControlFlowGraph canonicalApplyGraph(const ApplySignature& argCount);

bool isCanonicalApplyGraph(const ControlFlowGraph& inGraph);

//is the given node an apply operation that just passes its result directly through to its
//parent frame?
bool isCanonicalApplyNode(const ControlFlowGraph& inGraph, const Nullable<std::string>& label);


//produce a graph that holds one variable and immediately returns it
ControlFlowGraph canonicalReturnGraph(bool isException);

};
