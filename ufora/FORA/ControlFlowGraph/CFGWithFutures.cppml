/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "CFGWithFutures.hppml"
#include "CFGWithFuturesImpl.hppml"
#include "ControlFlowGraphUtil.hppml"
#include "../../core/Logging.hpp"
#include "../Core/ApplyArgFrame.hppml"
#include "../Runtime.hppml"
#include "../Interpreter/AxiomCache.hppml"

using Fora::Interpreter::ComputationResult;
using Fora::Interpreter::PausedComputation;
using Fora::Interpreter::PausedComputationFrame;

PausedComputation CFGWithFutures::SubmittableArgs::toPausedComputation() const
    {
    if (isApply())
        {
        Fora::ApplyArgFrame argFrame;

        long k = 0;
        for (auto a: args().signature().terms())
            {
            @match ApplyArgumentSignature(a)
                -| Normal(n) ->> {
                    argFrame.push_back(Fora::ApplyArg(args().values()[k].getReference(), n, false));
                    }
                -| TupleCall() ->> {
                    argFrame.push_back(Fora::ApplyArg(args().values()[k].getReference(), null(), true));
                    }
            k++;
            }
        
        auto cache = Runtime::getRuntime().getAxiomCache()->whichAxiom(argFrame);

        if (cache && cache->isExpansion())
            return PausedComputation(
                emptyTreeVec() +
                    PausedComputationFrame(
                        args().values(),
                        cache->getControlFlowGraph(args().signature()),
                        null()
                        )
                );
        else
            return PausedComputation(
                emptyTreeVec() +
                    PausedComputationFrame(
                        args().values(),
                        ControlFlowGraphUtil::canonicalApplyGraph(args().signature()),
                        null()
                        )
                );
        }
    else 
        {
        // isCached() == true
        ControlFlowGraph cachedGraph(
            ControlFlowNode(
                1,
                ControlFlowNodeBody::Cached(
                    ControlFlowArg::Arg(0),
                    ControlFlowContinuation::Return(
                        ControlFlowContinuationArg::Result(),
                        false
                        ),
                    ControlFlowContinuation::Return(
                        ControlFlowContinuationArg::Result(),
                        true
                        )
                    )
                )
            );

        return PausedComputation(
            emptyTreeVec() + 
                PausedComputationFrame(
                    args().values(),
                    cachedGraph,
                    null()
                    )
                );
        }
    }

// how many futures slots are unfinished? This is a proxy for the amount of 
// unfinished work present in the simulation
long CFGWithFutures::countOfUnfinishedSlots() const
    {
    return mImpl->countOfUnfinishedSlots();
    }

void CFGWithFutures::enableIfSplit()
    {
    mImpl->enableIfSplit();
    }

void CFGWithFutures::setMaxRepeatNodesAllowed(uint64_t count)
    {
    mImpl->setMaxRepeatNodesAllowed(count);
    }

void CFGWithFutures::disallowRepeatNodes()
    {
    mImpl->disallowRepeatNodes();
    }

const Nullable<std::string>& CFGWithFutures::currentLabel() const 
    {
    return mImpl->currentLabel();
    }

const ControlFlowGraph& CFGWithFutures::graph() const
    {
    return mImpl->graph();
    }

const ImmutableTreeVector<FutureValue>& CFGWithFutures::currentNodeValues() const
    {
    return mImpl->currentNodeValues();
    }

const std::vector<FutureSlot>& CFGWithFutures::getSlots() const
    {
    return mImpl->getSlots();
    }

const std::set<uint64_t>& CFGWithFutures::indicesOfSubmittableFutures() const
    {
    return mImpl->indicesOfSubmittableFutures();
    }

bool CFGWithFutures::isSubmittable(uint64_t inSlotIndex) const
    {
    return mImpl->isSubmittable(inSlotIndex);
    }

Nullable<CFGWithFutures::SimulationResult> CFGWithFutures::getFinalResult() const
    {
    return mImpl->getFinalResult();
    }

Nullable<uint64_t> CFGWithFutures::lowestKnownBailEarlyIndex() const
    {
    return mImpl->lowestKnownBailEarlyIndex();
    }

bool CFGWithFutures::mustBailEarly() const
    {
    return mImpl->mustBailEarly();
    }

Nullable<CFGWithFutures::SubmittableArgs>
CFGWithFutures::asSubmittable(uint64_t inSlotIndex) const
    {
    return mImpl->asSubmittable(inSlotIndex);
    }

void CFGWithFutures::slotCompleted(
        uint64_t inSlotIndex, const ComputationResult& inResult
        )
    {
    mImpl->slotCompleted(inSlotIndex, inResult);
    }

std::string CFGWithFutures::toString(bool inShowGraph) const
    {
    return mImpl->toString();
    }

PolymorphicSharedPtr<CFGWithFutures> CFGWithFutures::createCfgWithFutures(
        const ControlFlowGraph& inGraph,
        const Nullable<std::string>& inLabel,
        const ImmutableTreeVector<ImplValContainer>& inCurrentValues
        )
    {
    PolymorphicSharedPtr<CFGWithFuturesImpl> tr = 
        CFGWithFuturesImpl::createCfgWithFutures(
            inGraph, inLabel, inCurrentValues
            );

    if (!tr)
        return PolymorphicSharedPtr<CFGWithFutures>();

    return PolymorphicSharedPtr<CFGWithFutures>(new CFGWithFutures(tr));
    }

PolymorphicSharedPtr<CFGWithFutures> CFGWithFutures::createEmpty()
    {
    PolymorphicSharedPtr<CFGWithFuturesImpl> tr = 
        CFGWithFuturesImpl::createEmpty();

    return PolymorphicSharedPtr<CFGWithFutures>(new CFGWithFutures(tr));
    }

bool CFGWithFutures::continueSimulation()
    {
    return mImpl->continueSimulation();
    }

bool CFGWithFutures::hasResolvedToSimpleState() const
    {
    return mImpl->hasResolvedToSimpleState();
    }

bool CFGWithFutures::couldExitIfAllValuesWereFinished() const
    {
    return mImpl->couldExitIfAllValuesWereFinished();
    }

void CFGWithFutures::serialize(Fora::ForaValueSerializationStream& stream) const
    {
    mImpl->serialize(stream);
    }

void CFGWithFutures::deserialize(Fora::ForaValueDeserializationStream& stream)
    {
    mImpl->deserialize(stream);
    }

PolymorphicSharedPtr<CFGWithFutures> CFGWithFutures::deepcopy(
                boost::function1<ImplValContainer, ImplValContainer> duplicator
                )
    {
    return PolymorphicSharedPtr<CFGWithFutures>(
        new CFGWithFutures(
            mImpl->deepcopy(duplicator)
            )
        );
    }

void Serializer<PolymorphicSharedPtr<CFGWithFutures>, Fora::ForaValueSerializationStream>::
        serialize(Fora::ForaValueSerializationStream& s, const PolymorphicSharedPtr<CFGWithFutures>& t)
    {
    t->serialize(s);
    }

void Deserializer<PolymorphicSharedPtr<CFGWithFutures>, Fora::ForaValueDeserializationStream>::
        deserialize(Fora::ForaValueDeserializationStream& s, PolymorphicSharedPtr<CFGWithFutures>& t)
    {
    t = CFGWithFutures::createEmpty();

    t->deserialize(s);    
    }

hash_type CFGWithFutures::hash() const
    {
    return mImpl->hash();
    } 

void CFGWithFutures::visitValues(boost::function1<void, ImplValContainer&> visitor)
    {
    mImpl->visitValues(visitor);
    }
