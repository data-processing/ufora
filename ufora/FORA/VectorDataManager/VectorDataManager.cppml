/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "VectorDataManager.hppml"
#include "VectorDataManagerImpl.hppml"
#include "../Core/ExecutionContext.hppml"
#include "../TypedFora/ABI/VectorHandle.hpp"

VectorDataManager::VectorDataManager(
			PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
			uword_t inCumulusMaxVectorChunkSizeBytes,
			RandomHashGenerator& inHashGenerator
			) : 
		mImpl(
			new VectorDataManagerImpl(
				inCallbackScheduler,
				inCumulusMaxVectorChunkSizeBytes,
				this,
				inHashGenerator
				)
		 )
	{
	}

void VectorDataManager::teardown()
	{
	mImpl->teardown();
	}

bool VectorDataManager::isTornDown()
	{
	return mImpl->isTornDown();
	}

Ufora::threading::Gate& VectorDataManager::executionContextsCanRunGate()
	{
	return mImpl->executionContextsCanRunGate();
	}

void VectorDataManager::allowAllExecutionContextsBlockedOnMemoryToCheckState()
	{
	mImpl->allowAllExecutionContextsBlockedOnMemoryToCheckState();
	}

const PolymorphicSharedPtr<PageRefcountTracker>& VectorDataManager::getPageRefcountTracker()
	{
	return mImpl->getPageRefcountTracker();
	}

const PolymorphicSharedPtr<VectorDataMemoryManager>& VectorDataManager::getMemoryManager()
	{
	return mImpl->getMemoryManager();
	}

PolymorphicSharedPtr<CallbackScheduler> VectorDataManager::getCallbackScheduler()
	{
	return mImpl->getCallbackScheduler();
	}

bool VectorDataManager::dropPageWithoutWritingToDisk(Fora::PageId inPage)
	{
	return mImpl->dropPageWithoutWritingToDisk(inPage);
	}

Fora::PageId VectorDataManager::createSyntheticPage(const TypedFora::Abi::BigVectorPageLayout& inLayout)
	{
	return mImpl->createSyntheticPage(inLayout);
	}

void VectorDataManager::setOfflineCache(PolymorphicSharedPtr<OfflineCache> inPlugin)
	{
	mImpl->setOfflineCache(inPlugin);
	}

size_t VectorDataManager::vectorDataTotalBytesAllocated(void)
	{
	return mImpl->vectorDataTotalBytesAllocated();
	}
	
uword_t VectorDataManager::getMemoryLimit() const
	{
	return mImpl->getMemoryLimit();
	}

void VectorDataManager::setMemoryLimit(uint64_t maxVectorBytes, uint64_t maxTotalBytes)
	{
	mImpl->setMemoryLimit(maxVectorBytes, maxTotalBytes);
	}

double VectorDataManager::getLoadRatio() const
	{
	return mImpl->getLoadRatio();
	}

void VectorDataManager::setLoadRatio(double inRatio)
	{
	mImpl->setLoadRatio(inRatio);
	}

size_t VectorDataManager::curTotalUsedBytes()
	{
	return mImpl->curTotalUsedBytes();
	}

void VectorDataManager::checkGcStatus(std::string reason)
	{
	mImpl->checkGcStatus(reason);
	}

void VectorDataManager::unloadAllPossible()
	{
	mImpl->unloadAllPossible();
	}

void VectorDataManager::gcAllContextsAndBlockUntilCompleted()
	{
	mImpl->gcAllContextsAndBlockUntilCompleted();
	}

pair<PolymorphicSharedPtr<SerializedObject>, ImmutableTreeSet<Fora::BigVectorId> >
VectorDataManager::extractVectorPageIfPossible(Fora::PageId identity)
	{
	return mImpl->extractVectorPageIfPossible(identity);
	}

PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> VectorDataManager::getBigVectorLayouts()
	{
	return mImpl->getBigVectorLayouts();
	}

	
TypedFora::Abi::VectorHandlePtr VectorDataManager::pagedVectorHandle(
			const Fora::BigVectorId& identity,
			const Fora::PageletTreePtr& inPagelet,
			MemoryPool* inPool
			)
	{
	return mImpl->pagedVectorHandle(identity, inPagelet, inPool);
	}

TypedFora::Abi::VectorHandlePtr VectorDataManager::pagedVectorHandleWithVDID(
			const Fora::BigVectorId& identity,
			const Fora::PageletTreePtr& inPagelet,
			Nullable<VectorDataID> source,
			MemoryPool* inPool
			)
	{
	return mImpl->pagedVectorHandleWithVDID(identity, inPagelet, source, inPool);
	}

bool VectorDataManager::loadSerializedVectorPage(
					Fora::PageId hash,
					const PolymorphicSharedPtr<SerializedObject>& data
					)
	{
	return mImpl->loadSerializedVectorPage(hash, data);
	}

bool VectorDataManager::loadByteArrayIntoExternalDatasetPageFromFileDescriptor(
					VectorDataID id,
					int fd,
					int64_t inByteCount
					)
	{
	return mImpl->loadByteArrayIntoExternalDatasetPageFromFileDescriptor(id, fd, inByteCount);
	}
					
bool VectorDataManager::loadByteArrayIntoExternalDatasetPage(
					VectorDataID id,
					uint8_t* data,
					uword_t inByteCount
					)
	{
	return mImpl->loadByteArrayIntoExternalDatasetPage(id, data, inByteCount);
	}
					
bool VectorDataManager::loadByteArrayIntoExternalDatasetPageAsVector(
					VectorDataID id,
					uint8_t* data,
					uword_t inByteCount
					)
	{
	return mImpl->loadByteArrayIntoExternalDatasetPageAsVector(id, data, inByteCount);
	}
					
uword_t	VectorDataManager::getVectorPageCount(void) const
	{
	return mImpl->getVectorPageCount();
	}

uword_t VectorDataManager::getTotalBytesLoaded(void) const
	{
	return mImpl->getTotalBytesLoaded();
	}

uword_t VectorDataManager::getTotalBytesInUnloadCache(void) const
	{
	return mImpl->getTotalBytesInUnloadCache();
	}

uword_t	VectorDataManager::maxPageSizeInBytes(void) const
	{
	return mImpl->maxPageSizeInBytes();
	}

void VectorDataManager::dropPageUnreferencedAcrossSystem(Fora::PageId inPage)
	{
	mImpl->dropPageUnreferencedAcrossSystem(inPage);
	}

bool VectorDataManager::visitAnyLoadedDataForVector(
				const Fora::BigVectorId& identity,
				IntegerSequence values,
				boost::function2<void, TypedFora::Abi::ForaValueArray*, IntegerSequence> visitor
				)
	{
	return mImpl->visitAnyLoadedDataForVector(identity, values, visitor);
	}

bool VectorDataManager::hasDataForVectorPage(const Fora::PageId& inPage)
	{
	return mImpl->hasDataForVectorPage(inPage);
	}

hash_type VectorDataManager::newVectorHash()
	{
	return mImpl->newVectorHash();
	}

Nullable<Cumulus::MachineId> VectorDataManager::getMachineId()
	{
	return mImpl->getMachineId();
	}

void VectorDataManager::setMachineId(Cumulus::MachineId inMachineId)
	{
	mImpl->setMachineId(inMachineId);
	}

void VectorDataManager::setDropUnreferencedPagesWhenFull(bool inShouldDrop)
	{
	mImpl->setDropUnreferencedPagesWhenFull(inShouldDrop);
	}

void VectorDataManager::restrictToAddDropState(const Cumulus::AddDropFinalState& state)
	{
	mImpl->restrictToAddDropState(state);
	}

void VectorDataManager::setPersistentCacheIndex(
				PolymorphicSharedPtr<Cumulus::PersistentCache::PersistentCacheIndex> inCache
				)
	{
	mImpl->setPersistentCacheIndex(inCache);
	}

PolymorphicSharedPtr<Cumulus::PersistentCache::PersistentCacheIndex> 
											VectorDataManager::getPersistentCacheIndex()
	{
	return mImpl->getPersistentCacheIndex();
	}

boost::shared_ptr<VectorPage> VectorDataManager::getPageFor(Fora::PageId inPage)
	{
	return mImpl->getPageFor(inPage);
	}

	
TypedFora::Abi::VectorHandlePtr VectorDataManager::loadByteArrayIntoNewVector(
						MemoryPool* owningPool,
						uint8_t* data,
						uword_t inByteCount
						)
	{
	return mImpl->loadByteArrayIntoNewVector(owningPool, data, inByteCount);
	}

TypedFora::Abi::VectorHandlePtr VectorDataManager::loadByteArrayIntoNewVector(
						MemoryPool* owningPool,
						uint8_t* data,
						uword_t inByteCount,
						const Type& type
						)
	{
	return mImpl->loadByteArrayIntoNewVector(owningPool, data, inByteCount, type);
	}

TypedFora::Abi::VectorHandlePtr VectorDataManager::loadImplvalIntoUnloadedVectorHandle(
						MemoryPool* owningPool,
						const VectorDataID& vdid,
						ImplValContainer inForaValue
						)
	{
	return mImpl->loadImplvalIntoUnloadedVectorHandle(owningPool, vdid, inForaValue);
	}

void VectorDataManager::triggerUnmapOfAllVectorPagesAndBlock()
	{
	mImpl->triggerUnmapOfAllVectorPagesAndBlock();
	}

void VectorDataManager::resumeMappingOfVectorPages()
	{
	mImpl->resumeMappingOfVectorPages();
	}

PolymorphicSharedPtr<OfflineCache> VectorDataManager::getOfflineCache()
	{
	return mImpl->getOfflineCache();
	}

void VectorDataManager::registerSyntheticPage(Fora::PageId inPage, const TypedFora::Abi::BigVectorPageLayout& inLayout)
	{
	mImpl->registerSyntheticPage(inPage, inLayout);
	}

void VectorDataManager::syntheticPageRealized(Fora::PageId inPage)
	{
	mImpl->syntheticPageRealized(inPage);
	}

void VectorDataManager::resetSyntheticPageState()
	{
	mImpl->resetSyntheticPageState();
	}

