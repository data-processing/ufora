#pragma once

#include "PausedComputation.hppml"
#include "PausedComputationTreeStats.hppml"
#include "../VectorDataManager/PageId.hppml"
#include "TimeElapsed.hppml"
#include "../ControlFlowGraph/CFGWithFutures.hppml"
#include <sstream>

namespace Fora {
namespace Interpreter {

@type
	PausedComputationTree = 
			Thread of 
				ImmutableTreeMap<int64_t, PausedComputationTree> children, 
				PausedComputation computation,
				TimeElapsed timeElapsed,
				PausedComputationTreeStats treeStats
		-|	Simulation of 
				ImmutableTreeMap<int64_t, PausedComputationTree> children, 
				PolymorphicSharedPtr<CFGWithFutures> simulation,
				TimeElapsed timeElapsed,
				PausedComputationTreeStats treeStats
		-|	Hole of 
				hash_type computationGuid
	with
		hash_type hash = (this->hashSelf())
	{
	public:
		hash_type hashSelf() const;

		void treeStateToString(std::ostringstream& stream, long depth) const;				
	}
and
	PausedComputationTreeSplit = 
		hash_type computationHash,
		PausedComputationTree childComputation
	;

macro_defineCppmlComparisonOperators(PausedComputationTree);

}
}


macro_defineMemberHashFunction(Fora::Interpreter::PausedComputationTree);

template<>
class CPPMLPrettyPrint<Fora::Interpreter::PausedComputationTree> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const Fora::Interpreter::PausedComputationTree& t);
};

