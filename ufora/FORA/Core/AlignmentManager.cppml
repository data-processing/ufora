/***************************************************************************
    Copyright 2015,2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#include "Alignment.hpp"
#include "AlignmentManager.hpp"
#include "ExecutionContext.hppml"
#include "MemoryPool.hpp"

#include "../TypedFora/ABI/VectorHandle.hpp"
#include "../TypedFora/ABI/VectorRecord.hpp"

AlignmentManager::AlignmentManager(bool freeAllocatedMemoryOnDestroy)
		: mFreeOnDestroy(freeAllocatedMemoryOnDestroy)
	{
	lassert(Fora::Interpreter::ExecutionContext::currentExecutionContext());
	mPool = Fora::Interpreter::ExecutionContext::currentExecutionContext()->getMemoryPool();
	}

AlignmentManager::~AlignmentManager()
	{
	if (mFreeOnDestroy)
		{
		for (auto ptr: mManagedMemory)
			mPool->free(ptr);
		}
	}

uint8_t* AlignmentManager::getHandleToAlignedData(const ImplValContainer& value)
	{
	Type t = value.type();
	Type elementType = t;
	uword_t elementCount = 1;
	uint8_t* packedDataPtr = (uint8_t*) value.data();

	@match Type(t)
	-| 	Vector() ->>
		{
		TypedFora::Abi::VectorRecord vectorHandle =
				value.cast<TypedFora::Abi::VectorRecord>();
		elementCount = vectorHandle.size();
		auto res = vectorHandle.jor()[0].type();
		if (!res)
			return nullptr;
		elementType = *res;
		packedDataPtr = vectorHandle.dataPtr()->unpagedValues()->offsetFor(0);
		}
	-|	MutableVector() ->>
		{
		lassert_dump(false, "not implemented for type" << t.toString());
		}
	-|	Dictionary(isCST) ->>
		{
		lassert_dump(false, "not implemented for type" << t.toString());
		}
	-|	_ ->>
		{
		// nothing to update
		}

	if (elementType.size() == 0)
		return nullptr;

	if (elementCount == 0)
		return nullptr;

	if (elementType.size() == elementType.alignedSize())
		return packedDataPtr;

	// Invariant: size > 0 && size != alignedSize
	uint8_t* alignedDataPtr = nullptr;
	if (!mPool->permitAllocation(t.alignedSize() * elementCount))
		return nullptr;
	alignedDataPtr = mPool->allocate(t.alignedSize() * elementCount);
	if (!alignedDataPtr)
		return nullptr;
	mManagedMemory = mManagedMemory + alignedDataPtr;
	for (long k = 0; k < elementCount; ++k)
		copyPackedToAligned(elementType, packedDataPtr, alignedDataPtr);

	return alignedDataPtr;
	}
