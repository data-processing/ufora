/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ExecutionContext.hppml"
#include "../Core/MemoryPool.hpp"
#include "../Core/StackFrameAllocator.hpp"
#include "../VectorDataManager/BigVectorSlice.hppml"
#include "../TypedFora/ABI/VectorLoadRequest.hppml"
#include "../TypedFora/ABI/VectorRecord.hpp"
#include "../../core/Logging.hpp"
#include "../Interpreter/InterpreterThreadObserver.hppml"
#include "TimeElapsed.hppml"

class StackFrameAllocator;

namespace Fora {
namespace Interpreter {

class PausedComputation;

class ExecutionContextThreadState {
public:
	typedef TypedFora::Abi::VectorLoadRequest VectorLoadRequest;

	typedef TypedFora::Abi::VectorRecord VectorRecord;

	ExecutionContextThreadState(ExecutionContextImpl* inExecutionContext);

	~ExecutionContextThreadState();

	void placeInEvaluationState(
				const PausedComputation& computation,
				boost::function1<ImplValContainer, ImplValContainer> valueImportFunction
				);

	void placeInEvaluationState(
				const ImplValContainer& inArgs, 
				boost::function1<ImplValContainer, ImplValContainer> valueImportFunction
				);

	void evaluateFunctionPointer(
				const TypedFora::TypedJumpTarget& toCall, 
				const ImplValContainer& inArgs
				);

	void compute();

	//compute for a fixed period of time and then return
	//we return 'true' if it would be OK to continue computing
	//false if we should release the lock
	bool computeForFixedTime(double total);

	void teardown();

	bool isEmpty() const;
	
	bool isError() const;
	
	bool isInterrupted() const;
	
	bool isVectorLoad() const;
	
	Fora::BigVectorSlice getVectorLoad() const;
	
	bool isCacheRequest() const;
	
	bool isFinished() const;

	const ImplVal& getCacheRequestTuple() const;

	ErrorState getErrorState() const;

	void setErrorState(const ErrorState& inErrorState);

	void setResult(const ImplValContainer& inValue, bool isException);
	
	void visitStackFramesAndValues(TypedFora::Abi::StackFrameVisitor& visitor);

	ImplVal getResult() const;

	std::string stateAsString() const;

	bool isExceptionResult() const;

	PausedComputation extractPausedComputation(
				boost::function1<ImplValContainer, ImplValContainer> inExportFunction
				);

	InterpreterThreadObserver& getInterpreterHistory();

	void observeTimeElapsed(double time, bool isInInterpreter);

	ImplValContainer getComputationLog() const
		{
		return mComputationLog;
		}

	void setComputationLog(ImplValContainer log)
		{
		mComputationLog = log;
		}

	void logAMessage(const ImplValContainer& message, MemoryPool* pool);

	void logSomeMessages(const ImplValContainer& messagesOrNone, MemoryPool* pool);

	TimeElapsed getTotalTimeElapsed() const;

	void pageUsed(Fora::PageId inPage);

private:
	bool resolveVectorLoad_();

	NativeRuntimeContinuationValue<1> callInterpreter(uword_t inBlockID, void* inCallFrame);

	void callNativeRuntimeCallTarget(const NativeRuntimeCallTarget& inCallTarget);

	void resume(NativeRuntimeContinuationValue<1> value,
				void* data,
				uword_t bytes
				);

	void initialize_();
	
	void releaseUnusedStackMemory_();

	void prepareStateToEnterNativeCode();
	
	NativeRuntimeContinuationValueVector instantiatePausedComputation_(
							const PausedComputation& computation,
							boost::function1<ImplValContainer, ImplValContainer> valueImportFunction
							);

	void destroyFrame(
			NativeRuntimeContinuationValue<1> val
			);
	
	void visitStackFrames(
			TypedFora::Abi::StackFrameVisitor& visitor,
			NativeRuntimeContinuationValue<1> stackFramePtr
			);
	
	void checkForNaturalResumption_();

	void resumeInterruptedComputationInternally_();

	enum {
		cont_state_error = 5,
		cont_state_empty = 4,
		cont_state_cache_request = 3,
		cont_state_interrupt = 2,
		cont_state_exception = 1,
		cont_state_normal = 0
		};
	
	ExecutionContextMemoryPool* mMemoryPool;

	boost::shared_ptr<InterpreterThreadObserver> mInterpreterHistory;

	StackFrameAllocator mStackAllocator;

	uword_t mWhichContinuationIx;

	ImplVal mResult;

	ImplValContainer mComputationLog;

	NativeRuntimeContinuationValue<2> mNormalContinuations;

	NativeRuntimeContinuationValue<1> mInterruptContinuation;

	NativeRuntimeContinuationValue<1> mCachecallContinuation;

	NativeRuntimeCallbacks& mRuntimeCallbacks;

	//every value should be 8-byte aligned
	pair<NativeRuntimeContinuationValue<1>, VectorLoadRequest> mInterruptionResult;

	ErrorState mErrorState;

	pair<ImplVal, NativeRuntimeContinuationValue<2> > mCacheRequest;

	ExecutionContext* mExecutionContext;

	TimeElapsed mTimeElapsed;
};

}
}
