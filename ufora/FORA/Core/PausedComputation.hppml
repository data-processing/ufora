/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ImplValContainer.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "ErrorState.hppml"

namespace Fora {
namespace Interpreter {

@type
	//a single stack frame in a computation
	PausedComputationFrame =
		ImmutableTreeVector<ImplValContainer> values,
		ControlFlowGraph graph,
		Nullable<string> label
		{
		public:
			bool areAllValuesConst() const;
			bool isApplyFrame() const;
			const ControlFlowNode& getCurrentControlFlowNode() const;
		}
and
	PausedComputationTail =
				None of ()
			-|	VectorLoad of ImplValContainer vector, int64_t low, int64_t high
			-|	PendingResult of ImplValContainer value, bool isException
			-|	Cachecall of ImplValContainer cachecallRequest
			-|	Failure of ErrorState error
		{
		}
and
	//callers have lower id's than their callees. frames()[0] was the original call frame
	PausedComputation = 
			ImmutableTreeVector<PausedComputationFrame> frames,
			PausedComputationTail tail
		{
		public:
			PausedComputation(ImmutableTreeVector<PausedComputationFrame> frames);

			std::string applyStackToString() const;

			std::vector<std::tuple<Hash, uint> > hashConstApplyFrames(
				boost::function<Hash (PausedComputationFrame)> hashFunc
				) const;
		}
	;

}
}


template<>
class CPPMLPrettyPrint<Fora::Interpreter::PausedComputationFrame> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const Fora::Interpreter::PausedComputationFrame& t);
};

template<>
class CPPMLPrettyPrint<Fora::Interpreter::PausedComputation> {
public:
		static void prettyPrint(CPPMLPrettyPrintStream& s, const Fora::Interpreter::PausedComputation& t);
};


