/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#include "Type.hppml"

uword_t alignedOffset(const Type& t, uword_t unalignedOffset)
	{
	uword_t align = t.alignment();
	if (align == 0)
		return 0;
	uword_t padding = (align - (unalignedOffset % align)) % align;
	return unalignedOffset + padding;
	}

static void copyBetweenAlignedAndPacked(
		bool copyFromAlignedToPacked,
		const Type& typ,
		uint8_t* alignedData,
		uint8_t* packedData
		)
	{
	@match Type(typ)
		-|	Nothing() ->> {
			}
		-|	Alternative(t) ->> {
			copyBetweenAlignedAndPacked(copyFromAlignedToPacked, Type::Symbol(), alignedData, packedData);

			uword_t offset = Type::Symbol().alignedSize();
			uword_t padding = alignedOffset(t, offset) - offset;
			alignedData = (uint8_t*)alignedData + padding;
			copyBetweenAlignedAndPacked(copyFromAlignedToPacked, t, alignedData, packedData)
			}
		-|	Tuple(t) ->> {
			uword_t offset = 0;
			for (long k = 0; k < t.size(); ++k)
				{
				uword_t padding = alignedOffset(t[k], offset) - offset;
				alignedData = alignedData + padding;
				copyBetweenAlignedAndPacked(copyFromAlignedToPacked, t[k], alignedData, packedData);
				alignedData = alignedData + t[k].alignedSize();
				packedData  = packedData + t[k].size();
				offset += padding + t[k].alignedSize();
				}
			}
		-|	Class(t) ->> {
			uword_t offset = 0;
			for (long k = 0; k < t.size(); ++k)
				{
				uword_t padding = alignedOffset(t[k], offset) - offset;
				alignedData = alignedData + padding;
				copyBetweenAlignedAndPacked(copyFromAlignedToPacked, t[k], alignedData, packedData);
				alignedData = alignedData + t[k].alignedSize();
				packedData  = packedData + t[k].size();
				offset += padding + t[k].alignedSize();
				}
			}
		-|	Vector() ->> {
			lassert_dump(false,
					"unsupported type. Use AlignmentManager to 'unwrap' type");
			}
		-|	_ ->> {
			// same size
			lassert_dump(
					typ.size() == typ.alignedSize(),
					"Type " << typ.toString()
					<< " has different packed and aligned sizes, but it is"
					<< " not special-cased when copying (it should be)");
			if (copyFromAlignedToPacked)
				memcpy(packedData, alignedData, typ.size());
			else
				memcpy(alignedData, packedData, typ.size());
			}
	}

void copyAlignedToPacked(const Type& typ, uint8_t* alignedData, uint8_t* packedData)
	{
	copyBetweenAlignedAndPacked(true, typ, alignedData, packedData);
	}

void copyPackedToAligned(const Type& typ, uint8_t* packedData, uint8_t* alignedData)
	{
	copyBetweenAlignedAndPacked(false, typ, alignedData, packedData);
	}

