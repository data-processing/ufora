#pragma once

/************************

ParallelismMeasurement

Helper class that measures how good of a job subcomputations of a CFGWithFutures
did at parallelizing their workload. If we have N tasks with runtimes t_1 ... t_N,
we measure "parallelism" as 

	sum[t_i] ** 2 / sum[t_i**2]

which is N if all the tasks are the same runtime and 1 if one of them is much larger
than all the rest.

We consider a set of subtasks to be a 'poor split' if not much work was done (e.g.
there was no point to split) or if the subtasks didn't parallelize very well.

*************************/

@type ParallelismMeasurement = 
	double sum, 
	double sumOfSquares, 
	long count {
public:
	void observe(double time)
		{
		sum() += time;
		sumOfSquares() += time*time;
		count()++;
		}

	double effectiveParallelism() const
		{
		if (sumOfSquares() <= 0.0)
			return 0;

		return sum() * sum() / sumOfSquares();
		}

	bool wasPoorSplit(double timeThreshold, double parallelismThreshold) const
		{
		if (effectiveParallelism() < parallelismThreshold)
			return true;
		if (sum() < timeThreshold)
			return true;

		return false;
		}
};