/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ExecutionContext.hppml"
#include "ExecutionContextImpl.hppml"
#include "PausedComputationTree.hppml"
#include "../Primitives/CodeLocation.hppml"
#include "TimeElapsed.hppml"

namespace Fora {
namespace Interpreter {

ExecutionContext::ExecutionContext(
				PolymorphicSharedPtr<VectorDataManager> inVectorDataManager,
				uint64_t memoryQuota
				) : 
			mImpl(
				new ExecutionContextImpl(
					inVectorDataManager, 
					memoryQuota,
					this
					)
				)
	{
	}

ExecutionContext::~ExecutionContext()
	{
	mImpl->teardown();
	mImpl->destroySelf();
	}

void ExecutionContext::enableVectorPaging()
	{
	mImpl->enableVectorPaging();
	}

void ExecutionContext::disableVectorPaging()
	{
	mImpl->disableVectorPaging();
	}

NativeRuntimeCallbacks& ExecutionContext::getRuntimeCallbacks()
	{
	return mImpl->getRuntimeCallbacks();
	}

void ExecutionContext::interrupt(void)
	{
	mImpl->interrupt();
	}

void ExecutionContext::scheduleVdmCheck()
	{
	mImpl->scheduleVdmCheck();
	}

void ExecutionContext::interruptAfterCycleCount(sword_t checks)
	{
	mImpl->interruptAfterCycleCount(checks);
	}

sword_t ExecutionContext::remainingCycleCount()
	{
	return mImpl->remainingCycleCount();
	}

ExecutionContext*	ExecutionContext::currentExecutionContext(void)
	{
	return ExecutionContextImpl::currentExecutionContext();
	}

VectorDataManager&	ExecutionContext::currentVDM(void)
	{
	return ExecutionContextImpl::currentVDM();
	}

VectorDataManager& ExecutionContext::getVDM()
	{
	return mImpl->getVDM();
	}

bool ExecutionContext::isEmpty(void) const
	{
	return mImpl->isEmpty();
	}

bool ExecutionContext::isGarbageCollecting() const
	{
	return mImpl->isGarbageCollecting();
	}

bool ExecutionContext::isGcScheduled()
	{
	return mImpl->isGcScheduled();
	}

bool ExecutionContext::isGcPending()
	{
	return mImpl->isGcPending();
	}

bool ExecutionContext::isInterrupted(void) const
	{
	return mImpl->isInterrupted();
	}

bool ExecutionContext::isVectorLoad(void) const
	{
	return mImpl->isVectorLoad();
	}

bool ExecutionContext::isCacheRequest(void) const
	{
	return mImpl->isCacheRequest();
	}

Fora::BigVectorSlice ExecutionContext::getVectorLoad(void) const
	{
	return mImpl->getVectorLoad();
	}

bool ExecutionContext::isExecuting(void) const
	{
	return mImpl->isExecuting();
	}

bool ExecutionContext::isFinished(void)  const
	{
	return mImpl->isFinished();
	}

bool ExecutionContext::isError(void)  const
	{
	return mImpl->isError();
	}

ImplValContainer ExecutionContext::getCacheRequest(void)
	{
	return mImpl->getCacheRequest();
	}

ComputationResult ExecutionContext::getFinishedResult(void)
	{
	return mImpl->getFinishedResult();
	}

void ExecutionContext::setFinishedResult(const ComputationResult& inResult)
	{
	mImpl->setFinishedResult(inResult);
	}

ImplValContainer ExecutionContext::getComputationLog() const
	{
	return ImplValContainer();
	}

ImmutableTreeVector<pair<ForaStackTrace, Fora::Interpreter::StackframeMetadata> > 
ExecutionContext::extractStacktrace(bool inExportValues) const
	{
	return mImpl->extractStacktrace(inExportValues);
	}

void ExecutionContext::serialize(Fora::ForaValueSerializationStream& serializer) const
	{
	mImpl->serialize(serializer);
	}

void ExecutionContext::deserialize(Fora::ForaValueDeserializationStream& deserializer)
	{
	mImpl->deserialize(deserializer);
	}

PausedComputationTree ExecutionContext::extractPausedComputation() const
	{
	return mImpl->extractPausedComputation();
	}

void ExecutionContext::resumePausedComputation(const PausedComputationTree& computation)
	{
	mImpl->resumePausedComputation(computation);
	}

bool ExecutionContext::copyValuesOutOfVectorPages(void)
	{
	return mImpl->copyValuesOutOfVectorPages();
	}

void ExecutionContext::unloadAllVectorHandlesFromPool()
	{
	mImpl->unloadAllVectorHandlesFromPool();
	}

bool ExecutionContext::pageLargeVectorHandles(uword_t inBytecountThreshold)
	{
	return mImpl->pageLargeVectorHandles(inBytecountThreshold);
	}

void ExecutionContext::logAMessage(const ImplValContainer& msg)
	{
	}

void ExecutionContext::logSomeMessages(const ImplValContainer& msg)
	{
	}

void ExecutionContext::placeInEvaluationStateWithoutRenamingMutableVectors(const ImplValContainer& args)
	{
	mImpl->placeInEvaluationStateWithoutRenamingMutableVectors(args);
	}

void ExecutionContext::evaluateFunctionPointer(
				const TypedFora::TypedJumpTarget& toCall,
				const ImplValContainer& args
				)
	{
	mImpl->evaluateFunctionPointer(toCall, args);
	}

void ExecutionContext::compute()
	{
	mImpl->compute();
	}

void ExecutionContext::addCachecallResult(const ComputationResult& val)
	{
	mImpl->addCachecallResult(val);
	}

void ExecutionContext::teardown(bool assertEmpty)
	{
	mImpl->teardown(assertEmpty);
	}

boost::shared_ptr<ExecutionContextConfiguration> ExecutionContext::getConfiguration() const
	{
	return mImpl->getConfiguration();
	}

TimeElapsed ExecutionContext::getTotalTimeElapsed() const
	{
	return mImpl->getTotalTimeElapsed();
	}

RefcountPool* ExecutionContext::getRefcountPool(void)
	{
	return mImpl->getRefcountPool();
	}

void ExecutionContext::resetInterruptState()
	{
	mImpl->resetInterruptState();
	}

bool ExecutionContext::resetInterruptStateIfOnlyTriggeredInternally()
	{
	return mImpl->resetInterruptStateIfOnlyTriggeredInternally();
	}

MemoryPool* ExecutionContext::getMemoryPool(void)
	{
	return mImpl->getMemoryPool();
	}

boost::shared_ptr<ExecutionContextMemoryPool> ExecutionContext::getExecutionContextMemoryPool(void)
	{
	return mImpl->getExecutionContextMemoryPool();
	}

std::string ExecutionContext::extractCurrentTextStacktrace(void)
	{
	return mImpl->extractCurrentTextStacktrace();
	}

ImmutableTreeSet<Fora::BigVectorId> ExecutionContext::getReferencedBigVectors()
	{
	return mImpl->getReferencedBigVectors();
	}

void ExecutionContext::placeInEvaluationState(const ImplValContainer& args)
	{
	mImpl->placeInEvaluationState(args);
	}

void ExecutionContext::incrementBigVectorRefcount(Fora::BigVectorId inPageId)
	{
	mImpl->incrementBigVectorRefcount(inPageId);
	}

void ExecutionContext::decrementBigVectorRefcount(Fora::BigVectorId inPageId)
	{
	mImpl->decrementBigVectorRefcount(inPageId);
	}

void ExecutionContext::initialize()
	{
	mImpl->initialize();
	}

InterpreterThreadObserver& ExecutionContext::getInterpreterHistory()
	{
	return *mImpl->mInterpreterHistory;
	}

InterpreterScratchSpace& ExecutionContext::getInterpreterScratchSpace()
	{
	return mImpl->mInterpreterScratchSpace;
	}

hash_type ExecutionContext::newVectorHash()
	{
	return mImpl->newVectorHash();
	}

bool ExecutionContext::wasLastInterruptTriggeredExternally()
	{
	return mImpl->wasLastInterruptTriggeredExternally();
	}

void ExecutionContext::visitStackFramesAndValues(TypedFora::Abi::StackFrameVisitor& visitor)
	{
	mImpl->visitStackFramesAndValues(visitor);
	}


ImmutableTreeVector<PausedComputationTreeSplit> 
			ExecutionContext::splitComputation(bool disableVectorPagingIfSplit, double minSecondsElapsed)
	{
	return mImpl->splitComputation(disableVectorPagingIfSplit, minSecondsElapsed);
	}

void ExecutionContext::absorbSplitResult(
		hash_type computationHash,
		const ComputationResult& result,
		TimeElapsed totalTimeElapsed
		)
	{
	mImpl->absorbSplitResult(computationHash, result, totalTimeElapsed);
	}

void ExecutionContext::disableMemoryPoolDefragment()
	{
	mImpl->disableMemoryPoolDefragment();
	}

void ExecutionContext::setOnPageCreated(boost::function1<void, Fora::PageId> function)
	{
	mImpl->setOnPageCreated(function);
	}

pair<uint64_t, uint64_t> ExecutionContext::getCurrentMemoryUsage()
	{
	return mImpl->getCurrentMemoryUsage();
	}

pair<uint64_t, uint64_t> ExecutionContext::getMemoryUsageAtLastEvent()
	{
	return mImpl->getMemoryUsageAtLastEvent();
	}

Nullable<long> ExecutionContext::getCurrentBigvecSlotIndex() const
	{
	return mImpl->getCurrentBigvecSlotIndex();
	}

void ExecutionContext::setMemoryPoolPageSize(size_t newPageSize)
	{
	mImpl->setMemoryPoolPageSize(newPageSize);
	}

void ExecutionContext::resetMemoryPoolPageSize()
	{
	mImpl->resetMemoryPoolPageSize();
	}


}
}

