/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../VectorDataManager/PageId.hppml"
#include "../../core/containers/ImmutableTreeSet.hppml"
#include "../../core/containers/TwoWaySetMap.hpp"

namespace Fora {
namespace Interpreter {

/***********

ExecutionContextPageLoadSequence

Models a sequence of Fora::PageId loads by an execution context. 

This class is responsible for detecting when an ExecutionContext is using
several pages together (e.g. when reads from those pages are densely packed).
We do this by asking the Context to reset its page loads every time it loads a
new page, until we have discovered that the pages are being used "together".

Imagine the sequence of vector reads being issued by the execution context.
The occur as a list

	P_0, t_0
	P_1, t_1,
	...

of pages and timestamps.  If every page were on a different machine, then
every time P_{i} and P_{i+1} were on different machines, every load would
create a cache miss, and  we would have to move the computation from machine
to machine, which is expensive.

If we could fit all of the pages on a single machine, we would never have a
cache miss. However, this is impractical when datasets are large.


************/


class ExecutionContextPageLoadSequence {
public:
	ExecutionContextPageLoadSequence() : 
			mCurrentActivePagesBytes(0)
		{
		}

	bool observeAndReturnWantsReset(
			ImmutableTreeSet<Fora::PageId> pages, 
			double timeElapsed, 
			int64_t maxBytesAllowedInClique
			);

	ImmutableTreeSet<Fora::PageId> currentActivePages() const;

	double mostRecentTimestamp() const;

	template<class storage_type>
	void serialize(storage_type& s) const
		{
		s.serialize(mPageAccessTimes);
		s.serialize(mCurrentActivePages);
		}

	template<class storage_type>
	void deserialize(storage_type& s)
		{
		s.deserialize(mPageAccessTimes);
		s.deserialize(mCurrentActivePages);
		}

private:
	void pruneOldPageTimes();

	Nullable<double> minTimestampFor(ImmutableTreeSet<Fora::PageId> pages);

	TwoWaySetMap<Fora::PageId, double> mPageAccessTimes;

	ImmutableTreeSet<Fora::PageId> mCurrentActivePages;

	int64_t mCurrentActivePagesBytes;

	Nullable<double> mCurrentCliqueAccessTime;
};


}
}

template<class T, class storage_type>
class Serializer;

template<class T, class storage_type>
class Deserializer;

template<class storage_type>
class Serializer<Fora::Interpreter::ExecutionContextPageLoadSequence, storage_type> {
public:
		static void serialize(storage_type& s, const Fora::Interpreter::ExecutionContextPageLoadSequence& in)
			{
			in.serialize(s);
			}
};

template<class storage_type>
class Deserializer<Fora::Interpreter::ExecutionContextPageLoadSequence, storage_type> {
public:
		static void deserialize(storage_type& s, Fora::Interpreter::ExecutionContextPageLoadSequence& out)
			{
			out.deserialize(s);
			}
};

