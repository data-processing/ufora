/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Core/Type.hppml"
#include "../Primitives/String.hppml"
#include "../TypedFora/ABI/VectorRecord.hpp"
#include "../Vector/MutableVectorRecord.hppml"
#include "../VectorDataManager/PageletTree.hppml"
#include "../../core/cppml/CPPMLTransform.hppml"
#include "../../cumulus/ComputationDefinition.hppml"
#include <boost/python.hpp>

class ValueDeepcopier;

namespace Fora {
namespace Interpreter {

class ExecutionContext;

}
}

namespace TypedFora{
namespace Abi{

class ForaValueArray;

}
}

class ValueDeepcopierState {
public:
	map<TypedFora::Abi::VectorRecord, TypedFora::Abi::VectorRecord> mVectors;

	map<MutableVectorRecord, MutableVectorRecord> mMutableVectors;

	map<Fora::PageletTreePtr, Fora::PageletTreePtr> mPageletTreePtrs;

	map<char*, String> mStrings;

	map<hash_type, Cumulus::ComputationDefinition> mComputationDefinitions;
};

class ValueDeepcopier {
public:
	map<TypedFora::Abi::VectorRecord, TypedFora::Abi::VectorRecord>& mVectors;

	map<MutableVectorRecord, MutableVectorRecord>& mMutableVectors;

	map<hash_type, Cumulus::ComputationDefinition>& mComputationDefinitions;

	map<Fora::PageletTreePtr, Fora::PageletTreePtr>& mPageletTreePtrs;

	map<char*, String>& mStrings;

	bool mProduceNewIdentitiesForMutableVectors;

	MemoryPool* mTargetMemoryPool;

	bool mUnpagedVectorsAreWriteable;

	bool mCollapsePageletTrees;

	bool mDeepcopyAwayPagelets;

	ValueDeepcopier(		ValueDeepcopierState& ioState,
							bool produceNewIdentitiesForMutableVectors,
							MemoryPool* targetMemoryPool,
							bool unpagedVectorsAreWriteable,
							bool collapsePageletTrees,
							bool deepcopyAwayPagelets = false
							);

	void duplicate(
			const Type& inType,
			uint8_t* dest,
			uint8_t* source,
			uword_t count
			) const;

	void duplicate(
			const Type& inType,
			uint8_t* dest,
			uint8_t* source,
			uword_t count,
			uword_t destStride,
			uword_t sourceStride
			) const;

	void duplicateScattered(
			const Type& inType,
			void** dest,
			void** source,
			uword_t count,
			uword_t destNudge,
			uword_t sourceNudge
			) const;

	void duplicate(
			TypedFora::Abi::ForaValueArray* targetArray,
			TypedFora::Abi::ForaValueArray* sourceArray
			) const;

	void duplicate(
			TypedFora::Abi::ForaValueArray* targetArray,
			TypedFora::Abi::ForaValueArray* sourceArray,
			long lowIndex,
			long highIndex
			) const;

	MutableVectorRecord duplicateMutableVector(MutableVectorRecord inHandle) const;

	TypedFora::Abi::VectorRecord	duplicate(const TypedFora::Abi::VectorRecord& in) const;

	Fora::PageletTreePtr duplicatePageletTree(Fora::PageletTreePtr inPtr) const;

	ImplValContainer duplicate(ImplValContainer ivc) const;

	Nullable<ControlFlowGraph>	processDown(const ControlFlowGraph& in, bool& outContinue) const
		{
		outContinue = false;

		return null();
		}

	template<class T>
	Nullable<T>	processDown(const T& in, bool& outContinue) const
		{
		return null();
		}

	template<class T>
	Nullable<T>	processUp(const T& in) const
		{
		return null();
		}

	Nullable<ImplValContainer> processUp(const ImplValContainer& in) const
		{
		return null() << duplicate(in);
		}

	Cumulus::ComputationDefinition processDown(
							const Cumulus::ComputationDefinition& in,
							bool& outContinue
							) const;

	Nullable<TypedFora::Abi::VectorRecord> processUp(const TypedFora::Abi::VectorRecord& in) const
		{
		return null() << duplicate(in);
		}

	Nullable<MutableVectorRecord> processUp(const MutableVectorRecord& in) const
		{
		return null() << duplicateMutableVector(in);
		}

	template<class T>
	T duplicate(const T& inObject) const
		{
		return ::transform(inObject, *this);
		}


};


