#pragma once

namespace Fora {
namespace Interpreter {

@type TimeElapsed = 
	double timeSpentInInterpreter,
	double timeSpentInCompiledCode,
	double timeSpentGarbageCollecting
{
public:
	TimeElapsed& operator+=(const TimeElapsed& inOther) 
		{
		*this = *this + inOther;
		return *this;
		}
	
	TimeElapsed operator+(const TimeElapsed& inOther) const
		{
		return TimeElapsed(
			timeSpentInInterpreter() + inOther.timeSpentInInterpreter(),
			timeSpentInCompiledCode() + inOther.timeSpentInCompiledCode(),
			timeSpentGarbageCollecting() + inOther.timeSpentGarbageCollecting()
			);
		}

	TimeElapsed operator-(const TimeElapsed& inOther) const
		{
		return TimeElapsed(
			timeSpentInInterpreter() - inOther.timeSpentInInterpreter(),
			timeSpentInCompiledCode() - inOther.timeSpentInCompiledCode(),
			timeSpentGarbageCollecting() - inOther.timeSpentGarbageCollecting()
			);
		}

	double total() const
		{
		return 
			timeSpentInCompiledCode() + 
			timeSpentInInterpreter() + 
			timeSpentGarbageCollecting()
			;
		}

	double totalComputing() const
		{
		return 
			timeSpentInCompiledCode() + 
			timeSpentInInterpreter()
			;
		}
};

}
}