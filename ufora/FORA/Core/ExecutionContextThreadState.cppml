/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#include "ExecutionContextThreadState.hppml"
#include "ExecutionContextImpl.hppml"
#include "PausedComputation.hppml"
#include "ExecutionContextScope.hppml"

#include "../../core/Logging.hpp"
#include "../../core/Memory.hpp"
#include "../../core/threading/ScopedThreadLocalContext.hpp"
#include "PausedComputation.hppml"
#include "ExecutionContextMemoryPool.hppml"
#include "../ControlFlowGraph/ControlFlowGraphUtil.hppml"
#include "../Serialization/SerializedObject.hpp"
#include "RefcountPool.hppml"
#include "StackFrame.hpp"
#include "StackFrameAllocator.hpp"
#include "../VectorDataManager/VectorDataManager.hppml"
#include "../VectorDataManager/VectorDataManagerImpl.hppml"
#include "../TypedFora/ABI/VectorHandle.hpp"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "../../core/threading/ScopedThreadLocalContext.hpp"
#include "../../core/Memory.hpp"
#include "../../core/StringUtil.hpp"
#include "../../core/Logging.hpp"
#include "../../core/Clock.hpp"
#include "../../core/Memory.hpp"
#include "ImplValContainerUtilities.hppml"

#include "DestroyingStackFrameVisitor.hppml"
#include "CreatePausedComputationStackFrameVisitor.hppml"
#include "../Interpreter/InterpreterFrame.hppml"
#include "../Runtime.hppml"
#include "../TypedFora/JitCompiler/TypedJumpTarget.hppml"
#include "../TypedFora/TypedForaUtil.hppml"
#include "../TypedFora/ABI/NativeLayoutType.hppml"
#include "../Native/NativeRuntimeContinuationValue.hppml"
#include "../Native/NativeRuntimeCallTarget.hppml"
#include "../TypedFora/ABI/ImplValVisitor.hppml"
#include "../TypedFora/ABI/StackFrameVisitor.hppml"
#include "../TypedFora/ABI/Stackframes.hppml"

using namespace Ufora::threading;

using TypedFora::Abi::VectorLoadRequest;

namespace Fora {
namespace Interpreter {

class SetExecutingThread {
public:
	SetExecutingThread(
				ExecutionContext* context, 
				ExecutionContextThreadState* thread,
				boost::shared_ptr<InterpreterThreadObserver> history
				) :
			mContext(context),
			mInterpreterHistory(*history)
		{
		auto impl = mContext->getImpl();

		lassert(!impl->mCurrentlyExecutingThread);

		impl->mCurrentlyExecutingThread = thread;
		impl->unreportAllSlots();

		mInterpreterHistory.resume();
		}

	~SetExecutingThread()
		{
		mContext->getImpl()->mCurrentlyExecutingThread = nullptr;
		mInterpreterHistory.pause();
		}
private:
	ExecutionContext* mContext;

	InterpreterThreadObserver& mInterpreterHistory;
};

ExecutionContextThreadState::ExecutionContextThreadState(
								ExecutionContextImpl* inExecutionContext
								) : 
		mExecutionContext(inExecutionContext->mActualContextPtr),
		mStackAllocator(32 * 1024, &*inExecutionContext->mMemoryPool),
		mErrorState(ErrorState::None()),
		mWhichContinuationIx(cont_state_empty),
		mRuntimeCallbacks(inExecutionContext->getRuntimeCallbacks()),
		mMemoryPool(&*inExecutionContext->mMemoryPool),
		mInterpreterHistory(inExecutionContext->mInterpreterHistory)
	{	
	initialize_();
	}

ExecutionContextThreadState::~ExecutionContextThreadState()
	{
	teardown();
	}

void ExecutionContextThreadState::initialize_()
	{
	LOG_DEBUG << "ECTS " << this << " initialized. mem = " << 
		Ufora::Memory::getTotalBytesAllocated() / 1024 / 1024.0;

	try {
		static_assert(cont_state_normal+1 == cont_state_exception, 
			"expected cont_state_normal and cont_state_exception to be consecutive"
			);

		mNormalContinuations.setTo(
			Runtime::getRuntime().getTypedForaCompiler()->generateDummyContinuation(
				&mResult,
				&mWhichContinuationIx,
				cont_state_normal,
				cont_state_normal + 2
				)
			);
	
		mInterruptContinuation = 
			Runtime::getRuntime().getTypedForaCompiler()->generateDummyContinuation(
					&mInterruptionResult,
					&mWhichContinuationIx,
					cont_state_interrupt
					);
			
		mCachecallContinuation = 
			Runtime::getRuntime().getTypedForaCompiler()->generateDummyContinuation(
					&mCacheRequest,
					&mWhichContinuationIx,
					cont_state_cache_request
					);
		}
	catch(std::logic_error& e) 
		{
		LOG_CRITICAL << "exception initializing an ExecutionContextThreadState: " << e.what();
		throw e;
		}
	catch(...) 
		{
		LOG_CRITICAL << "unknown exception initializing an ExecutionContextThreadState";
		throw;
		}

	mInterpreterHistory->clear();
	mInterpreterHistory->pause();
	}

std::string ExecutionContextThreadState::stateAsString() const
	{
	if (isInterrupted())
		return "interruped";
	if (isVectorLoad())
		return "VectorLoad(" + 
			prettyPrintStringWithoutWrapping(
				mExecutionContext->getVDM().getBigVectorLayouts()->convertSliceToPages(getVectorLoad())
				) + 
			")";
	if (isCacheRequest())
		return "cache request";
	if (isError())
		return "Error";
	if (isFinished())
		return "finished";
	if (mWhichContinuationIx == cont_state_error)
		return "UnknownCont";
	return "Unknown";
	}

void ExecutionContextThreadState::pageUsed(Fora::PageId inPage)
	{
	mExecutionContext->getImpl()->pageTouched(inPage);
	}

InterpreterThreadObserver& ExecutionContextThreadState::getInterpreterHistory()
	{
	return *mInterpreterHistory;
	}

TimeElapsed ExecutionContextThreadState::getTotalTimeElapsed() const
	{
	return mTimeElapsed;
	}

void ExecutionContextThreadState::observeTimeElapsed(double time, bool isInInterpreter)
	{
	if (isInInterpreter)
		mTimeElapsed.timeSpentInInterpreter() += time;
	else
		mTimeElapsed.timeSpentInCompiledCode() += time;
	}

void ExecutionContextThreadState::teardown()
	{
	lassert(mWhichContinuationIx != cont_state_error);
	
	if (isCacheRequest())
		{
		try {
			destroyFrame(mCacheRequest.second[0]);
			}
		catch(std::logic_error& e)
			{
			throw std::logic_error(e.what() + 
				std::string(". While destroying existing stackframe in CacheRequest"));
			}
		}
		else
	if (isInterrupted() || isVectorLoad())
		{
		try {
			destroyFrame(mInterruptionResult.first);
			}
		catch(std::logic_error& e)
			{
			if (isInterrupted())
				throw std::logic_error(e.what() + 
					std::string(". error tearing down interrupted stack frame."));
			else
				throw std::logic_error(e.what() + 
					std::string(". error tearing down VectorLoad stack frame."));
			}
		}
		else
	if (isFinished())
		//no frame to destroy - just the object
		{
		}
	
	mInterruptionResult.second = TypedFora::Abi::VectorLoadRequest();
	mWhichContinuationIx = cont_state_empty;
	mErrorState = ErrorState::None();
	mInterpreterHistory->clear();
	mInterpreterHistory->pause();
	mTimeElapsed = TimeElapsed();

	LOG_DEBUG << "Tearing down ECTS " << this;
	}

ImplVal ExecutionContextThreadState::getResult() const
	{
	return mResult;
	}

bool ExecutionContextThreadState::isEmpty() const
	{
	return mWhichContinuationIx == cont_state_empty && mErrorState.isNone();
	}

bool ExecutionContextThreadState::isError() const
	{
	return !mErrorState.isNone();
	}

bool ExecutionContextThreadState::isInterrupted() const
	{
	return mWhichContinuationIx == cont_state_interrupt &&
				!mInterruptionResult.second.getHandle() && 
				mErrorState.isNone();
	}

bool ExecutionContextThreadState::isVectorLoad() const
	{
	return mWhichContinuationIx == cont_state_interrupt &&
				mInterruptionResult.second.getHandle() && 
				mErrorState.isNone();
	}

Fora::BigVectorSlice ExecutionContextThreadState::getVectorLoad() const
	{
	lassert(isVectorLoad());
	
	return Fora::BigVectorSlice(
		mInterruptionResult.second.getHandle()->pagedValuesIdentity().guid(),
		mInterruptionResult.second.getIndexLow(),
		mInterruptionResult.second.getIndexHigh()
		);
	}

bool ExecutionContextThreadState::isCacheRequest() const
	{
	return mWhichContinuationIx == cont_state_cache_request && 
			mErrorState.isNone();
	}
		
bool ExecutionContextThreadState::isFinished() const
	{
	return mWhichContinuationIx == cont_state_normal ||
			mWhichContinuationIx == cont_state_exception ||
			!mErrorState.isNone();
	}

const ImplVal& ExecutionContextThreadState::getCacheRequestTuple() const
	{
	return mCacheRequest.first;
	}

void ExecutionContextThreadState::prepareStateToEnterNativeCode()
	{
	mRuntimeCallbacks.interruptContinuation = mInterruptContinuation;
	mRuntimeCallbacks.cacheCallContinuation = mCachecallContinuation;

	mWhichContinuationIx = cont_state_error;

	mInterruptionResult.second = VectorLoadRequest();
	}

void ExecutionContextThreadState::resumeInterruptedComputationInternally_()
	{
	prepareStateToEnterNativeCode();

	//make sure there is enough space to write into the terminal continuation
	NativeRuntimeContinuationValue<1> cont = mInterruptionResult.first;

	uword_t toss;
	
	resume(cont, &toss, 0); //takes nothing
	}

void ExecutionContextThreadState::evaluateFunctionPointer(
					const TypedFora::TypedJumpTarget& toCall, 
					const ImplValContainer& inArgs
					)
	{
	LOG_DEBUG << "ECTS " << this << " evaluating a FP";

	if (!isEmpty())
		teardown();

	ImmutableTreeVector<JudgmentOnValue> jovs = 
		TypedFora::jovListFromTypes(toCall.callSignature())
		;

	JOVT signature = JOVT::Unnamed(jovs);

	//first make sure that the arguments match the signature
	lassert_dump(
		signature.covers(inArgs.getReference()),
		"Can't call a function expecting "
			<< prettyPrintString(signature) << " with args "
			<< prettyPrintString(inArgs) << " because they don't match!"
		);
	
	
	ImplVal inputVal = mExecutionContext->getRefcountPool()->add(inArgs.getReference());
	
	prepareStateToEnterNativeCode();

	NativeRuntimeCallTarget callTarget;

		{
		callTarget = Runtime::getRuntime().getTypedForaCompiler()->
			generateStackframeAndCallTargetFromArgTuple(
				toCall,
				TypedFora::TypedContinuation(
					NativeRuntimeUntypedContinuation(
						mNormalContinuations,
						&mRuntimeCallbacks
						)
					),
				mStackAllocator.getMemBlockPtr(),
				inputVal,
				&*mExecutionContext->getRefcountPool()
				);
		}

	SetExecutingThread executing(mExecutionContext, this, mInterpreterHistory);

	callNativeRuntimeCallTarget(callTarget);
	
	checkForNaturalResumption_();

	releaseUnusedStackMemory_();

	mInterpreterHistory->pause();
	}

void ExecutionContextThreadState::placeInEvaluationState(
							const ImplValContainer& inArgs,
							boost::function1<ImplValContainer, ImplValContainer> valueImportFunction
							)
	{
	LOG_DEBUG << "ECTS " << this << " placed into an Apply eval state";

	ControlFlowGraph graph = ControlFlowGraphUtil::canonicalApplyGraph(*inArgs.tupleGetSize());

	ImmutableTreeVector<ImplValContainer> arguments;
	for (long k = 0; k < *inArgs.tupleGetSize(); k++)
		arguments = arguments + *inArgs.tupleGetItem(k);

	NativeRuntimeContinuationValueVector vals = 
		instantiatePausedComputation_(
			PausedComputation(
				emptyTreeVec() + 
					PausedComputationFrame(
						arguments,
						graph,
						null()
						)
				),
			valueImportFunction
			);

	lassert(vals.size()==1)

	mInterruptionResult.first = vals[0];
	mInterruptionResult.second = TypedFora::Abi::VectorLoadRequest();
	
	mWhichContinuationIx = cont_state_interrupt;
	}

void ExecutionContextThreadState::compute()
	{
	LOG_DEBUG << "ECTS " << this << " computing. state=" << stateAsString();

	if (isFinished())
		return;

	lassert_dump(
			isInterrupted() || 
			isVectorLoad(),
		(isCacheRequest() ? "cache request" :
			isEmpty() ? "empty" : 
			isFinished() ? "finished" : 
			isError() ? "error" : 
			"unknown")
		);

	SetExecutingThread executing(mExecutionContext, this, mInterpreterHistory);
	
	if (isVectorLoad())
		if (!resolveVectorLoad_())
			return;

	resumeInterruptedComputationInternally_();
	
	checkForNaturalResumption_();

	releaseUnusedStackMemory_();

	LOG_DEBUG << "ECTS " << this << " done computing. state=" << stateAsString();
	}

NativeRuntimeContinuationValue<1>
ExecutionContextThreadState::callInterpreter(uword_t inBlockID, void* inCallFrame)
	{
	ExecutionContextScope scope(*mExecutionContext, ExecutionContextScope::interpreter);

	try {
		return InterpreterFrame::interpreter(mStackAllocator.getMemBlockPtr(), inBlockID, inCallFrame);
		}
	catch (std::logic_error& e)
		{
		LOG_CRITICAL << "ExecutionContextThreadState caught an unexpected exception: " << e.what();
		throw;
		}
	catch (...)
		{
		LOG_CRITICAL << "ExecutionContextThreadState caught an unexpected unknown exception.";
		throw;
		}
	}

void ExecutionContextThreadState::callNativeRuntimeCallTarget(const NativeRuntimeCallTarget& inCallTarget)
	{
	ExecutionContextScope scope(*mExecutionContext, ExecutionContextScope::machineCode);
	
	try {
		Runtime::getRuntime().getTypedForaCompiler()->callFunction(inCallTarget, mStackAllocator.getMemBlockPtr());
		}
	catch (std::logic_error& e)
		{
		LOG_CRITICAL << "ExecutionContextThreadState caught an unexpected exception: " << e.what();
		throw;
		}
	catch (...)
		{
		LOG_CRITICAL << "ExecutionContextThreadState caught an unexpected unknown exception.";
		throw;
		}
	}


void ExecutionContextThreadState::resume(
			NativeRuntimeContinuationValue<1> value,
			void* data,
			uword_t bytes
			)
	{
	memcpy(value.slots()[0].target(), data, bytes);
	
	callNativeRuntimeCallTarget(
		value.getTypedForaCompilerCallTarget(0)
		);
	}

bool ExecutionContextThreadState::resolveVectorLoad_()
	{
	//check whether this was a vector load
	lassert(mInterruptionResult.second.isPopulated());

	double t0 = curClock();

	TypedFora::Abi::VectorLoadRequest request = mInterruptionResult.second;

	TypedFora::Abi::VectorHandle::LoadCheckResult result = 
		TypedFora::Abi::VectorHandle::LoadCheckResult::Failed;

	lassert(mMemoryPool->isExecuting());
	lassert(mMemoryPool->hasAcquiredPageLocks());

	if (request.getHandle() && 
			!mExecutionContext->getVDM().getImpl()
				->contextMayMapVectorHandles(
					mExecutionContext->getImpl().get()
					)
				)
		{
		LOG_DEBUG << "Context " << mExecutionContext 
			<< " unmapping everything because we may not map vector handles.";

		result = TypedFora::Abi::VectorHandle::LoadCheckResult::UnmapAllAndTryAgain;
		}
		else
	if (request.getHandle())
		{
		result = request.getHandle()->attemptToLoadValues(
			&mExecutionContext->getVDM(),
			request.getIndexLow(),
			request.getIndexHigh()
			);

		LOG_DEBUG << "ECTS " << this << " calling attemptToLoadValues " 
			<< request.getIndexLow() << " to " << request.getIndexHigh() 
			<< " within " << request.getHandle()
			<< " took " << curClock() - t0;
		}

	if (curClock() - t0 > .05)
		LOG_WARN << "Took " << curClock() - t0 << " to call attemptToLoadValues on "
			<< "[" << request.getIndexLow() << "," << request.getIndexHigh() << ") in "
			<< request.getHandle()
			;

	if (result == TypedFora::Abi::VectorHandle::LoadCheckResult::UnmapAllAndTryAgain)
		{
		LOG_DEBUG << "Context " << mExecutionContext << " unmapping everything.";
		
		mExecutionContext->getImpl()->scheduleVdmCheck();
		mInterruptionResult.second = TypedFora::Abi::VectorLoadRequest();

		return false;
		}
		else
	if (result == TypedFora::Abi::VectorHandle::LoadCheckResult::Success)
		{
		LOG_DEBUG << "Context " << mExecutionContext << " successfully mapped " << request.getHandle() << ".";
		
		mInterruptionResult.second = TypedFora::Abi::VectorLoadRequest();

		return true;
		}
		else 
	if (result == TypedFora::Abi::VectorHandle::LoadCheckResult::Failed)
		{
		LOG_DEBUG << "Context " << mExecutionContext << " failed to map " << request.getHandle() << ".";				

		return false;
		}
	else
		{
		lassert_dump(false, "there are no other possibilities for the LoadCheckResult");
		}
	}

void ExecutionContextThreadState::checkForNaturalResumption_()
	{
	while (isInterrupted() || isVectorLoad())
		{
		bool shouldResumeImmediately = false;

		//check whether this was a vector load
		if (mInterruptionResult.second.isPopulated())
			shouldResumeImmediately = resolveVectorLoad_();
		
		if (shouldResumeImmediately)
			resumeInterruptedComputationInternally_();
		else
			return;
		}
	}

void ExecutionContextThreadState::setResult(const ImplValContainer& finalValue, bool isException)
	{
	lassert(isEmpty());

	mResult = mExecutionContext->getRefcountPool()->add(finalValue.getReference());

	if (isException)
		mWhichContinuationIx = cont_state_exception;
	else
		mWhichContinuationIx = cont_state_normal;
	
	mStackAllocator.releaseAll();
	}

bool ExecutionContextThreadState::computeForFixedTime(double total)
	{
	double thresholdT = curClock() + total;

	mExecutionContext->getImpl()->triggerInternalInterruptAtTime(thresholdT);

	compute();

	LOG_DEBUG << "Computed " << this << " for " << curClock() - (thresholdT - total)
		<< " with " 
		<< extractPausedComputation([&](ImplValContainer in) { return in; }).frames().size()
		<< " frames."
		<< (mInterpreterHistory->isTracing() ? "tracing":"not tracing");

	mExecutionContext->getImpl()->disableScheduledInternalInterruptTrigger();

	return mExecutionContext->getImpl()->resetInterruptStateIfOnlyTriggeredInternallyAndNoGcPending() &&
		curClock() >= thresholdT;
	}


void ExecutionContextThreadState::destroyFrame(
		NativeRuntimeContinuationValue<1> stackFramePtr
		)
	{
	DestroyingStackFrameVisitor visitor(mStackAllocator);
	TypedFora::Abi::StackFrameVisitor::visitStackFrame(stackFramePtr.base(), visitor);
	}


PausedComputation ExecutionContextThreadState::extractPausedComputation(
						boost::function1<ImplValContainer, ImplValContainer> inExportFunction
						)
	{
	if (isFinished())
		{
		if (!mErrorState.isNone())
			return PausedComputation(emptyTreeVec(), PausedComputationTail::Failure(mErrorState));

		return PausedComputation(
			emptyTreeVec(), 
			PausedComputationTail::PendingResult(
				inExportFunction(ImplValContainer(mResult)),
				isExceptionResult()
				)
			);
		}
	
	CreatePausedComputationStackFrameVisitor visitor(inExportFunction);
	
	visitStackFramesAndValues(visitor);

	PausedComputationTail tail;

	if (visitor.getPendingResultValue())
		{
		lassert(isInterrupted());
		tail = PausedComputationTail::PendingResult(
			visitor.getPendingResultValue()->first,
			visitor.getPendingResultValue()->second
			);
		}
		else
	if (isCacheRequest())
		tail = PausedComputationTail::Cachecall(inExportFunction(mCacheRequest.first));
		else
	if (isVectorLoad())
		{
		TypedFora::Abi::PooledVectorRecord vec(
			mInterruptionResult.second.getHandle(), 
			mInterruptionResult.second.getHandle()->size(),
			0,
			1
			);

		tail = PausedComputationTail::VectorLoad(
			inExportFunction(
				ImplValContainerUtilities::createVector(
					vec.getVectorRecord()
					)
				),
			mInterruptionResult.second.getIndexLow(),
			mInterruptionResult.second.getIndexHigh()
			);
		}
	else
		{
		lassert(isInterrupted());
		}

	return PausedComputation(visitor.getFrames(), tail);
	}


void ExecutionContextThreadState::placeInEvaluationState(
						const PausedComputation& computation,
						boost::function1<ImplValContainer, ImplValContainer> valueImportFunction
						)
	{
	LOG_DEBUG << "ECTS " << this << " evaluating a paused computation";

	NativeRuntimeContinuationValueVector vals = 
		instantiatePausedComputation_(computation, valueImportFunction);

	if (vals.size() == 0)
		{
		lassert_dump(
			isFinished() || isError(), 
			"Expected to be finished if we have no continuations"
			);
		return;
		}

	if (vals.size() != 1)
		{
		lassert_dump(
			false,
			"Expected zero or one continuation. Got " << vals.size()
			);
		}

	if (computation.tail().isCachecall())
		{
		mCacheRequest.second.setTo(vals + vals.slots()[0]);

		mCacheRequest.second.slots()[0].blockID() = cont_cont_left;
		mCacheRequest.second.slots()[1].blockID() = cont_cont_right;

		mCacheRequest.first = mExecutionContext->getRefcountPool()->add(
			valueImportFunction(computation.tail().getCachecall().cachecallRequest())
				.getReference()
			);

		mWhichContinuationIx = cont_state_cache_request;

		return;
		}

	mInterruptionResult.first = vals[0];
	mInterruptionResult.second = TypedFora::Abi::VectorLoadRequest();
	
	mWhichContinuationIx = cont_state_interrupt;

	if (computation.tail().isVectorLoad())
		{
		ImplVal vec = mExecutionContext->getRefcountPool()->add(
			valueImportFunction(
				computation.tail().getVectorLoad().vector()
				).getReference()
			);

		lassert(vec.type().isVector());

		int64_t low = computation.tail().getVectorLoad().low();
		int64_t high = computation.tail().getVectorLoad().high();

		mInterruptionResult.second = 
			TypedFora::Abi::VectorLoadRequest(
				vec.cast<VectorRecord>().dataPtr(),
				low,
				high
				);
		}
	}


NativeRuntimeContinuationValueVector
ExecutionContextThreadState::instantiatePausedComputation_(	
						const PausedComputation& computation,
						boost::function1<ImplValContainer, ImplValContainer> valueImportFunction
						)
	{
	mInterpreterHistory->clear();

	if (computation.tail().isFailure())
		{
		setErrorState(computation.tail().getFailure().error());
		return NativeRuntimeContinuationValueVector();
		}

	if (computation.frames().size() == 0)
		{
		lassert_dump(computation.tail().isPendingResult(), "can't instantiate an empty computation");

		ImplValContainer imported = valueImportFunction(computation.tail().getPendingResult().value());

		setResult(
			mExecutionContext->getRefcountPool()->add(imported.getReference()), 
			computation.tail().getPendingResult().isException()
			);

		return NativeRuntimeContinuationValueVector();
		}

	ImmutableTreeVector<PausedComputationFrame> frames = computation.frames();

	if (computation.tail().isPendingResult())
		{
		frames = frames + 
			PausedComputationFrame(
				emptyTreeVec() + valueImportFunction(computation.tail().getPendingResult().value()),
				ControlFlowGraphUtil::canonicalReturnGraph(computation.tail().getPendingResult().isException()),
				null()
				);
		}

	//this is the return stackframe address for the outermost function call
	NativeRuntimeContinuationValueVector curFramePtrPair(mNormalContinuations);

	for (long frameIx = 0; frameIx < frames.size(); frameIx++)
		{
		std::vector<ImplVal> values;

		PausedComputationFrame frame(frames[frameIx]);

		for (long k = 0; k < frame.values().size();k++)
			{
			ImplValContainer importedValue = valueImportFunction(frame.values()[k]);

			values.push_back(
				mExecutionContext->getRefcountPool()->add(
					importedValue.getReference()
					)
				);
			}

		EvalFrame* evalFramePtr = EvalFrame::allocate(
			frame.graph(), 
			frame.label(), 
			mStackAllocator,
			EvalFrame::allocateNewUniqueEvalFrameID(),
			null()
			);

		evalFramePtr->copyPooledImplValsIntoFrame(values);

		evalFramePtr->callFrame.conts.setTo(curFramePtrPair);
		evalFramePtr->callFrame.callbacks = &mRuntimeCallbacks;

		NativeRuntimeContinuationValueVector continuations(
			Runtime::getRuntime().getTypedForaCompiler()->wrapCPPCallback(
				&InterpreterFrame::interpreter,
				evalFramePtr,
				mStackAllocator.getMemBlockPtr()
				)
			);

		if (frameIx + 1 == frames.size())
			{
			continuations = continuations +
				NativeRuntimeContinuationSlot(
					cont_internal,
					&evalFramePtr->resultValue
					);
			}
		else
			{
			continuations = continuations + 
				NativeRuntimeContinuationSlot(
					cont_cont_left,
					&evalFramePtr->resultValue
					) +
				NativeRuntimeContinuationSlot(
					cont_cont_right,
					&evalFramePtr->resultValue
					)
					;
			}

		curFramePtrPair = continuations;
		}

	return curFramePtrPair;
	}

bool ExecutionContextThreadState::isExceptionResult() const
	{
	lassert(isFinished());

	return mWhichContinuationIx == cont_state_exception;
	}

ErrorState ExecutionContextThreadState::getErrorState() const
	{
	return mErrorState;
	}

void ExecutionContextThreadState::setErrorState(const ErrorState& inErrorState)
	{
	mErrorState = inErrorState;
	}

void ExecutionContextThreadState::logAMessage(const ImplValContainer& message, MemoryPool* inPool)
	{
	}

void ExecutionContextThreadState::logSomeMessages(const ImplValContainer& messagesOrNone, MemoryPool* inPool)
	{
	}

void ExecutionContextThreadState::visitStackFramesAndValues(TypedFora::Abi::StackFrameVisitor& visitor)
	{
	visitor.visitFreeValue(mComputationLog);

	if (isInterrupted() || isVectorLoad())
		{
		visitStackFrames(
			visitor, 
			mInterruptionResult.first
			);

		if (isVectorLoad())
			{
			TypedFora::Abi::PooledVectorRecord vec(
				mInterruptionResult.second.getHandle(), 
				mInterruptionResult.second.getHandle()->size(),
				0,
				1
				);

			visitor.visitFreeValue(Type::Vector(), (void*)&vec, false);

			mInterruptionResult.second.setHandle(vec.getVectorRecord().dataPtr());
			}
		}
		else
	if (isCacheRequest())
		{
		visitStackFrames(
			visitor, 
			mCacheRequest.second[0]
			);

		visitor.visitFreeValue(mCacheRequest.first, false);
		}
		else
	if (isFinished())
		{
		if (!mErrorState.isNone())
			return;

		visitor.visitFreeValue(mResult, false);
		}
		else
	if (isEmpty() || isError())
		{
		}
	else
		{
		if (mWhichContinuationIx == cont_state_error)
			lassert_dump(false, this << " in an unknown state: cont_state_error");	
		lassert_dump(false, this << " in an unknown state");	
		}
	}

void ExecutionContextThreadState::visitStackFrames(
		TypedFora::Abi::StackFrameVisitor& visitor,
		NativeRuntimeContinuationValue<1> stackFramePtr
		)
	{
	TypedFora::Abi::StackFrameVisitor::visitStackFrame(stackFramePtr.base(), visitor);
	}

void ExecutionContextThreadState::releaseUnusedStackMemory_()
	{
	mStackAllocator.releaseTail();
	}

}
}

