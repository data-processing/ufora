/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "PausedComputation.hppml"
#include "../Interpreter/Instruction.hppml"
#include "../TypedFora/ABI/StackFrameVisitor.hppml"
#include "../TypedFora/ABI/LiveValue.hppml"

namespace Fora {
namespace Interpreter {

class CreatePausedComputationStackFrameVisitor : public TypedFora::Abi::StackFrameVisitor {
public:
	CreatePausedComputationStackFrameVisitor(	boost::function1<ImplValContainer, ImplValContainer> exportFunction,
												bool inOnlyDoOneFrame = false
												) : 
			mExportFunction(exportFunction),
			mOnlyDoOneFrame(inOnlyDoOneFrame)
		{
		}

	ImplValContainer getValue(
			NativeContinuationVarMetadataSerialized varMetadata,
			void* data
			) const
		{
		std::vector<char> tempData;

		TypedFora::Abi::LiveValue value = 
			TypedFora::Abi::NativeStackFrameWrapper::readStackFrameLayoutToLiveValue(tempData, varMetadata, data);

		return exportImplval(value.getImplval());
		}

	virtual bool visitNativeStackFrame(
					TypedFora::Abi::NativeStackFrameWrapper& stackFrame
					)
		{
		//get the metadata
		ImmutableTreeVector<NativeContinuationMetadataSerialized> meta = stackFrame.getMetadata();
		
		for (long k = ((long)meta.size()-1); k >= 0; k--)
			{
			@match NativeContinuationMetadataInstruction(meta[k].node())
				-| TypedForaInstruction(tfMetadata) ->> {
					@match TypedFora::MetadataInstruction(*tfMetadata)
						-|	NodeWithResult((g,l),indexInCFGNode) ->> {
								ImmutableTreeVector<ImplValContainer> values;

								for (long j = 0; j < meta[k].vars().size();j++)
									values = values + getValue(meta[k].vars()[j], stackFrame.getSlotData());

								lassert_dump(
									values.size() == g[l].argCount() + 1,
									values.size() << " != " << g[l].argCount() << " + " << 1
									);

								mFrames = PausedComputationFrame(values.slice(0, values.size()-1), g, l) + mFrames;

								mMetadataPerFrame = *tfMetadata + mMetadataPerFrame;

								//this is only valid on the front-most frame
								lassert(!mPendingResultValue);
								lassert(mFrames.size() == 1);
								lassert(indexInCFGNode == 0 || indexInCFGNode == 1);
								
								mPendingResultValue = make_pair(values.back(), indexInCFGNode > 0);
								}
						-|	Node((g,l)) ->> {
								ImmutableTreeVector<ImplValContainer> values;

								for (long j = 0; j < meta[k].vars().size();j++)
									values = values + getValue(meta[k].vars()[j], stackFrame.getSlotData());

								mFrames = PausedComputationFrame(values, g, l) + mFrames;
								mMetadataPerFrame = *tfMetadata + mMetadataPerFrame;
								}
					}
				-|	_ ->> {
					}
				;
			}

		return !mOnlyDoOneFrame;
		}

	virtual bool visitInterpreterStackFrame(
					Fora::Interpreter::EvalFrame* stackFrame
					)
		{
		ImmutableTreeVector<ImplValContainer> values;

		for (long k = 0; k < stackFrame->instructionPtr->argCount(); k++)
			values = values + exportImplval(stackFrame->evalFrameArgList()[k]);
		
		mFrames = PausedComputationFrame(
			values, 
			stackFrame->instructionPtr->getGraph(), 
			stackFrame->instructionPtr->getLabel()
			) + mFrames;

		return !mOnlyDoOneFrame;
		}

	ImplValContainer exportImplval(ImplVal val) const
		{
		return mExportFunction(ImplValContainer(val));
		}

	virtual bool visitResultSignatureAdapterStackFrame(
					TypedFora::Abi::ResultSignatureAdapterFrame* stackFrame
					)
		{
		return !mOnlyDoOneFrame;
		}

	virtual bool visitHeldImplvalTeardownFrame(
					TypedFora::Abi::InterpreterUniqueIdHolderFrame* stackFrame
					)
		{
		return !mOnlyDoOneFrame;
		}

	virtual bool visitCppCallbackFrame(
					TypedFora::NativeCppCallbackStackframe* cppCallbackFrame
					)
		{
		return true;
		}

	ImmutableTreeVector<PausedComputationFrame> getFrames() const
		{
		return mFrames;
		}

	ImmutableTreeVector<TypedFora::MetadataInstruction> getFrameMetadata() const
		{
		return mMetadataPerFrame;
		}

	Nullable<pair<ImplValContainer, bool> > getPendingResultValue() const
		{
		return mPendingResultValue;
		}

private:
	bool mOnlyDoOneFrame;

	//in the top frame, a pending value if one is there
	Nullable<pair<ImplValContainer, bool> > mPendingResultValue;

	boost::function1<ImplValContainer, ImplValContainer> mExportFunction;

	ImmutableTreeVector<PausedComputationFrame> mFrames;

	ImmutableTreeVector<TypedFora::MetadataInstruction> mMetadataPerFrame;
};

}
}


