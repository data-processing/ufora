/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ValueDeepcopier.hppml"
#include "../TypedFora/ABI/ForaValueArray.hppml"
#include "../../core/Logging.hpp"
#include "../../core/UnitTest.hpp"
#include "../../core/math/Random.hpp"

using TypedFora::Abi::ForaValueArray;

class TestValueDeepcopierFixture {
public:
	TestValueDeepcopierFixture()
		{
		}

	std::vector<ForaValueArray*> mArrays;

	boost::mutex mMutex;
};

BOOST_FIXTURE_TEST_SUITE( test_ValueDeepcopier, TestValueDeepcopierFixture )

BOOST_AUTO_TEST_CASE ( test_fuzzing )
	{
	auto pool = MemoryPool::getFreeStorePool();

	Ufora::math::Random::Uniform<float> random(2);

	long count = 0;
	while (count < 10000)
		{
		count++;

		if (mArrays.size() < 1000)
			{
			mArrays.push_back(ForaValueArray::Empty(pool));

			ImplValContainer val;

			double r = random();

			if (r < .2)
				val = ImplValContainer(CSTValue(10));
				else
			if (r < .4)
				val = ImplValContainer(CSTValue("this is a nice string"));
				else
			if (r < .6)
				val = ImplValContainer(CSTValue(false));
				else
			if (r < .8)
				val = ImplValContainer();
			else
				val = ImplValContainer(
					(emptyTreeVec() +
						ImplValContainer(CSTValue(1))) * 3 + ImplValContainer(CSTValue(false))
					);

			long ct = random() * 100 + 1;
			for (long k = 0; k < ct; k++)
				mArrays.back()->append(val);
			}
		else
			{
			//pick one and add it to another
			long source = random() * mArrays.size();
			long dest = random() * mArrays.size();

			if (mArrays[source]->size() > 20000)
				{
				pool->destroy(mArrays[source]);
				mArrays.erase(mArrays.begin() + source);
				}
			else
				{
				if (source != dest)
					{
					ValueDeepcopierState state;

					ValueDeepcopier extractor(
						state,
						true,
						pool,
						false,
						false
						);

					extractor.duplicate(
						mArrays[dest],
						mArrays[source]
						);
					}
				}
			}
		}
	}


BOOST_AUTO_TEST_SUITE_END( )

