/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
dataframe_simple: (
    let columns = [
        [1.0, 5.0, 3.0, 4.0, 2.0, 0.0, 1.0],
        [0.4, 1.3, 2.1, 0.4, 4.4, 3.2, 3.5],
        [0.1, 2.0, 1.1, 5.2, 3.4, 1.0, 2.1]
        ];
    dataframe.DataFrame(columns)
    );


`test
dataframe_num_columns:
    assertions.assertEqual(dataframe_simple.numColumns, 3);

`test
dataframe_num_rows: 
    assertions.assertEqual(dataframe_simple.numRows, 7);

`test
dataframe_column_size_1: 
    assertions.assertEqual(size(dataframe_simple["C0"]), 7);

`test
dataframe_column_size_2: 
    assertions.assertEqual(size(dataframe_simple["C1"]), 7);

`test
dataframe_column_size_3: 
    assertions.assertEqual(size(dataframe_simple["C2"]), 7);

`test
dataframe_get_column_1: (
    let vec = [1.0, 5.0, 3.0, 4.0, 2.0, 0.0, 1.0];
    
    assertions.assertEqual(dataframe_simple.getColumn("C0").dataVec, vec);
);

`test
dataframe_get_column_2: (
    let vec = [0.4, 1.3, 2.1, 0.4, 4.4, 3.2, 3.5];
    assertions.assertEqual(dataframe_simple["C1"].dataVec, vec);
);

`test
dataframe_get_element_from_row_1:
    assertions.assertEqual(dataframe_simple[0][0], 1.0);

`test
dataframe_get_element_from_row_2:
    assertions.assertEqual(dataframe_simple[1][0], 5.0);

`test
dataframe_get_element_from_row_3:
    assertions.assertEqual(dataframe_simple[0][1], 0.4);

`test
dataframe_row_size: 
    assertions.assertEqual(size(dataframe_simple[0]), 3);

`test
dataframe_get_row_alias_1: 
    assertions.assertEqual(dataframe_simple.iloc(1)[1], 1.3);

`test
dataframe_row_operator_in: 
    assertions.assertIn(5.0, dataframe_simple[1]);

`test
dataframe_get_element_from_row_4a: 
    assertions.assertEqual(dataframe_simple[2]["C1"], 2.1);

`test
dataframe_get_element_from_row_4b:
    assertions.assertEqual(dataframe_simple["C1"][2], 2.1);

`test
dataframe_getitem_slice_1: (
    let df = dataframe_simple[2,5];

    assertions.assertEqual(df.getColumn("C0").dataVec, [3.0, 4.0, 2.0]);
    assertions.assertEqual(df.getColumn("C1").dataVec, [2.1, 0.4, 4.4]);
    assertions.assertEqual(df.getColumn("C2").dataVec, [1.1, 5.2, 3.4]);
);

`test
dataframe_getitem_slice_2: (
    let df = dataframe_simple[2,5,2];

    assertions.assertEqual(df["C0"].dataVec, [3.0, 2.0]);
    assertions.assertEqual(df["C1"].dataVec, [2.1, 4.4]);
    assertions.assertEqual(df["C2"].dataVec, [1.1, 3.4]);
);

`test
dataframe_getitem_slice_3: (
    let df = dataframe_simple[2,,2];

    assertions.assertEqual(df["C0"].dataVec, [3.0, 2.0, 1.0]);
    assertions.assertEqual(df["C1"].dataVec, [2.1, 4.4, 3.5]);
    assertions.assertEqual(df["C2"].dataVec, [1.1, 3.4, 2.1]);
);

`test
dataframe_getitem_slice_4: (
    let df = dataframe_simple[,,2];

    assertions.assertEqual(df["C0"].dataVec, [1.0, 3.0, 2.0, 1.0]);
    assertions.assertEqual(df["C1"].dataVec, [0.4, 2.1, 4.4, 3.5]);
    assertions.assertEqual(df["C2"].dataVec, [0.1, 1.1, 3.4, 2.1]);
);

`test
dataframe_autogenerated_column_names:
    assertions.assertEqual(dataframe_simple.columnNames, ["C0", "C1", "C2"]);

`test
dataframe_operator_on_nondataframes: (
    let df = dataframe_simple * 2;

    assertions.assertEqual(df[1][1], 2.6);
    assertions.assertEqual(df.columnNames, dataframe_simple.columnNames);

    let df2 = 2 * dataframe_simple;

    dataframe.assertFramesEqual(df, df2);
);

`test
dataframe_operator_on_dataframes_1: (
    let df = dataframe_simple + dataframe_simple;
    assertions.assertEqual(df[1][1], 2.6);
);

`test
dataframe_operator_on_dataframes_2: (
    let df1 = dataframe.DataFrame(
        [[1,2,3], [4,5,6]], columnNames:["C0", "C1"]
        );

    let df2 = dataframe.DataFrame(
        [[-1,-2,-3], [7,8,9]], columnNames:["C0", "asdf"]
        );

    let sumDf = df1 + df2;

    let expectedSumDf = dataframe.DataFrame(
        [[0,0,0], [4,5,6], [7,8,9]], columnNames:["C0", "C1", "asdf"]
        );

    dataframe.assertFramesEqual(sumDf, expectedSumDf);
    assertions.assertEqual(sumDf.columnNames, ["C0", "C1", "asdf"])
);

`test
dataframe_match:
    assertions.assertMatches(dataframe_simple, dataframe.DataFrame);

`test
dataframe_column_operator: (
    let series = dataframe_simple["C0"] + dataframe_simple["C1"];
    assertions.assertEqual(series[0], 1.4)
);

`test
dataframe_row_apply: (
    let sumRow = fun(row) { sum(0, size(row), {row[_]}) };
    let series = dataframe_simple.rowApply(sumRow);
    assertions.assertEqual(series[0], 1.5);
);

`test
dataframe_col_apply: (
    let seriesSum = fun(dataframe.Series(series)) {
        let s = 0;
        for i in sequence(size(series)) {
            s = s + series[i]
            }
        s
        };
    let columnSums = dataframe_simple.columnApply(seriesSum);
    assertions.assertEqual(columnSums, [16.0, 15.3, 14.9])
);

`test dataframe_tilde_tilde: (
    let df = dataframe.DataFrame(a: [1, 4, 9], b: [16, 25, 36])

    dataframe.assertFramesEqual(
        df ~~ math.sqrt,
        dataframe.DataFrame(
            a: [1, 2, 3], 
            b: [4, 5, 6]
            )
        )

    dataframe.assertFramesEqual(df ~~ Float64, df)
    );

`test
dataframe_replace_column_1: (
    let v = Vector.range(7.0);
    let df = dataframe_simple.replaceColumn(v, name: "C2");
    assertions.assertEqual(df.columnNames, ["C0", "C1", "C2"])
    assertions.assertEqual(df["C2"][6], 6.0)
);

`test
dataframe_replace_column_2: (
    let v = Vector.range(7.0);
    let df = dataframe_simple.replaceColumn(v, name: "C2");
    assertions.assertEqual(df.columnNames, ["C0", "C1", "C2"])
    assertions.assertEqual(df["C2"][6], 6.0)
);

`test
dataframe_replace_column_3: (
    let df = dataframe.DataFrame([[1]])

    let o = object { operator ()(row) { Float64(row["C0"]) } };

    let df2 = df.replaceColumn(o, name: "C0");
    let df3 = dataframe.DataFrame([[1.0]])
    dataframe.assertFramesEqual(df2, df3)
);

`test
dataframe_apply_to_column: (
    let f = fun(x) { 
        if (x > 1.0) 1.0 else 0.0
        };
    let df = dataframe_simple.applyToColumn(f, name: "C2");
    assertions.assertEqual(df["C2"].dataVec.sum(), 5.0)
    );

`test
dataframe_apply_to_column_loop: (
    let v1 = Vector.range(1000000)
    let v2 = Vector.range(1000000)

    let df_in = dataframe.DataFrame([v1, v2], columnNames: ["C1", "C2"]);
    
    let funcs = [
        {_+1},
        {_+2},
        {_+3},
        {_+4},
        {_+5},
        {_+6},
        {_+7},
        {_+8},
        {_+9},
        {_+10}
        ];

    df_in("C2").applyToColumn(funcs[0], name: "C2")

    return true;

    let res = (funcs ~~ fun(f) { 
        df_in("C2").applyToColumn(f, name: "C2")["C2"].sum()
        }).sum()

    res == 5000050000000
    );

`test
dataframe_slice_1: (
    let slice_df = dataframe_simple.slice(1, 4);
    assertions.assertEqual(slice_df[0][0], 5.0)
    assertions.assertEqual(slice_df[1][1], 2.1)
);

`test
dataframe_slice_2: (
    let slice_df = dataframe_simple.slice(1, 4);
    assertions.assertEqual(slice_df.numRows, 3)
);

`test
dataframe_select_1: (
    let filterFun = { max(_) >= 4.0 }
    let df = dataframe_simple.select(filterFun);
    assertions.assertEqual(df.numRows, 3)
    let df2 = dataframe_simple.filter(filterFun);
    dataframe.assertFramesEqual(df, df2)
);

`test
dataframe_select_2: (
    let df = dataframe_simple;
    let predicate = { max(_) >= 4.0 };
    for ix in sequence(2, df.numRows + 1) {
        assertions.assertEqual(
            df.select(predicate, splitLimit: ix).numRows, 
            3
            );
        }

    true
);

`test
dataframe_each: (
    // Count all elements >= 3.0.
    let df = dataframe_simple.each({ _ >= 3.0 });

    let summer = fun(col) {
        let s = 0;
        for i in sequence(size(col)) {
            s = s + col[i]
            }
        s
        };

    let v = df.columnApply(summer);
    assertions.assertEqual(v.sum(), 8)
);

`test
dataframe_drop: (
    // Drop all rows that contain 0.0.
    let df = dataframe_simple.drop(0.0);
    assertions.assertEqual(df.numRows, 6)
);

`test
dataframe_append_1: (
    let df = dataframe_simple.append(dataframe_simple);
    assertions.assertEqual(df.numRows, 14)
    assertions.assertEqual(df.numColumns, 3)
);

`test
dataframe_append_2: (
    let df1 = dataframe.DataFrame([[1,2],[3,4]])
    let df2 = dataframe.DataFrame(
        [[5,6], [7,8]], columnNames: ["C3", "C0"]
        )
    let appendedDf = df1.append(df2)

    dataframe.assertFramesEqual(
        appendedDf,
        dataframe.DataFrame(
            [[1,2,7,8], [3,4,nothing,nothing], [nothing,nothing,5,6]],
            columnNames: ["C0", "C1", "C3"]
            )
        )
);

`test
dataframe_append_3: (
    let df1 = dataframe.DataFrame([[1,2], [3,4]], columnNames: ["C1", "C0"])
    let df2 = dataframe.DataFrame(
        [[5,6], [7,8]], columnNames: ["C3", "C0"]
        )
    let appendedDf = df1.append(df2)

    dataframe.assertFramesEqual(
        appendedDf,
        dataframe.DataFrame(
            [[1, 2, nothing, nothing], [3, 4, 7, 8], [nothing, nothing, 5, 6]],
            columnNames: ["C1", "C0", "C3"]
            )
        )
);

`test
dataframe_append_4: (
    let df1 = dataframe.DataFrame(lval: [3], rval: [nothing], key: ["bar"])
    let df2 = dataframe.DataFrame(
        lval: [1,1,2,2], rval: [4,6,4,6], key: ["foo", "foo", "foo", "foo"]
        )

    dataframe.assertFramesEqual(
        df1.append(df2),
        dataframe.DataFrame(
            lval: [3,1,1,2,2],
            rval: [nothing,4,6,4,6],
            key: ["bar","foo","foo","foo","foo"]
            )
        )
    );

`test
dataframe_call: (
    let df = dataframe_simple("C0", "C2");
    assertions.assertEqual(df.numRows, 7)
    assertions.assertEqual(df.numColumns, 2)
    assertions.assertEqual(df.columnNames, ["C0", "C2"])
);

`test
dataframe_sort_1: (
    let df = dataframe_simple;
    let sortedDf = df.sort("C2");

    let expectedSortedDf = dataframe.DataFrame(
        [[1.0, 0.0, 3.0, 5.0, 1.0, 2.0, 4.0],
         [0.4, 3.2, 2.1, 1.3, 3.5, 4.4, 0.4],
         [0.1, 1.0, 1.1, 2.0, 2.1, 3.4, 5.2]]
        );

    dataframe.assertFramesEqual(sortedDf, expectedSortedDf)
    );

`test
dataframe_sort_2: (
    let df = dataframe_simple;
    let sortedDf = df.sort("C2", less:fun(x,y) { x > y });

    let expectedSortedDf = dataframe.DataFrame(
        [[4.0, 2.0, 1.0, 5.0, 3.0, 0.0, 1.0],
         [0.4, 4.4, 3.5, 1.3, 2.1, 3.2, 0.4],
         [5.2, 3.4, 2.1, 2.0, 1.1, 1.0, 0.1]]
        )

    dataframe.assertFramesEqual(sortedDf, expectedSortedDf)
);

`test
dataframe_sort_3: (
    let df = dataframe_simple;
    let predicate = fun(row) { row.sum() };
    
    let sortedDf = df.sort(predicate:predicate);

    let expectedSortedDf = dataframe.DataFrame(
        [[1.0,0.0,3.0,1.0,5.0,4.0,2.0],
         [0.4,3.2,2.1,3.5,1.3,0.4,4.4],
         [0.1,1.0,1.1,2.1,2.0,5.2,3.4]]
        )

    dataframe.assertFramesEqual(sortedDf, expectedSortedDf)
    );

`test
dataframe_sort_4: (
    let df = dataframe.DataFrame([[2,1,1], [0,4,3]]);

    let sortedDf = df.sort("C0");
    let expectedSortedDf = dataframe.DataFrame([[1,1,2], [4,3,0]]);

    dataframe.assertFramesEqual(sortedDf, expectedSortedDf)

    sortedDf = df.sort(("C0", "C1"));
    expectedSortedDf = dataframe.DataFrame([[1,1,2], [3,4,0]]);
    
    dataframe.assertFramesEqual(sortedDf, expectedSortedDf)

    sortedDf = df.sort("C0", "C1");

    dataframe.assertFramesEqual(sortedDf, expectedSortedDf)
    );

dataframe_vector_of_tuples: (
    let vectorOfTuples = [
        (a: 1.0, b: 0.4, c: 0.1),
        (a: 5.0, b: 1.3, c: 2.0),
        (a: 3.0, b: 2.1, c: 1.1),
        (a: 4.0, b: 0.4, c: 5.2),
        (a: 2.0, b: 4.4, c: 3.4),
        (a: 0.0, b: 3.2, c: 1.0),
        (a: 1.0, b: 3.5, c: 2.1)
        ];
    dataframe.DataFrame(vectorOfTuples);
);

`test
dataframe_vector_of_tuples_col_access:
    assertions.assertEqual(size(dataframe_vector_of_tuples["a"]), 7);

`test
dataframe_vector_of_tuples_num_rows:
assertions.assertEqual(dataframe_vector_of_tuples.numRows, 7);

`test
dataframe_vector_of_tuples_num_cols: 
assertions.assertEqual(dataframe_vector_of_tuples.numColumns, 3);

`test
dataframe_vector_of_tuples_access:
assertions.assertEqual(dataframe_vector_of_tuples["b"][2], 2.1);

`test
dataframe_vector_of_tuples_names: 
assertions.assertEqual(dataframe_vector_of_tuples.columnNames, ["a", "b", "c"]);


`test
dataframe_vector_of_tuples_filter: (
    let v = [(1,2), (3,4)];
    assertions.assertMatches(v, dataframe.Support.IsVectorOfTuples)
);

`test
dataframe_vector_of_vectors_filter: (
    let v = [[1,2], [3,4]];
    assertions.assertMatches(v, dataframe.Support.IsVectorOfVectorsAndSeries)
);

`test
dataframe_index_1: (
    let i = dataframe_simple.index("C0")

        size(i[4.0]) == 1 
    and size(i[1.0]) == 2 
    and size(i[1000.0]) == 0
);

`test
dataframe_index_2: (
    let i = dataframe_simple.index("C0")
    
    i[1.0]["C1"].dataVec == [.4, 3.5]
);

`test
dataframe_index_3: (
    let i = dataframe_simple.index("C0")
    
        i.rowCountForKey(1000) is 0 
    and i.rowCountForKey(1.0) is 2
);

`test dataframe_index_4: (
    let df = dataframe.DataFrame(
        [[0, 1, 2, 3], [0, 1, 0, 2]], columnNames: ["a", "b"]
        )
    let rowToKeyFun = fun(row) { row.sum() % 2 }
    let indexForRowToKeyFun = df.index(rowToKeyFun)

    assertions.assertTrue(
        indexForRowToKeyFun[0].equals(
            dataframe.DataFrame(
                [[0, 1, 2], [0, 1, 0]], 
                columnNames: df.columnNames
                )
            )
        );
    assertions.assertTrue(
        indexForRowToKeyFun[1].equals(
            dataframe.DataFrame(
                [[3], [2]], 
                columnNames: df.columnNames
                )
            )
        );
    assertions.assertTrue(
        indexForRowToKeyFun[3].equals(
            dataframe.DataFrame([[], []], columnNames: df.columnNames))
        );
    );

`test dataframe_index_5: (
    let df = dataframe.DataFrame(
        [[0, 1, 2, 3], [0, 1, 0, 2]], columnNames: ["a", "b"]
        )
    let indexOnColumnB = df.index("b")

    assertions.assertTrue(
        indexOnColumnB[0].equals(
            dataframe.DataFrame(
                [[0, 2], [0, 0]], columnNames: df.columnNames
                )
            )
        );
    assertions.assertTrue(
        indexOnColumnB[1].equals(
            dataframe.DataFrame(
                [[1], [1]], columnNames: df.columnNames
                )
            )
        );
    assertions.assertTrue(
        indexOnColumnB[2].equals(
            dataframe.DataFrame([[3], [2]], columnNames: df.columnNames)
            )
        );
    assertions.assertTrue(
        indexOnColumnB[42].equals(
            dataframe.DataFrame([[], []], columnNames: df.columnNames)
            )
        )
    );

`test dataframeEquality_1: (
    let df = dataframe.DataFrame([[1,2,3], [4,5,6]]);
    let df2 = dataframe.DataFrame([[1,2,3], [4,5,6]])
    
    dataframe.assertFramesEqual(df, df2);
    
    df2 = dataframe.DataFrame([[1,2,3], [4,5,6]], columnNames: ["C0", "bla"])

    assertions.assertRaises(
        Exception.AssertionError, 
        fun() { 
            dataframe.assertFramesEqual(df, df2)
            }
        );
    dataframe.assertFramesEqual(df, df2, checkNames:false)

    df2 = dataframe.DataFrame([[1,2,3], [4,5,7]])

    assertions.assertRaises(
        Exception.AssertionError, 
        fun() { 
            dataframe.assertFramesEqual(df, df2)
            }
        );

    );

`test dataframeEquality_2: (
    let df  = dataframe.DataFrame([[1, math.inf, math.nan], ["a", "b", "c"]]);
    let df2 = dataframe.DataFrame([[1, math.inf, math.nan], ["a", "b", "c"]]);

    // nan's aren't equal. just a sanity check
    assertions.assertNotEqual(df[-1][0], df2[-1][0])

    dataframe.assertFramesEqual(df, df2)

    dataframe.assertSeriesEqual(df.getColumn(0), df2.getColumn(0))
    dataframe.assertSeriesEqual(df.getColumn(1), df2.getColumn(1))
    );

`test dataframe_reverse: (
    let df = dataframe.DataFrame([[1,2,3], [4,5,6]], columnNames:["a", "b"]);
    dataframe.assertFramesEqual(
        df.reverse(),
        dataframe.DataFrame([[3,2,1], [6,5,4]], columnNames:["a", "b"])
        )
    );                                

`test dataframe_from_matrix: (
    let m = math.Matrix([0,1,2,3,4,5,6,7,8,9], (2,5));
    let df = dataframe.DataFrame(m);

    dataframe.assertFramesEqual(
        df,
        dataframe.DataFrame(
            [[0,1], [2,3], [4,5], [6,7], [8,9]]
            )
        );
    );

__loopcount__: 5000000;

`perf
columnAccessByNameRowAccesByIndex_homogeneousCols: (
    let df = dataframe.DataFrame([[0], [0 ]]); 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + df["C0"][0] + df["C1"][0] 
        }; 
    res
    );

`perf
rowAccesByIndexColumnIndexByName_homogeneousCols: (
    let df = dataframe.DataFrame([[0], [0 ]]); 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + df[0]["C0"] + df[0]["C1"] 
        }; 
    res
    );

`perf
rowAndColumnAccessByIndex_homogeneousCols: (
    let df = dataframe.DataFrame([[0], [0 ]]); 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + df[0][0] + df[0][1] 
        }; 
    res
    );

`perf
columnAccessByNameRowAccesByIndex_heterogeneousCols: (
    let df = dataframe.DataFrame([[0], [0.0]]); 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + df["C0"][0] + df["C1"][0] 
        }; 
    res
    );

`perf
rowAccesByIndexColumnIndexByName_heterogeneousCols: (
    let df = dataframe.DataFrame([[0], [0.0]]); 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + df[0]["C0"] + df[0]["C1"] 
        }; 
    res
    );

`perf
rowAndColumnAccessByIndex_heterogeneousCols: (
    let df = dataframe.DataFrame([[0], [0.0]]); 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + df[0][0] + df[0][1] 
        }; 
    res
    );

`perf
dataframeLikeClass_columnAccesBySymbolRowAccesByIndex_homogeneous: (
    let df = dataframeLikeClass([[0], [0  ]]); 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + df.getColumn("C0")[0] + df.getColumn("C1")[0] 
        }; 
    res
    );

dataframeLikeClass: class {
    member cols;
    
    getColumn: fun
        ("C0") { cols[0] }
        ("C1") { cols[1] }
        ;
    };

`perf
dataframeLikeClass_columnAccesBySymbolRowAccesByIndex_heterogeneous: (
    let df = dataframeLikeClass([[0], [0.0]]); 
    let res = 0; 
    for ix in sequence(__loopcount__) { 
        res = res + df.getColumn("C0")[0] + df.getColumn("C1")[0] 
        }; 
    res
    );

(`perf, `callResult) addColumn_1: (
    let cols = Vector.range(
        100, { Vector.range(100) }
        )

    let df = dataframe.DataFrame(cols);

    let newCol = Vector.range(100); 

    let f = fun() {
        df.addColumn(newCol, name:"asdf").addColumn(newCol, name:"asdf2")
        };

    fun() { 
        let res = 0;
        for ix in sequence(100) {
            res = res + size(f())
            }
        
        res 
        }
    );

(`perf, `callResult) addColumn_2: (
    let nRows = 100
    let cols = Vector.range(
        100, { Vector.range(nRows) }
        )

    let df = dataframe.DataFrame(cols);

    let newCol = Vector.range(nRows); 

    let f = 
        fun() { 
            dataframe.DataFrame(
                columns: df.columns :: newCol :: newCol,
                columnNames: df.columnNames :: "newColumnName" :: "ncn2",
                numRows: df.numRows,
                numColumns: df.numColumns + 2
                )
            }
        ;

    fun() { 
        let res = 0;
        for ix in sequence(100) {
            res = res + size(f())
            }

        res
        }
    );

(`perf, `callResult) addColumn_3: (
    let cols = Vector.range(
        100, { Vector.range(100) }
        )

    let df = dataframe.DataFrame(cols);

    let newCol = Vector.range(100); 

    let f = fun() {
        df.addColumn(newCol, name: "asdf").addColumn(newCol, name: "asdf2")
        };

    fun() { 
        let res = 0;
        for ix in sequence(100) {
            res = res + size(f())
            }
        
        res 
        }
    );

(`perf, `callResult) selectColumnsWithStrings: (
    let cols = Vector.range(
        100, { Vector.range(100) }
        )

    let df = dataframe.DataFrame(cols);

    let f = fun() { 
        df(
            "C0", "C10", "C20", "C30", "C40", 
            "C50", "C60", "C70", "C80", "C90"
            )
        };

    fun() { 
        let res = 0;
        for ix in sequence(100) {
            res = res + size(f())
            }
        
        res 
        }
    );

(`perf, `callResult) selectColumnsWithSymbols: (
    let cols = Vector.range(
        100, { Vector.range(100) }
        )

    let df = dataframe.DataFrame(cols);

    let f = fun() { 
        df(
            `C0, `C10, `C20, `C30, `C40, 
            `C50, `C60, `C70, `C80, `C90
            )
        };

    fun() { 
        let res = 0;
        for ix in sequence(100) {
            res = res + size(f())
            }
        
        res 
        }
    );

(`perf, `callResult) repeatedRowSlices: (
    let df = dataframe.DataFrame(Vector.range(50, { Vector.uniform(100, _) }));

    fun() {
        let tr = nothing; 
        for ix in sequence(50) { 
            tr = tr + size(df(df.columnNames[1, ix])) 
            } 
        tr
        }
    );

`test repeatedRowSlices_test: repeatedRowSlices() is not nothing;

`test dataframeCtors_1: (
    let df = dataframe.DataFrame(a: [1,2,3,4], b: [3,4,2,1])
    dataframe.assertFramesEqual(
        df,
        dataframe.DataFrame(
            [[1,2,3,4], [3,4,2,1]],
            columnNames: ["a", "b"]
            )
        )
    );

`test dataframeCtors_2: (
    let df = dataframe.DataFrame(a: [1,2,3,4], [3,4,2,1])
    dataframe.assertFramesEqual(
        df,
        dataframe.DataFrame(
            [[1,2,3,4], [3,4,2,1]],
            columnNames: ["a", "C1"]
            )
        )
    );

`test dropColumn_1: (
    let df = dataframe.DataFrame(
        a: [1,2,3],
        b: [4,5,6]
        )
    
    dataframe.assertFramesEqual(
        df.dropColumn("a"),
        dataframe.DataFrame(
            b: [4,5,6]
            )
        )
    );

`test dropColumn_2: (
    let df = dataframe.DataFrame(
        a: [1,2,3],
        b: [4,5,6],
        b: [7,8,9]
        )

    dataframe.assertFramesEqual(
        df.dropColumn("b"),
        dataframe.DataFrame(
            a: [1,2,3]
            )
        )

    dataframe.assertFramesEqual(
        df, df.dropColumn("iDontExist")
        )
    );

`test dropColumn_3: (
    let df = dataframe.DataFrame(
        a: [1,2,3],
        b: [4,5,6]
        )
    
    dataframe.assertFramesEqual(
        df.dropColumn(0),
        dataframe.DataFrame(
            b: [4,5,6]
            )
        )

    dataframe.assertFramesEqual(
        df.dropColumn(1),
        dataframe.DataFrame(
            a: [1,2,3]
            )
        )
    );

`test dropColumn_4: (
    let df = dataframe.DataFrame(
        a: [1,2,3],
        b: [4,5,6],
        b: [7,8,9]
        )

    dataframe.assertFramesEqual(
        df.dropColumn(0),
        dataframe.DataFrame(
            b: [4,5,6],
            b: [7,8,9]
            )
        )

    dataframe.assertFramesEqual(
        df.dropColumn(1),
        dataframe.DataFrame(
            a: [1,2,3],
            b: [7,8,9]
            )
        )

    dataframe.assertFramesEqual(
        df.dropColumn(2),
        dataframe.DataFrame(
            a: [1,2,3],
            b: [4,5,6]
            )
        )

    dataframe.assertFramesEqual(
        df.dropColumn(4), df
        )
    );

`test dropColumns: (
    let df = dataframe.DataFrame(
        a: [1], b: [2], c: [3], d: [4]
        );
    dataframe.assertFramesEqual(
        df.dropColumns("a"),
        df.dropColumn("a")
        )
    dataframe.assertFramesEqual(
        df.dropColumns(0),
        df.dropColumns("a")
        )
    dataframe.assertFramesEqual(
        df.dropColumns("a", "c"),
        df.dropColumn("a").dropColumn("c")
        )
    dataframe.assertFramesEqual(
        df.dropColumns("a", 1),
        df.dropColumn("a").dropColumn(0)
        )
    dataframe.assertFramesEqual(
        df.dropColumns("a", "b", "c", "d"),
        dataframe.DataFrame()
        )
    );

`test renameColumn: (
    let df = dataframe.DataFrame(a: [1,2], b: [3,4]);

    dataframe.assertFramesEqual(
        df.renameColumn(0, "c"),
        dataframe.DataFrame(
            c: [1,2], b: [3,4]
            )
        );

    dataframe.assertFramesEqual(
        df.renameColumn("a", "A"),
        dataframe.DataFrame(
            A: [1,2], b: [3,4]
            )
        );

    dataframe.assertFramesEqual(
        df.renameColumn("b", "B"),
        dataframe.DataFrame(
            a: [1,2], B: [3,4]
            )
        );
    
    dataframe.assertFramesEqual(
        dataframe.DataFrame(a: [1,2], a: [3,4]).renameColumn("a", "A"),
        dataframe.DataFrame(
            A: [1,2], A: [3,4]
            )
        );
    );

`test renameColumns: (
    let df = dataframe.DataFrame(a: [], b: [], c: [], b: []);

    dataframe.assertFramesEqual(
        df.renameColumns({'a': 'A', "b": "B"}),
        dataframe.DataFrame(
            A: [], B: [], c: [], B: []
            )
        );

    dataframe.assertFramesEqual(
        df.renameColumns(a: 'A', b: 'B'),
        dataframe.DataFrame(
            A: [], B: [], c: [], B: []
            )
        );
    );

`test rowApplyWithIndex: (
    let df = dataframe.DataFrame(a: [1,6,3,8], b: [5,2,7,4]);
    dataframe.assertSeriesEqual(
        df.rowApplyWithIndex(fun(row, rowIx) { (max(row), rowIx) }),
        dataframe.Series([(5,0), (6,1), (7,2), (8,3)])
        );
    );

`test selectWithIndex: (
    let df = dataframe.DataFrame(a: Vector.range(100));
    dataframe.assertFramesEqual(
        df.selectWithIndex(
            fun(_, ix) { ix % 4 == 0 }
            ),
        dataframe.DataFrame(
            a: Vector.range(25, fun(ix) { ix * 4 })
            )
        );
    dataframe.assertFramesEqual(
        df.filterWithIndex(
            fun(_, ix) { ix % 4 == 0 }
            ),
        dataframe.DataFrame(
            a: Vector.range(25, fun(ix) { ix * 4 })
            )
        );
    );

`test addColumn: (
    let df = dataframe.DataFrame(a: [1,2], b: [3,4]);
    
    dataframe.assertFramesEqual(
        df.addColumn(sum, name: "sum"),
        df.addColumn([4, 6], name: "sum")
        );
    );

`test emptyDataFrame: (
    let df = dataframe.DataFrame();
    assertions.assertEqual(df.columnNames, [])
    dataframe.assertFramesEqual(
        df, dataframe.DataFrame([])
        );
    assertions.assertTrue(df.isEmpty());
    dataframe.assertFramesEqual(
        df.addColumn([1,2,3], name: "newColumn"), 
        dataframe.DataFrame(newColumn: [1,2,3])
        )
    dataframe.assertFramesEqual(
        df.addColumns([[1,2], [3,4]], names: ["a", "b"]),
        dataframe.DataFrame(a: [1,2], b: [3,4])
        )
    );

`test withNames: (
    let df = dataframe.DataFrame(a: [1,2], b: [3,4]);
    df = df.withColumnNames(["A", "B"])
    dataframe.assertFramesEqual(
        df, dataframe.DataFrame(A: [1,2], B: [3,4])
        )

    assertions.assertThrows(
        fun() { df.withColumnNames(["A", "B", "C"]) }
        )

    assertions.assertThrows(
        fun() { df.withColumnNames(["A"]) }
        )
    );

