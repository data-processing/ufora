/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
#include "../../core/cppml/CPPMLEquality.hppml"
#include "../../core/cppml/CPPMLThreadSafety.hppml"
#include "../../core/cppml/MemoizeByTagAndHash.hppml"
#include "../../core/math/Nullable.hpp"
#include "../../core/math/Hash.hpp"
#include "../../core/containers/ImmutableTreeVector.hppml"

#include <string>

class NativeType;

macro_memoizeCppmlClassByTagAndHash(NativeType);

@type
	NativeType =
		Nothing of ()
	-|	Integer of uint32_t bits, bool isSigned
	-|	Float of uint32_t bits
	-|	Pointer of NativeType element
	-|	Composite of
			ImmutableTreeVector<NativeType> elements,
			ImmutableTreeVector<Nullable<std::string> > fieldNames
	-|	Array of NativeType element, uint32_t size
	-|	Continuations of ImmutableTreeVector<NativeType> inputTypes
	with
		uword_t		packedSize	= (this->computePackedSize()),
		uword_t     alignedSize = (this->computeAlignedSize()),
		uword_t     alignment   = (this->computeAlignment()),
		bool 		isEmpty		= (this->computeIsEmpty()),
		hash_type	hash		= (hashCPPMLDirect(*this))
	{
	public:
		NativeType ptr() const;

		NativeType deref() const;

		uword_t compositeSlotOffset(long index);

		uword_t computePackedSize() const;

		uword_t computeAlignedSize() const;

		uword_t computeAlignment() const;

		static NativeType Composite(void);

		static NativeType Composite(const ImmutableTreeVector<NativeType>& inElements);

		static NativeType Composite(const NativeType& inSingleElementType);

		static NativeType Composite(const std::string& inName, const NativeType& inSingleElementType);

		//add two Composites together
		NativeType operator+(const NativeType& inOtherComposite) const;

		static NativeType Integer(uint32_t bits);

		static NativeType int8();
		static NativeType uint8();
		static NativeType int16();
		static NativeType uint16();
		static NativeType int32();
		static NativeType uint32();
		static NativeType int64();
		static NativeType uint64();
		static NativeType uint1();
		static NativeType uword();	//Same size as a pointer. Equiv to uword_t.
		static NativeType sword();	//Same size as a pointer. Equiv to sword_t.

		bool computeIsEmpty() const;

		void toString(CPPMLPrettyPrintStream  st) const;
	};

uword_t alignedOffset(const NativeType& nt, uword_t unalignedOffset);

bool isRuntimeCallbackType(const NativeType& t);

NativeType cppmlAlternative();

macro_defineCppmlComparisonOperators(NativeType);
macro_defineMemberHashFunction(NativeType);

template<>
class CPPMLEquality<NativeType, void> {
public:
	static char cmp(const NativeType& lhs, const NativeType& rhs)
		{
		return lhs.hash().cmp(rhs.hash());
		}
};



template<>
class CPPMLPrettyPrint<NativeType> {
public:
	static void prettyPrint(CPPMLPrettyPrintStream& s, const NativeType& t)
		{
		t.toString(s);
		}
};

