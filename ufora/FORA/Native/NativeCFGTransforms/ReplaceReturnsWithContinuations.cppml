/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ReplaceReturnsWithContinuations.hppml"
#include "../NativeCode.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"

namespace NativeCFGTransforms {


//transforms an expression 'e', given continuations 1..n by replacing
//return[n](expr) with 'continuations[n](expr)'
@type ReplaceReturnsWithContinuations =
			ImmutableTreeVector<NativeContinuation> continuations {
public:
		template<class T>
		Nullable<T> processDown(const T& t, bool& ioContinue) const
			{
			return null();
			}

		template<class T>
		Nullable<T> processUp(const T& t) const
			{
			return null();
			}

		Nullable<NativeType> processDown(const NativeType& t, bool& b) const
			{
			b = false;
			return null();
			}

		Nullable<NativeExpression> processDown(
								const NativeExpression& t,
								bool& ioContinue
								) const
			{
			@match NativeExpression(t)
				-|	Return(exitIndex, expr) ->> {
					//we may directly turn this into a 'let' because
					//we are guaranteed that all variable bindings are unique.
					//as a result, the continuation variable won't conflict with
					//anything in the inner expression.  if there are nested
					//return expressions, this will be OK because the variable
					//binding will overlap but get picked up later by the
					//renamer.

					//we don't want to continue past this point
					ioContinue = false;
					lassert_dump(exitIndex < continuations().size(),
							"trying to return to #" << exitIndex
							<< " but there are only " << continuations().size()
							<< " continuations")
					return null() <<
						NativeExpression::Let(
							continuations()[exitIndex].var(),
							transform(expr, *this),
							continuations()[exitIndex].expression()
							);
					}
				-|	_ ->> {
					return null();
					}
				;
			}

		//don't look outside of this CFG
		Nullable<NativeCFG> processDown(
								const NativeCFG& t,
								bool& ioContinue
								) const
			{
			ioContinue = false;
			return null();
			}
};


NativeExpression replaceReturnsWithContinuations(
						const NativeExpression& inExpr,
						const ImmutableTreeVector<NativeContinuation>& inCont
						)
	{
	return transform(inExpr, ReplaceReturnsWithContinuations(inCont));
	}

}

