/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "BlockVariableFlow.hppml"
#include "InsertVectorReadStashes.hppml"
#include "VectorVariableFlow.hppml"
#include "Transforms.hppml"
#include "../NativeCode.hppml"
#include "../NativeTypeFor.hpp"
#include "../../Axioms/Vector.GetItem.hppml"
#include "../../Interpreter/RuntimeConfig.hppml"
#include "../../TypedFora/ABI/HomogenousDoubleVectorStashCodegen.hppml"
#include "../../TypedFora/ABI/HomogenousVectorStashCodegen.hppml"
#include "../../TypedFora/ABI/VectorRecordCodegen.hppml"
#include "../../TypedFora/TypedFora.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"
#include "../../../core/cppml/CPPMLVisit.hppml"
#include "../../../core/Logging.hpp"

using namespace TypedFora::Abi;

extern "C" {

Fora::ReturnValue<PooledString, PooledString, TypedFora::Abi::VectorLoadRequest> FORA_clib_vectorDataToString(
				const TypedFora::Abi::VectorRecord& vec
				);

Fora::ReturnValue<PooledString, PooledString, VectorLoadRequest> FORA_clib_vectorDataToStringSliced(
				const VectorRecord& vec,
				int64_t low,
				int64_t high,
				int64_t offsetStart,
				int64_t offsetStop,
				int64_t stride,
				uint8_t* pointer
				);

}

namespace NativeCFGTransforms {

//find the continuation metadatas in the vector cache-miss code
@type DiscoverContinuationMetadata = ImmutableTreeVector<ImmutableTreeVector<NativeContinuationMetadata> > metadatas {
public:
	template<class T>
	void processDown(const T& t, bool& outContinue) { }

	template<class T>
	void processUp(const T& t) { }

	void processDown(const NativeType& c, bool& outContinue)
		{
		outContinue = false;
		}

	void processDown(const NativeExpression& c, bool& outContinue)
		{
		@match NativeExpression(c)
			-| Tagged(e, OnHomogenousVectorLookupBoundsCheckFailure()) ->> {
				outContinue = false;
				}
			-| _ ->> {}
		}

	void processDown(const ImmutableTreeVector<NativeContinuationMetadata>& r, bool& outContinue)
		{
		outContinue = false;

		if (r.size())
			metadatas() = metadatas() + r;
		}

	template<class T>
	static ImmutableTreeVector<ImmutableTreeVector<NativeContinuationMetadata> >
				getMetadatas(const T& in)
		{
		DiscoverContinuationMetadata items;

		::visit(in, items);

		return items.metadatas();
		}
};


@type DiscoverBoundsCheckFailures = ImmutableTreeVector<NativeExpression> boundsCheckFailures {
public:
	template<class T>
	void processDown(const T& t, bool& outContinue) { }

	template<class T>
	void processUp(const T& t) { }

	void processDown(const NativeType& c, bool& outContinue)
		{
		outContinue = false;
		}

	void processDown(const NativeExpression& r, bool& outContinue)
		{
		@match NativeExpression(r)
			-| Tagged(e, OnHomogenousVectorLookupBoundsCheckFailure()) ->> {
				boundsCheckFailures() = boundsCheckFailures() + r;
				}
			-| _ ->> {}
			;
		}

	template<class T>
	static NativeExpression getBoundsCheckFailureExpression(const T& in)
		{
		DiscoverBoundsCheckFailures items;

		::visit(in, items);

		lassert(items.boundsCheckFailures().size() == 1);

		return items.boundsCheckFailures()[0];
		}
};

class ReplaceCallbacksVar {
public:
	template<class T>
	Nullable<T> processDown(const T& t, bool& outContinue) const
		{
		return null();
		}

	Nullable<NativeType> processDown(const NativeType& t, bool& outContinue) const
		{
		outContinue = false;
		return null();
		}

	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}

	Nullable<NativeVariable> processDown(const NativeVariable& v, bool& outContinue) const
		{
		if (v.type() == NativeTypeFor<NativeRuntimeCallbacks>::get().ptr())
			return null() << NativeVariable("callbacks", NativeTypeFor<NativeRuntimeCallbacks>::get().ptr());
		return null();
		}
};


class VectorStashUpdater {
public:
	VectorStashUpdater(
				VectorVariableFlow& inFlow,
				map<NativeBlockID, std::vector<VectorArgument> >& argsToAugment
				) :
			mFlow(inFlow),
			mArgsToAugment(argsToAugment),
			mJumpsVisited(0)
		{
		}

	Nullable<pair<NativeBlockID, NativeBlock> > processDown(
							const pair<NativeBlockID, NativeBlock>& t,
							bool& outContinue
							) const
		{
		outContinue = false;

		mCurBlock = t.first;
		mJumpsVisited = 0;

		auto result = transformNullable(t.second, *this);

		mCurBlock = null();

		if (!result)
			return null();

		result = ::transform(result, ReplaceCallbacksVar());

		return null() << make_pair(t.first, *result);
		}

	Nullable<NativeCFG> processDown(const NativeCFG& t, bool& outContinue) const
		{
		if (mCurBlock)
			//only process the outermost nativeCFG. If we have a block, we're in
			//a CFG already
			outContinue = false;
		return null();
		}

	Nullable<NativeContinuation> processDown(const NativeContinuation& t, bool& outContinue) const
		{
		return null();
		}

	Nullable<NativeBlock> processDown(const NativeBlock& t, bool& outContinue) const
		{
		auto it = mArgsToAugment.find(*mCurBlock);
		if (it == mArgsToAugment.end())
			return null();

		outContinue = false;

		//if we're already in a NativeBlock, this would be populated, and that shouldn't
		//happen
		lassert(mCurrentSingleStashes.size() == 0);
		lassert(mCurrentDoubleStashes.size() == 0);

		ImmutableTreeVector<NativeVariable> variables = t.args();

		for (auto vecArg: it->second)
			{
			NativeVariable newStashVar =
				NativeVariable::Temp(
					NativeTypeFor<TypedFora::Abi::HomogenousVectorStash>::get()
					);

			variables = variables + newStashVar;
			mCurrentSingleStashes[vecArg] = newStashVar;

			NativeVariable newStashVar2 =
				NativeVariable::Temp(
					NativeTypeFor<TypedFora::Abi::HomogenousDoubleVectorStash>::get()
					);

			variables = variables + newStashVar2;
			mCurrentDoubleStashes[vecArg] = newStashVar2;
			}

		NativeExpression newExpression = transform(t.expression(), *this);

		mCurrentSingleStashes.clear();
		mCurrentDoubleStashes.clear();

		return null() << NativeBlock(variables, newExpression, t.relativeFrequency());
		}

	@type ReplaceNativeExpression = boost::function1<Nullable<NativeExpression>, NativeExpression> func {
	public:
		template<class T>
		Nullable<T> processUp(const T& t) const
			{
			return null();
			}

		template<class T>
		Nullable<T> processDown(const T& t, bool& outContinue) const
			{
			return null();
			}

		Nullable<NativeExpression> processDown(const NativeExpression& t, bool& outContinue) const
			{
			auto res = func()(t);
			if (res)
				outContinue = false;
			return res;
			}
	};
	Nullable<ImmutableTreeVector<NativeExpression> > transformExpansionArgs(ImmutableTreeVector<NativeExpression> args) const
		{
		bool didAnything = false;
		ImmutableTreeVector<NativeExpression> transformed;

		//check each arg - if it's an argument and the next arg is a vector stash, we should attempt to line them up
		for (long k = 0; k < args.size(); k++)
			{
			Nullable<VectorArgument> vectorRead = mFlow.valueForExpression(args[k]).getSingleVectorArg();

			if (k + 1 < args.size() && vectorRead && args[k + 1].isZero()
					&& *args[k + 1].type() == NativeTypeFor<TypedFora::Abi::HomogenousVectorStash>::get() &&
					mCurrentSingleStashes.find(*vectorRead) != mCurrentSingleStashes.end())
				{
				auto stashVar = mCurrentSingleStashes.find(*vectorRead)->second;

				transformed = transformed + args[k] + stashVar.expr();
				k++;
				didAnything = true;
				}
			else
				transformed = transformed + args[k];
			}

		if (!didAnything)
			return null();

		lassert(args.size() == transformed.size());

		return null() << transformed;
		}

	Nullable<NativeExpression> processDown(const NativeExpression& t, bool& outContinue) const
		{
		@match NativeExpression(t)
			-| Call(Expansion(expansion), handlers, args, meta) ->> {
				auto newArgs = transformExpansionArgs(args);
				if (newArgs)
					{
					outContinue = false;
					return null() << NativeExpression::Call(
						NativeCallTarget::Expansion(expansion),
						::transform(handlers, *this),
						*newArgs,
						::transform(meta, *this)
						);
					}

				return null();
				}
			-| Jump(target, expressions) ->> {
				long jumpIndex = mJumpsVisited;
				mJumpsVisited++;

				auto it = mArgsToAugment.find(target);
				if (it == mArgsToAugment.end())
					return null();

				ImmutableTreeVector<NativeExpression> newExpressions = expressions;

				//depending on which jump are we in, we will be mapping our vectors to
				//target vectors very differently, and we need to ensure that the stashes
				//get passed along appropriately
				VectorJumpMapping jumpMap;
				if (mFlow.jumpMappings().contains(make_pair(*mCurBlock, jumpIndex)))
					jumpMap = *mFlow.jumpMappings()[make_pair(*mCurBlock, jumpIndex)];

				for (VectorArgument var: it->second)
					{
					//for single stash
						{
						Nullable<NativeVariable> stashVar;

						if (jumpMap.vectorArgumentMapping().contains(var))
							{
							VectorArgument mappedVar = *jumpMap.vectorArgumentMapping()[var];

							auto it2 = mCurrentSingleStashes.find(mappedVar);
							if (it2 != mCurrentSingleStashes.end())
								stashVar = it2->second;
							}

						if (stashVar)
							newExpressions = newExpressions + stashVar->expr();
						else
							newExpressions = newExpressions +
								NativeExpression::Zero(NativeTypeFor<TypedFora::Abi::HomogenousVectorStash>::get());
						}

					//for double stash
						{
						Nullable<NativeVariable> stashVar;

						if (jumpMap.vectorArgumentMapping().contains(var))
							{
							VectorArgument mappedVar = *jumpMap.vectorArgumentMapping()[var];

							auto it2 = mCurrentDoubleStashes.find(mappedVar);
							if (it2 != mCurrentDoubleStashes.end())
								stashVar = it2->second;
							}

						if (stashVar)
							newExpressions = newExpressions + stashVar->expr();
						else
							newExpressions = newExpressions +
								NativeExpression::Zero(NativeTypeFor<TypedFora::Abi::HomogenousDoubleVectorStash>::get());
						}
					}

				return null() << NativeExpression::Jump(target, newExpressions);
				}
			-| Let(pointerVar,
						Load(Tagged(taggedExpr, HomogenousVectorLookup(vecExpr, indexExpr, nativeType))),
						within
						) ->> {

				Nullable<VectorArgument> vectorRead = mFlow.valueForExpression(vecExpr).getSingleVectorArg();

				if (!vectorRead)
					return null();

				@match NativeExpression(within)
					-| Let(pointerVar2, Load(Tagged(taggedExpr2, HomogenousVectorLookup(vecExpr2, indexExpr2, nativeType2))), within2) ->> {
						ImmutableTreeVector<uword_t> lookups;
						bool isLookup = false;

						@match NativeExpression(vecExpr2)
							-| Variable(maybePointerVar) ->> {
								if (maybePointerVar == pointerVar)
									isLookup = true;
								}
							-| ValueExtract(sequence, Variable(maybePointerVar)) ->> {
								lookups = sequence;

								if (maybePointerVar == pointerVar)
									isLookup = true;
								}
							-| _ ->> {
								}

						if (Runtime::getRuntime().getConfig().enableDoubleVectorStashing() &&
								isLookup && !within2.freeVariables().contains(pointerVar) && mCurrentDoubleStashes.find(*vectorRead) != mCurrentDoubleStashes.end())
							{
							outContinue = false;
							return null() << createDoubleVectorStashLookupExpr(
								pointerVar,
								pointerVar2,
								*vectorRead,
								vecExpr,
								taggedExpr,
								taggedExpr2,
								indexExpr,
								indexExpr2,
								within2,
								nativeType,
								lookups,
								nativeType2
								);
							}
						}
					-| _ ->> {}
					;

				if (mCurrentSingleStashes.find(*vectorRead) != mCurrentSingleStashes.end())
					{
					outContinue = false;
					return null() << createSingleVectorStashLookupExpr(pointerVar, *vectorRead, vecExpr, taggedExpr, indexExpr, within, nativeType);
					}
				}
			-| _ ->> {}

		return null();
		}

	NativeExpression createDoubleVectorStashLookupExpr(
								NativeVariable pointerVar,
								NativeVariable pointerVar2,
								VectorArgument vectorRead,
								NativeExpression vecExpr,
								NativeExpression taggedExpr,
								NativeExpression taggedExpr2,
								NativeExpression indexExpr,
								NativeExpression indexExpr2,
								NativeExpression within2,
								NativeType nativeType,
								ImmutableTreeVector<uword_t> tupleGetItemSeq,
								NativeType nativeType2
								) const
		{
		NativeExpression onFailure1 = DiscoverBoundsCheckFailures::getBoundsCheckFailureExpression(taggedExpr);
		NativeExpression onFailure2 =
			NativeExpression::Let(pointerVar, NativeExpression::Load(taggedExpr, false),
				DiscoverBoundsCheckFailures::getBoundsCheckFailureExpression(taggedExpr2)
				);

		NativeVariable currentStashVar = mCurrentDoubleStashes[vectorRead];

		NativeExpression updatedExpr =
			homogenousDoubleGetItemExpressionAndStashUpdate(
				currentStashVar.expr(),
				vecExpr,
				indexExpr,
				indexExpr2,
				nativeType,
				tupleGetItemSeq,
				nativeType2,
				onFailure1,
				onFailure2
				);

		NativeVariable updatedPointerAndStash = NativeVariable::Temp(*updatedExpr.type());

		NativeVariable updatedStashVar = NativeVariable::Temp(
			NativeTypeFor<TypedFora::Abi::HomogenousDoubleVectorStash>::get()
			);

		//extract any metadata that's already been pushed down onto any vector load continuations we might
		//have floating around in here
		auto metadatas1 = DiscoverContinuationMetadata::getMetadatas(taggedExpr);
		auto metadatas2 = DiscoverContinuationMetadata::getMetadatas(taggedExpr2);

		lassert_dump(metadatas1.size() == 1, metadatas1.size() << " != 1\n" << prettyPrintString(metadatas1)
			<< "Expr = " << prettyPrintString(taggedExpr)
			);
		//lassert_dump(metadatas2.size() == 1, metadatas2.size() << " != 1\n" << prettyPrintString(metadatas2)
		//	<< "Expr = " << prettyPrintString(taggedExpr2)
		//	);

		//updatedExpr = pushMetadataOntoCallExpressions(updatedExpr, metadatas2[0]);
		updatedExpr = pushMetadataOntoCallExpressions(updatedExpr, metadatas1[0]);

		mCurrentDoubleStashes[vectorRead] = updatedStashVar;

		updatedExpr = NativeExpression::Let(
			updatedPointerAndStash,
			updatedExpr,
			NativeExpression::Let(
				updatedStashVar,
				updatedPointerAndStash.expr()[1],
				NativeExpression::Let(
					pointerVar2,
					updatedPointerAndStash.expr()[0].load(),
					::transform(within2, *this)
					)
				)
			);

		mCurrentDoubleStashes[vectorRead] = currentStashVar;

		return updatedExpr;
		}


	NativeExpression createSingleVectorStashLookupExpr(
								NativeVariable pointerVar,
								VectorArgument vectorRead,
								NativeExpression vecExpr,
								NativeExpression taggedExpr,
								NativeExpression indexExpr,
								NativeExpression within,
								NativeType nativeType
								) const
		{
		NativeExpression onFailure = DiscoverBoundsCheckFailures::getBoundsCheckFailureExpression(taggedExpr);

		NativeVariable currentStashVar = mCurrentSingleStashes[vectorRead];

		NativeExpression updatedExpr =
			homogenousGetItemExpressionAndStashUpdate(
				mCurrentSingleStashes[vectorRead].expr(),
				vecExpr,
				indexExpr,
				nativeType,
				onFailure
				);

		NativeVariable updatedPointerAndStash = NativeVariable::Temp(*updatedExpr.type());

		NativeVariable updatedStashVar = NativeVariable::Temp(
			NativeTypeFor<TypedFora::Abi::HomogenousVectorStash>::get()
			);

		//extract any metadata that's already been pushed down onto any vector load continuations we might
		//have floating around in here
		auto metadatas = DiscoverContinuationMetadata::getMetadatas(taggedExpr);

		lassert_dump(metadatas.size() == 1, metadatas.size() << " != 1\n" << prettyPrintString(metadatas)
			<< "Expr = " << prettyPrintString(taggedExpr)
			);

		updatedExpr = pushMetadataOntoCallExpressions(updatedExpr, metadatas[0]);

		mCurrentSingleStashes[vectorRead] = updatedStashVar;

		updatedExpr = NativeExpression::Let(
			updatedPointerAndStash,
			updatedExpr,
			NativeExpression::Let(
				updatedStashVar,
				updatedPointerAndStash.expr()[1],
				NativeExpression::Let(
					pointerVar,
					updatedPointerAndStash.expr()[0].load(),
					::transform(within, *this)
					)
				)
			);

		mCurrentSingleStashes[vectorRead] = currentStashVar;

		return updatedExpr;
		}

	template<class T>
	Nullable<T> processDown(const T& t, bool& outContinue) const
		{
		return null();
		}

	Nullable<NativeType> processDown(const NativeType& t, bool& outContinue) const
		{
		outContinue = false;
		return null();
		}

	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}

private:
	VectorVariableFlow& mFlow;

	map<NativeBlockID, std::vector<VectorArgument> >& mArgsToAugment;

	mutable Nullable<NativeBlockID> mCurBlock;

	mutable map<VectorArgument, NativeVariable> mCurrentSingleStashes;

	mutable map<VectorArgument, NativeVariable> mCurrentDoubleStashes;

	mutable long mJumpsVisited;
};

class InsertVectorReadStashes {
public:
	InsertVectorReadStashes()
		{
		}


	template<class T>
	Nullable<T> processDown(const T& t, bool& outContinue) const { return null(); }

	Nullable<NativeType> processDown(const NativeType& t, bool& outContinue) const
		{
		outContinue = false;
		return null();
		}

	template<class T>
	Nullable<T> processUp(const T& t) const { return null(); }

	Nullable<NativeCFG> processDown(const NativeCFG& cfg, bool& outContinue) const
		{
		outContinue = false;

		VectorVariableFlow flow(cfg);

		ImmutableTreeSet<VectorArgument> argumentsToAugment =
			flow.calculateVectorArgsReadFromAndDownstream();

		if (!argumentsToAugment.size())
			return null();

		//figure out which slots we're going to be passing information around for
		map<NativeBlockID, std::vector<VectorArgument> > extraSlotsAllocated;

		for (auto arg: argumentsToAugment)
			{
			NativeBlockID block = arg.block();
			extraSlotsAllocated[block].push_back(arg);
			}

		VectorStashUpdater updater(flow, extraSlotsAllocated);

		auto result = ::transform(cfg, updater);

		LOG_DEBUG << "flow is " << flow << " to produce " << result;

		return null() << result;
		}

};

NativeCFG insertVectorReadStashes(const NativeCFG& in)
	{
	return transform(in, InsertVectorReadStashes());
	}

}
