/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "BlockVariableFlow.hppml"
#include "CollapseInlineInvariants.hppml"
#include "Transforms.hppml"
#include "../NativeCode.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"

#include "../../../core/Logging.hpp"
#include "../../../core/math/GraphUtil.hpp"


namespace NativeCFGTransforms {

class	CollapseInlineInvariants {
public:
		CollapseInlineInvariants()
			{
			}


		template<class T>
		Nullable<T> processDown(const T& t, bool& b) const { return null(); }

		Nullable<NativeType> processDown(const NativeType& t, bool& b) const
			{
			b = false;
			return null();
			}

		template<class T>
		Nullable<T> processUp(const T& t) const { return null(); }

		Nullable<NativeExpression> processDown(const NativeExpression& t,
												bool& b) const
			{
			@match NativeExpression(t)
				-| Call(Inline(cfg, entryBlockID), retConts, args, metas) ->> {

					//get the invariant variable groups
					vector<set<block_slot_type> > components;

					set<NativeBlockID> blocks;
					for (long k = 0; k < cfg.size();k++)
						blocks.insert(cfg.name(k));

					extractInvariantVariableGroups(cfg, blocks, components);

					map<NativeVariable, NativeVariable> renames;

					//let bindings for any arguments that need to be bound
					//to variables to be used within the loop.  we keep track
					//of them by argument index so that we can produce them
					//in the right order
					map<uint32_t, pair<NativeVariable, NativeExpression> > lets;

					//make a list of the slots we'll actually remove
					set<block_slot_type> slotsToRemove;

					//check, for each component, whether it contains
					//a variable passing through the root
					for (long k = 0; k < components.size(); k++)
						{
						for (set<block_slot_type>::iterator
									it = components[k].begin(),
									it_end = components[k].end();
								it != it_end; ++it)
							{
							if (it->first == entryBlockID)
								{
								uint32_t argIndex = it->second;

								//allocate an expression that we'll be
								//replacing this component with
								NativeVariable toBindTo;

								//check whether the argument is a variable
								//or just a variable from above, in which case
								//we can just propagate it
								if (args[argIndex].isVariable())
									{
									toBindTo = args[argIndex].getVariable().var();
									}
									else
									{
									//not just a constant. place it in a 'let'
									lets[argIndex].first =
										NativeVariable::Temp(
											cfg[entryBlockID].args()[argIndex]
												.type()
											);

									lets[argIndex].second = args[argIndex];

									//and bind to the 'let' variable
									toBindTo = lets[argIndex].first;
									}

								//for everything in the component, map to the
								//bind expression. just re-use the iterator from
								//above since we're going to exit the loop
								//immediately
								for (it = components[k].begin();
											it != components[k].end(); ++it)
									renames[cfg[it->first].args()[it->second]]
										= toBindTo;

								slotsToRemove.insert(components[k].begin(),
													components[k].end()
													);

								break;
								}
							}
						}

					if (!slotsToRemove.size())
						return null();

					//now apply each rename, and remove each block slot
					ImmutableTreeMap<NativeBlockID, NativeBlock> newBlocks =
								cfg.blocks();

					newBlocks = renameVariables(newBlocks, renames);
					newBlocks = removeBlockSlots(slotsToRemove, newBlocks);

					//keep the arguments we need
					ImmutableTreeVector<NativeExpression> newArgs;

					for (long k = 0; k < args.size();k++)
						if (slotsToRemove.find(
								block_slot_type(entryBlockID, k)
								) == slotsToRemove.end())
							newArgs = newArgs + args[k];

					NativeExpression callExpr =
						NativeExpression::Call(
								NativeCallTarget::Inline(
									NativeCFG(cfg.returnTypes(),
											  newBlocks,
											  cfg.name()
											  ),
									entryBlockID
									),
								retConts,
								newArgs,
								metas
								);

					map<uint32_t,
						pair<NativeVariable, NativeExpression>
						>::reverse_iterator						let_iter;

					for (let_iter = lets.rbegin();
							let_iter != lets.rend();
							++let_iter)
						{
						callExpr =
							NativeExpression::Let(
								let_iter->second.first,
								let_iter->second.second,
								callExpr
								);
						}

					return null() << callExpr;
					}
				-|	_ ->> {;}
				;

			return null();
			}

};

NativeCFG collapseInlineInvariants(const NativeCFG& in)
	{
	return transform(in, CollapseInlineInvariants());
	}

}
