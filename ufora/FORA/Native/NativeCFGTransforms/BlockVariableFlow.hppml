/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once
#include "../NativeCode.hppml"

namespace NativeCFGTransforms {

typedef pair<NativeBlockID, uint32_t>	block_slot_type;

/*********
given a CFG and a set of blocks. produce sets of block_slots that are
guaranteed to always have the same value over the life of the call
invocation. We only return components that have exactly one entry for every block.
**********/

void	extractInvariantVariableGroups(
			const NativeCFG& inCFG,
			const set<NativeBlockID>& blocks,
			vector<set<block_slot_type> >& outComponents,
			bool includeInvariantsNotInLoops = true
			);

/***
Removes the arguments from the CFG indicated by the block slots.  Updates
every jump point within the CFG to not pass values to those slots.

This function also asserts that the expressions are free of the given variables,
so that everything will be well-formed.
****/
ImmutableTreeMap<NativeBlockID, NativeBlock> removeBlockSlots(
			const set<block_slot_type>& toRemove,
			const ImmutableTreeMap<NativeBlockID, NativeBlock>& blocks
			);

}
