/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../NativeCode.hppml"


namespace NativeCFGTransforms {

//push code tagged with Refcount down as far as it possibly can
//go, and eliminate extra refcounts if possible.

NativeCFG	eliminateOverlappingRefcounts(const NativeCFG& in);
NativeExpression	eliminateOverlappingRefcounts(const NativeExpression& in);


//TODO CLEANUP brax: NativeExpression has < operators overloaded so we can't compare them
//
//this is pretty bad form - we should have accessor functions that do this
//instead and leave comparison to the 'valuelike' part of NativeExpression
typedef ImmutableTreeMap<hash_type,
			pair<NativeExpressionTag_RefcountType, ImmutableTreeVector<NativeExpression> > >
					refcount_map;

//given a map from the values being refcounted to the code that refcount them,
//produce an expression in which the refcounts are being evaluated as late as
//possible, and return any refcounts that haven't been consumed yet (e.g.
//that commute through the expression). Finally, pick up any additional refcounts
//contained within and return them.
pair<Nullable<NativeExpression>, refcount_map> pushRefcountThrough(
			const refcount_map& inRefcounts,
			const NativeExpression& toModify
			);

//return 'expr' with the given refcounts dumped around it
NativeExpression dumpRefcounts(const refcount_map& inRefcounts,
							const NativeExpression& expr
							);
}
