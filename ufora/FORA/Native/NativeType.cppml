/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NativeType.hppml"
#include "NativeTypeFor.hpp"
#include "../TypedFora/ABI/ImplValNativeCodeModel.hppml"
#include "../TypedFora/ABI/VectorRecord.hpp"
#include "../Vector/MutableVectorRecord.hppml"
#include "NativeRuntimeCallbacks.hppml"


uword_t NativeType::compositeSlotOffset(long index)
	{
	lassert(isComposite());

	uword_t result = 0;

	for (long k = 0; k < index; k++)
		result = result + getComposite().elements()[k].packedSize();

	return result;
	}

uword_t NativeType::computePackedSize(void) const
	{
	@match NativeType(*this)
		-|	Nothing() ->> {
			return  0;
			}
		-|	Integer(bits, isSigned) ->> {
			return  ((bits + 7) / 8);
			}
		-|	Float(bits) ->> {
			return  ((bits + 7)/8);
			}
		-|	Pointer(element) ->> {
			return  sizeof(void*);
			}
		-|	Composite(elements) ->> {
			uword_t tr = 0;
			for (long k = 0; k < elements.size();k++)
				tr = tr + elements[k].packedSize();
			return tr;
			}
		-|	Array(element, sz) ->> {
			return  sz * element.packedSize();
			}
		-|	Continuations(t) ->> {
			return  sizeof(void*) * 3 + (sizeof(uword_t) + sizeof(void*)) * t.size();
			}
		;
	}

uword_t NativeType::computeAlignment(void) const
	{
	@match NativeType(*this)
		-|	Nothing() ->> {
			return  0;
			}
		-|	Integer(bits, isSigned) ->> {
			return  ((bits + 7) / 8);
			}
		-|	Float(bits) ->> {
			return  ((bits + 7)/8);
			}
		-|	Pointer(element) ->> {
			return  sizeof(void*);
			}
		-|	Composite(elements) ->> {
			uword_t tr = 0;
			for (long k = 0; k < elements.size();k++)
				tr = std::max(tr, elements[k].alignment());
			return tr;
			}
		-|	Array(element, sz) ->> {
			return  element.alignment();
			}
		-|	Continuations(t) ->> {
			return  sizeof(void*) * 3 + (sizeof(uword_t) + sizeof(void*)) * t.size();
			}
		;
	}

uword_t NativeType::computeAlignedSize(void) const
	{
	@match NativeType(*this)
		-|	Nothing() ->> {
			return  0;
			}
		-|	Integer(bits, isSigned) ->> {
			return  ((bits + 7) / 8);
			}
		-|	Float(bits) ->> {
			return  ((bits + 7)/8);
			}
		-|	Pointer(element) ->> {
			return  sizeof(void*);
			}
		-|	Composite(elements) ->> {
			uword_t tr = 0;
			for (long k = 0; k < elements.size();k++)
				tr = alignedOffset(elements[k], tr) + elements[k].alignedSize();
			return alignedOffset(*this, tr);
			}
		-|	Array(element, sz) ->> {
			return  sz * element.alignedSize();
			}
		-|	Continuations(t) ->> {
			return  sizeof(void*) * 3 + (sizeof(uword_t) + sizeof(void*)) * t.size();
			}
		;
	}

NativeType NativeType::Composite(void)
	{
	return Composite(emptyTreeVec(), emptyTreeVec());
	}

NativeType NativeType::Composite(const ImmutableTreeVector<NativeType>& inElements)
	{
	return Composite(
		inElements,
		(emptyTreeVec() + Nullable<std::string>()) * inElements.size()
		);
	}

NativeType NativeType::Composite(const NativeType& inSingleElementType)
	{
	return NativeType::Composite(
		emptyTreeVec() + inSingleElementType,
		emptyTreeVec() + Nullable<std::string>()
		);
	}

NativeType NativeType::Composite(const std::string& inName, const NativeType& inSingleElementType)
	{
	return NativeType::Composite(
		emptyTreeVec() + inSingleElementType,
		emptyTreeVec() + (null() << inName)
		);
	}

//add two Composites together
NativeType NativeType::operator+(const NativeType& inOtherComposite) const
	{
	lassert(isComposite());
	lassert(inOtherComposite.isComposite());

	return Composite(
		getComposite().elements() + inOtherComposite.getComposite().elements(),
		getComposite().fieldNames() + inOtherComposite.getComposite().fieldNames()
		);
	}

NativeType NativeType::ptr() const
	{
	return NativeType::Pointer(*this);
	}

NativeType NativeType::deref() const
	{
	@match NativeType(*this)
		-|	Pointer(e) ->> {
			return e;
			}
		-|	_ ->> {
			lassert_dump(false, "trying to dereference a non-pointer native type");
		}
		;
	return NativeType::Pointer(*this);
	}

NativeType NativeType::Integer(uint32_t bits)
	{
	return Integer(bits, false);
	}

NativeType NativeType::int8()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(8, true));
	return *tr;
	}
NativeType NativeType::uint8()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(8, false));
	return *tr;
	}
NativeType NativeType::int32()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(32, true));
	return *tr;
	}
NativeType NativeType::uint32()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(32, false));
	return *tr;
	}
NativeType NativeType::int16()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(16, true));
	return *tr;
	}
NativeType NativeType::uint16()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(16, false));
	return *tr;
	}
NativeType NativeType::int64()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(64, true));
	return *tr;
	}
NativeType NativeType::uint64()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(64, false));
	return *tr;
	}
NativeType NativeType::uint1()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(1, false));
	return *tr;
	}
NativeType NativeType::uword()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(sizeof(uword_t)*8, false));
	return *tr;
	}
NativeType NativeType::sword()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(NativeType::Integer(sizeof(uword_t)*8, true));
	return *tr;
	}
bool NativeType::computeIsEmpty(void) const
	{
	@match NativeType(*this)
		-|	Nothing() ->> {
			return  true;
			}
		-|	Composite(x) ->> {
			bool tr = true;
			for (long k = 0; k < x.size() && tr;k++)
				if (!x[k].isEmpty())
					tr = false;
			return tr;
			}
		-|	_ ->> {
			return  false;
			}
		;
	}

uword_t alignedOffset(const NativeType& nt, uword_t unalignedOffset)
	{
	uword_t align = nt.alignment();
	uword_t padding = (align - (unalignedOffset % align)) % align;
	return unalignedOffset + padding;
	}

bool isRuntimeCallbackType(const NativeType& t)
	{
	return t == NativeTypeFor<NativeRuntimeCallbacks>::get().ptr();
	}

NativeType cppmlAlternative()
	{
	static NativeType* tr = 0;
	if (!tr)
		tr = new NativeType(
				NativeType::Composite(
					emptyTreeVec() +
					NativeType::Integer(8 * sizeof(uword_t)) +
					NativeType::Integer(8 * sizeof(NativeType::tag_type)) +
					NativeType::Array(NativeType::uint8(), 0)
				).ptr()
			);
	return *tr;
	}


