/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "SimpleForwardReasoner.hppml"

#include <boost/python.hpp>

#include "../../native/Registrar.hpp"
#include "../../core/python/CPPMLWrapper.hpp"
#include "../../core/python/CPPMLToSimple.hpp"
#include "../../core/python/ScopedPyThreads.hpp"
#include "../../core/PolymorphicSharedPtrFuncFromMemberFunc.hpp"
#include "../python/FORAPythonUtil.hppml"
#include "../../cumulus/ComputationDefinition.hppml"
#include "../Language/ClassMediatorBindings.hppml"

using Fora::ControlFlowGraphLoopPoints;
using Fora::SimpleForwardReasoner;
using Fora::ReasonerFrame;

class SimpleForwardReasonerWrapper :
		public native::module::Exporter<SimpleForwardReasonerWrapper> {
public:
		std::string		getModuleName(void)
			{
			return "FORA";
			}

		static PolymorphicSharedPtr<SimpleForwardReasoner>* ConstructSimpleForwardReasoner(
							PolymorphicSharedPtr<TypedFora::Compiler> compiler,
							PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> instructionGraph,
							PolymorphicSharedPtr<Axioms> axioms
							)
			{
			return new PolymorphicSharedPtr<SimpleForwardReasoner>(
				new SimpleForwardReasoner(
					compiler,
					instructionGraph,
					axioms
					)
				);
			}

		static boost::python::object unknownApplyNodes(PolymorphicSharedPtr<ReasonerFrame> frame)
			{
			boost::python::list l;

			for (auto label: frame->unknownApplyNodes())
				l.append(label);

			return l;
			}

		static boost::python::object subframesFor(PolymorphicSharedPtr<SimpleForwardReasoner> reasoner, PolymorphicSharedPtr<ReasonerFrame> frame)
			{
			boost::python::dict result;

			for (auto labelAndFrame: frame->getCalledFrames().getKeyToValue())
				result[labelAndFrame.first] = reasoner->getFrameFor(labelAndFrame.second);

			return result;
			}

		static int reasonerFrameCmp(PolymorphicSharedPtr<ReasonerFrame> lhs, PolymorphicSharedPtr<ReasonerFrame> rhs)
			{
			return lhs->hash().cmp(rhs->hash());
			}

		static int reasonerFrameHash(PolymorphicSharedPtr<ReasonerFrame> lhs)
			{
			return lhs->hash()[0];
			}

		static pair<Expression, Nullable<Symbol> > computationDefinitionToExpression(
						Cumulus::ComputationDefinitionTerm term,
						ImmutableTreeMap<Symbol, ImplValContainer>& ioArgs
						)
			{
			@match Cumulus::ComputationDefinitionTerm(term)
				-| Subcomputation(terms) ->> {
					return make_pair(computationDefinitionToExpression(terms, ioArgs), Nullable<Symbol>());
					}
				-| Value(value, symbol) ->> {
					Symbol var = Symbol("var_" + boost::lexical_cast<std::string>(ioArgs.size()));
					ioArgs = ioArgs + var + value;

					return make_pair(Expression::Variable(var), symbol);
					}
			}

		static Expression computationDefinitionToExpression(
						ImmutableTreeVector<Cumulus::ComputationDefinitionTerm> terms,
						ImmutableTreeMap<Symbol, ImplValContainer>& ioArgs
						)
			{
			auto exprsAndSymbols = mapITV(terms, [&](Cumulus::ComputationDefinitionTerm term) {
				return computationDefinitionToExpression(term, ioArgs);
				});

			lassert(!exprsAndSymbols[0].second);

			return Expression::Apply(
				exprsAndSymbols[0].first,
				mapITV(exprsAndSymbols.slice(1), 
					[&](pair<Expression, Nullable<Symbol> > e) { 
						return ApplyArgument::Normal(e.second, e.first); 
						}
					)
				);
			}

		static Expression computationDefinitionToExpression(
						Cumulus::ComputationDefinition def,
						ImmutableTreeMap<Symbol, ImplValContainer>& ioArgs
						)
			{
			@match Cumulus::ComputationDefinition(def)
				-| Root(terms) ->> {
					return computationDefinitionToExpression(terms, ioArgs);
					}
			}

		static boost::python::object reasonAboutApply(
						PolymorphicSharedPtr<SimpleForwardReasoner> reasoner, 
						JOVT jov
						)
			{
			PolymorphicSharedPtr<ReasonerFrame> res;

				{
				ScopedPyThreads releaseTheGil;
				res = reasoner->reasonAboutApply(jov);
				}
			
			return boost::python::object(res);
			}

		static boost::python::object reasonAboutComputationDefinition(
						PolymorphicSharedPtr<SimpleForwardReasoner> reasoner, 
						Cumulus::ComputationDefinition compDef
						)
			{
			ScopedPyThreads releaseTheGil;

			ImmutableTreeMap<Symbol, ImplValContainer> args;

			Expression expr = computationDefinitionToExpression(compDef, args);

			Function toEvaluate = Function::SingleTermFunction(emptyTreeVec(), null(), expr);

			ImplValContainer value = 
				Fora::Language::bindFunctionWithValues(
					ClassMediator::Function(
						"",
						toEvaluate,
						LexicalBindingMap(),
						CSTValue()
						),
					args,
					CSTValue()
					);

			auto rf = reasoner->reasonAboutApply(
					JOVT() + JOV::Constant(value) + JOV::Constant(CSTValue(Symbol("Call")))
					);

			reasoner->compile(rf);

			return boost::python::object(rf);
			}

		void exportPythonWrapper()
			{
			using namespace boost::python;
			
			class_<PolymorphicSharedPtr<SimpleForwardReasoner> >(
							"SimpleForwardReasoner", no_init)
				.def("__init__", boost::python::make_constructor(ConstructSimpleForwardReasoner))
				.def("reasonAboutApply", reasonAboutApply)
				.def("reasonAboutComputationDefinition", reasonAboutComputationDefinition)
				.def("compile", 
					macro_polymorphicSharedPtrFuncFromMemberFunc(SimpleForwardReasoner::compile))
				.def("subframesFor", &subframesFor)
				.def("totalFrameCount", 
					macro_polymorphicSharedPtrFuncFromMemberFunc(SimpleForwardReasoner::totalFrameCount))
				;

			class_<PolymorphicSharedPtr<ReasonerFrame> >(
							"ReasonerFrame", no_init)
				.def("exits", 
					macro_polymorphicSharedPtrFuncFromMemberFunc(ReasonerFrame::exits))
				.def("graph", 
					macro_polymorphicSharedPtrFuncFromMemberFunc(ReasonerFrame::graph))
				.def("entryJOVs", 
					macro_polymorphicSharedPtrFuncFromMemberFunc(ReasonerFrame::entryJOVs))
				.def("unknownApplyNodes", unknownApplyNodes)
				.def("__cmp__", reasonerFrameCmp)
				.def("__hash__", reasonerFrameHash)
				;

			object nodeCls = 
				FORAPythonUtil::exposeValueLikeCppmlType<ReasonerFrame::Node>()
					.class_()
				;

			object nodeRootCls = 
				FORAPythonUtil::exposeValueLikeCppmlType<ReasonerFrame::NodeRoot>()
					.class_()
				;

			}
};


//explicitly instantiating the registration element causes the linker to need
//this file
template<>
char native::module::Exporter<SimpleForwardReasonerWrapper>::mEnforceRegistration =
		native::module::ExportRegistrar<
			SimpleForwardReasonerWrapper>::registerWrapper();


