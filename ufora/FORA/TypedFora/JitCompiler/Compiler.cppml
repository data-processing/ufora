/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "Compiler.hppml"
#include "CompilerImpl.hppml"
#include "../../Native/NativeRuntimeCallTarget.hppml"
#include "../../Native/SharedObjectLibraryFromSource.hppml"
#include "../ABI/Stackframes.hppml"
#include "../../Core/StackFrame.hpp"

using namespace std;

namespace TypedFora {

Compiler::Compiler(const RuntimeConfig& inConfiguration) :
		mImpl(new CompilerImpl(inConfiguration, *this))
	{
	mImpl->initialize();
	}
		
const RuntimeConfig&	Compiler::getConfig(void) const
	{
	return mImpl->getConfig();
	}
		
void 	Compiler::define(const std::string& name, const TypedFora::Callable& code)
	{
	mImpl->define(name, code);
	}	

void Compiler::kickAllVersionsBackIntoInterpreter(const std::string& name)
	{
	mImpl->kickAllVersionsBackIntoInterpreter(name);
	}

void 	Compiler::define(const std::string& name, const NativeCFG& code)
	{
	mImpl->define(name, code);
	}	

void 	Compiler::increasePriority(const std::string& name)
	{
	mImpl->increasePriority(name);
	}
		
FunctionPointerHandle
Compiler::getJumpTarget(const std::string& name,
						const NativeBlockID& blockId,
						bool block
						)
	{
	return mImpl->getJumpTarget(name, blockId, block);
	}

TypedJumpTarget
Compiler::getJumpTarget(const std::string& name,
						const BlockID& inLabel,
						bool block
						)
	{
	return mImpl->getJumpTarget(name, inLabel, block);
	}

bool	Compiler::isDefined(const std::string& name)
	{
	return mImpl->isDefined(name);
	}

Callable 	Compiler::getDefinition(const std::string& name)
	{
	return mImpl->getDefinition(name);
	}

ImmutableTreeSet<string>	Compiler::getMutuallyRecursiveFunctions(
											const std::string& name)
	{
	return mImpl->getMutuallyRecursiveFunctions(name);
	}

//Compile a block of external source code
Fora::SharedObjectLibraryFromSource::BuildResult Compiler::buildLibraryFromSource(
		const Fora::SharedObjectLibraryFromSource::LibrarySource& inSource
		)
	{
	return mImpl->buildLibraryFromSource(inSource);
	}

//Get a callable for a relevant library
void* Compiler::functionPointerForLibraryFunctionFromSource(
		const Fora::SharedObjectLibraryFromSource::Library& inLibrary,
		std::string inName
		)
	{
	return mImpl->functionPointerForLibraryFunctionFromSource(inLibrary, inName);
	}

NativeRuntimeContinuationValue<1>	Compiler::generateDummyContinuation(
										void* targetData,
										uword_t* targetContinuation,
										uword_t continuationIndex)
	{
	return mImpl->generateDummyContinuation(
		targetData,
		targetContinuation, 
		continuationIndex
		);
	}

NativeRuntimeContinuationValueVector	Compiler::generateDummyContinuation(
										void* targetData,
										uword_t* targetContinuation,
										uword_t continuationIndexLow,
										uword_t continuationIndexHigh
										)
	{
	return mImpl->generateDummyContinuation(
		targetData,
		targetContinuation,
		continuationIndexLow,
		continuationIndexHigh
		);
	}

NativeRuntimeContinuationBase	Compiler::wrapCPPCallback(
							NativeCppCallback callback,
							void* inStackframe,
							StackFrame** inMemBlock
							)
	{
	return mImpl->wrapCPPCallback(callback, inStackframe, inMemBlock);
	}

bool	Compiler::isNativeFunctionPointer(NativeFunctionPointer jumpPtr) const
	{
	return mImpl->isNativeFunctionPointer(jumpPtr);
	}

void	Compiler::callFunction(const NativeRuntimeCallTarget& callTarget, StackFrame** memBlock)
	{
	mImpl->callFunction(
		callTarget.jumpPtr(), 
		memBlock,
		callTarget.blockID(), 
		callTarget.stackframePtr()
		);
	}

const NativeType&		Compiler::slotTypesForFuncPtr(
								NativeFunctionPointer funcPtr) const
	{
	return mImpl->slotTypesForFuncPtr(funcPtr);
	}

ImmutableTreeVector<NativeContinuationMetadataSerialized>
		Compiler::slotMetadataForFuncPtr(
				NativeFunctionPointer funcPtr,
				uword_t metadataEntryId
				) const
	{
	return mImpl->slotMetadataForFuncPtr(funcPtr, metadataEntryId);
	}

NativeIndividualContinuationMetadata
		Compiler::continuationMetadataForFuncPtr(
				NativeFunctionPointer funcPtr,
				uword_t blockID
				) const
	{
	return mImpl->continuationMetadataForFuncPtr(funcPtr, blockID);
	}

bool		Compiler::isDummyContinuationTarget(NativeFunctionPointer jumpPtr) const
	{
	return mImpl->isDummyContinuationTarget(jumpPtr);
	}
	
bool		Compiler::isWrappedCPPCallbackPtr(NativeFunctionPointer jumpPtr) const
	{
	return mImpl->isWrappedCPPCallbackPtr(jumpPtr);
	}
	
void 	Compiler::update(const std::string& name, const NativeCFG& code)
	{
	mImpl->update(name, code);
	}

std::string		Compiler::nameForFunctionPointer(NativeFunctionPointer nfp)
	{
	return mImpl->nameForFunctionPointer(nfp);
	}
    
TypedJumpTarget Compiler::compile(
                            const Callable& graph,
                            const std::string& axiomName)
    {
    if (!isDefined(axiomName))
        define(axiomName, graph);
    
    return getJumpTarget(axiomName, BlockID::entry(), true);
    }

NativeRuntimeCallTarget 
Compiler::generateStackframeAndCallTargetFromArgTuple(
			const TypedJumpTarget& jumpTarget, 
			const TypedContinuation& inReturnContinuation,
			StackFrame** memBlock,
			ImplVal argumentTuple,
			Fora::Interpreter::RefcountPool* inRefcountPool
			)
	{
	lassert_dump(
		!jumpTarget.isEmpty(),
		"cant branch into an empty jump target"
		);

	//then get the format that the function pointer will be using to return its continuations
	JudgmentOnAction joa = jumpTarget.resultSignature().asJoa();
	
	TypedContinuation returnCont;

	returnCont = TypedFora::Abi::adaptReturnContinuation(
				inReturnContinuation, 
				jumpTarget.resultSignature(), 
				memBlock,
				*this
				);

	//now compute how many bytes of storage we need for the call target
	uword_t bytes = TypedFora::Abi::computeArgumentFrameBytecount(jumpTarget);

	void* newStackframe = FORA_clib_allocateStackFrame(memBlock, bytes);

	void* callArgumentsPtr = TypedFora::Abi::packContinuationIntoStackframe(newStackframe, returnCont);

	TypedFora::Abi::packArgumentsIntoStackframeFromTuple(
		callArgumentsPtr, 
		jumpTarget.callSignature(), 
		argumentTuple,
		inRefcountPool
		);

	return NativeRuntimeCallTarget(
		jumpTarget.functionPointer().get().ptr(), 
		jumpTarget.functionPointer().get().entrypoint(),
		newStackframe
		);
	}

NativeRuntimeCallTarget 
Compiler::generateStackframeAndCallTargetTransferImplvalsWithOwnership(
					const TypedJumpTarget& jumpTarget, 
					const TypedContinuation& returnContinuation,
					StackFrame** memBlock,
					ImplVal* inImplVals,
					uint64_t uniqueId,
					Fora::Interpreter::RefcountPool* inRefcountPool
					)
	{
	lassert_dump(
		!jumpTarget.isEmpty(),
		"cant branch into an empty jump target"
		);

	//then get the format that the function pointer will be using to return its continuations
	JudgmentOnAction joa = jumpTarget.resultSignature().asJoa();
	
	TypedContinuation returnCont;

	returnCont = TypedFora::Abi::adaptReturnContinuation(
				returnContinuation, 
				jumpTarget.resultSignature(),
				memBlock,
				*this
				);

	returnCont = TypedFora::Abi::createTeardownContinuationForUntransferrableArgs(
				returnCont,
				inImplVals,
				uniqueId,
				jumpTarget.callSignature(),
				memBlock,
				*this
				);

	//now compute how many bytes of storage we need for the call target
	uword_t bytes = TypedFora::Abi::computeArgumentFrameBytecount(jumpTarget);

	void* newStackframe = FORA_clib_allocateStackFrame(memBlock, bytes);

	void* callArgumentsPtr = TypedFora::Abi::packContinuationIntoStackframe(newStackframe, returnCont);

	TypedFora::Abi::packArgumentsIntoStackframeAndAddToRefcountPool(
		callArgumentsPtr, 
		jumpTarget.callSignature(), 
		inImplVals,
		inRefcountPool
		);

	return NativeRuntimeCallTarget(
		jumpTarget.functionPointer().get().ptr(), 
		jumpTarget.functionPointer().get().entrypoint(),
		newStackframe
		);
	}


bool Compiler::anyCompilingOrPending(void) const
	{
	return mImpl->anyCompilingOrPending();	
	}
	

}

