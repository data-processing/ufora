/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "RenameVariables.hppml"
#include "../TypedFora.hppml"
#include "../../../core/cppml/CPPMLTransform.hppml"
#include "../../Native/NativeCode.hppml"
#include "../../Native/NativeCFGTransforms/RenameVariables.hppml"

namespace TypedFora {

namespace Transforms {

class	SimpleVariableRenameTransformer {
public:
	SimpleVariableRenameTransformer (
				const map<Variable, Variable>&	inRenames
				) :
			mRenames(inRenames)
		{

		}


	template<class T>
	Nullable<T> processDown(const T& t, bool& ioContinue) const
		{
		return null();
		}

	Nullable<Variable> processDown(const Variable& t, bool& ioContinue) const
		{
		if (mRenames.find(t) == mRenames.end())
			mRenames[t] = Variable::Temp(t.type());

		return null() << mRenames[t];
		}

	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}

private:
	mutable map<Variable, Variable> mRenames;
};

Expression			renameVariables(
						const Expression& in,
						const map<Variable, Variable>& inRenames
						)
	{
	SimpleVariableRenameTransformer renamer(inRenames);

	return transform(in, renamer);
	}

Expression			renameVariables(
						const Expression& in
						)
	{
	map<Variable, Variable> empty;
	return renameVariables(in, empty);
	}

CallTarget			renameVariables(const CallTarget& in)
	{
	map<Variable, Variable> empty;
	SimpleVariableRenameTransformer renamer(empty);
	return transform(in, renamer);
	}


class	RenameNativeVariablesInNativeCFGs {
public:

	template<class T>
	Nullable<T> processDown(const T& t, bool& ioContinue) const
		{
		return null();
		}

	Nullable<CPPMLOpaqueHandle<NativeCFG> > processDown(const CPPMLOpaqueHandle<NativeCFG>& t, bool& ioContinue) const
		{
        return null() << CPPMLOpaqueHandle<NativeCFG>(
            NativeCFGTransforms::renameVariables(*t)
            );
		}

	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}
};

Callable renameNativeVariables(const Callable& inToRename)
    {
	RenameNativeVariablesInNativeCFGs renamer;

	return transform(inToRename, renamer);
    }

}

}
