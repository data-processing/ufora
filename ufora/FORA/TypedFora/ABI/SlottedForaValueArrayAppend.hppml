/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ForaValueArray.hppml"
#include "ForaValueArraySpaceRequirements.hppml"
#include "../../Core/ValueDeepcopier.hppml"

/******************

SlottedForaValueArrayAppend

Provides services for quickly appending values stored as pair<void*, JOV> to ForaValueArray objects.

*******************/

namespace TypedFora {
namespace Abi {

template<class ptr_lookup_fun, class jov_lookup_fun>
void slottedAppend(
		const ptr_lookup_fun& slots,
		const jov_lookup_fun& jovs,
		long count,
		const std::set<JOV>& jovSet,
		TypedFora::Abi::ForaValueArray* target
		)
	{
	if (!count)
		return;

	if (target->size() && jovSet.size() > 1)
		{
		//because of complications in the ForaValueArray object, we can't currently append directly
		//to an array that has values using this function.
		TypedFora::Abi::ForaValueArray* temp =
			TypedFora::Abi::ForaValueArray::Empty(MemoryPool::getFreeStorePool());

		slottedAppend(slots,jovs, count, jovSet, temp);
		target->append(*temp, true);
		MemoryPool::getFreeStorePool()->destroy(temp);
		return;
		}

	ValueDeepcopierState deepcopierState;

	ValueDeepcopier deepcopier(deepcopierState, false, target->getOwningMemoryPool(), false, true);

	//brute force append
	if (jovSet.size() >=
			TypedFora::Abi::ForaValueArray::MAX_JUDGMENTS_TO_USE_JUDGMENT_TABLE)
		{
		for (long k = 0; k < count; k++)
			{
			lassert(slots(k));

			auto packedForaValues = target->appendUninitialized(jovs(k), 1);
			deepcopier.duplicate(
				*jovs(k).type(),
				packedForaValues.data(),
				slots(k),
				1
				);
			}
		}
	else
		{
		if (jovSet.size() == 1)
			{
			int64_t initialSize = target->size();

			target->appendUninitialized(jovs(0), count);
			std::vector<uint8_t*> sources;
			std::vector<uint8_t*> destinations;

			for (long k = 0; k < count;k++)
				{
				sources.push_back(slots(k));
				destinations.push_back(target->offsetFor(initialSize + k));
				}

			deepcopier.duplicateScattered(
				*jovs(0).type(),
				(void**)&destinations[0],
				(void**)&sources[0],
				count,
				0, //destNudge
				0 //sourceNudge
				);
			}
		else
			{
			lassert(jovSet.size() > 1);

			JudgmentOnResult finalJOR;
			for (auto jov: jovSet)
				finalJOR = finalJOR + JudgmentOnResult(jov);

			std::map<JOV, uint8_t> jovIndexMap;
			for (long k = 0; k < finalJOR.vals().size();k++)
				jovIndexMap[finalJOR.vals()[k]] = k;

			std::vector<uint8_t> jovIndices;
			jovIndices.reserve(count);

			for (long k = 0; k < count;k++)
				jovIndices.push_back(jovIndexMap.find(jovs(k))->second);

			int64_t totalBytesRequired = 0;
			for (long k = 0; k < count; k++)
				totalBytesRequired += TypedFora::Abi::PackedForaValues::strideFor(jovs(k));

			TypedFora::Abi::ForaValueArraySpaceRequirements spaceRequirements(
				totalBytesRequired,
				count,
				finalJOR
				);

			target->prepareForAppending(spaceRequirements);

			target->prepareForIncomingDataGivenJovs(jovIndices, finalJOR);

			map<JOV, std::vector<uint8_t*> > sources;
			map<JOV, std::vector<uint8_t*> > destinations;

			for (long k = 0; k < count;k++)
				{
				sources[jovs(k)].push_back(slots(k));
				destinations[jovs(k)].push_back(target->offsetFor(k));
				}

			for (auto& jovAndSources: sources)
				{
				JOV jov = jovAndSources.first;

				deepcopier.duplicateScattered(
					*jov.type(),
					(void**)&destinations[jov][0],
					(void**)&jovAndSources.second[0],
					jovAndSources.second.size(),
					0, //destNudge
					0 //sourceNudge
					);
				}
			}
		}
	}

inline void slottedAppend(
		const std::vector<uint8_t*>& slots,
		const std::vector<JOV>& jovs,
		const std::set<JOV>& jovSet,
		TypedFora::Abi::ForaValueArray* target
		)
	{
	slottedAppend(
		[&](long index) { return slots[index]; },
		[&](long index) { return jovs[index]; },
		slots.size(),
		jovSet,
		target
		);
	}

inline void slottedAppend(
		const std::vector<pair<uint8_t*, JOV> >& slots,
		TypedFora::Abi::ForaValueArray* target
		)
	{
	std::set<JOV> jovs;
	for (long k = 0; k < slots.size(); k++)
		{
		auto jov = slots[k].second;
		jovs.insert(jov);
		}

	slottedAppend(
		[&](long index) { return slots[index].first; },
		[&](long index) { return slots[index].second; },
		slots.size(),
		jovs,
		target
		);
	}

inline void slottedAppend(
		const std::vector<uint8_t*>& slots,
		const std::vector<JOV>& jovs,
		TypedFora::Abi::ForaValueArray* target
		)
	{
	std::set<JOV> jovSet;
	for (long k = 0; k < jovs.size(); k++)
		jovSet.insert(jovs[k]);

	slottedAppend(slots, jovs, jovSet, target);
	}
}
}
