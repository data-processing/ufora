/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "UpdateFreeStoreValues.hppml"
#include "../../Core/PausedComputation.hppml"
#include "../../Core/ImplValContainerUtilities.hppml"
#include "../../Core/ValueDeepcopier.hppml"
#include "../../Core/ComputationResult.hppml"
#include "MutableVectorHandleGrabberImplValVisitor.hppml"
#include "ImplValVisitor.hppml"

using Fora::Interpreter::PausedComputation;

namespace TypedFora {
namespace Abi {

namespace {

void updateExternalMutableVectors(	ValueDeepcopierState& state,
									ImplValContainer freestoreValues,
									ImplValContainer returningValues
									)
	{
	MutableVectorHandleGrabberImplValVisitor freestoreHandles;

		{
		ImplValVisitor<MutableVectorHandleGrabberImplValVisitor> visitor(freestoreHandles);

		visitor.visit(freestoreValues.type(), (uint8_t*) freestoreValues.getReference().data(), 1, 0);
		}

	MutableVectorHandleGrabberImplValVisitor returningValueHandles;

		{
		ImplValVisitor<MutableVectorHandleGrabberImplValVisitor> visitor(returningValueHandles);

		visitor.visit(returningValues.type(), (uint8_t*) returningValues.getReference().data(), 1, 0);
		}

	for (auto it = returningValueHandles.getMutableVectors().begin(); 
				it != returningValueHandles.getMutableVectors().end(); ++it)
		if (freestoreHandles.getMutableVectors().find(it->first) != 
				freestoreHandles.getMutableVectors().end())
			{
			MutableVectorRecord freestoreVector = 
				freestoreHandles.getMutableVectors().find(it->first)->second;

			MutableVectorRecord returnedVector = it->second;

			freestoreVector->swapContentsWith( *returnedVector );

			state.mMutableVectors[returnedVector] = freestoreVector;
			}
	}

void updateExternalMutableVectors(	ValueDeepcopierState& state,
									PausedComputation freestoreValues,
									ImplValContainer returningValues
									)
	{
	MutableVectorHandleGrabberImplValVisitor freestoreHandles;

		{
		ImplValVisitor<MutableVectorHandleGrabberImplValVisitor> visitor(freestoreHandles);

		for (auto frame: freestoreValues.frames())
			for (auto value: frame.values())
				visitor.visit(value.type(), (uint8_t*) value.getReference().data(), 1, 0);

		if (freestoreValues.tail().isPendingResult())
			visitor.visit(
				freestoreValues.tail().getPendingResult().value().type(),
				(uint8_t*)freestoreValues.tail().getPendingResult().value().data(),
				1,
				0
				);
		}

	MutableVectorHandleGrabberImplValVisitor returningValueHandles;

		{
		ImplValVisitor<MutableVectorHandleGrabberImplValVisitor> visitor(returningValueHandles);

		visitor.visit(returningValues.type(), (uint8_t*) returningValues.getReference().data(), 1, 0);
		}

	for (auto it = returningValueHandles.getMutableVectors().begin(); 
				it != returningValueHandles.getMutableVectors().end(); ++it)
		if (freestoreHandles.getMutableVectors().find(it->first) != 
				freestoreHandles.getMutableVectors().end())
			{
			MutableVectorRecord freestoreVector = 
				freestoreHandles.getMutableVectors().find(it->first)->second;

			MutableVectorRecord returnedVector = it->second;

			freestoreVector->swapContentsWith( *returnedVector );

			state.mMutableVectors[returnedVector] = freestoreVector;
			}
	}

}

ImplValContainer updateFreeStoreValues(ImplValContainer originalArguments, ImplValContainer result)
	{
	ValueDeepcopierState state;

	//copy our copies of mutable vectors back into the free store. on exit, 'state' contains
	//maps from the 'result' copies of the vector handles to the 'originalArguments' copies of
	//the vector handles, whose contents have been updated.
	updateExternalMutableVectors(state, originalArguments, result);

	ValueDeepcopier deepcopier(state, false, MemoryPool::getFreeStorePool(), false, false);

	return deepcopier.duplicate(result);
	}

ImplValContainer updateFreeStoreValues(PausedComputation originalArguments, ImplValContainer result)
	{
	ValueDeepcopierState state;

	//copy our copies of mutable vectors back into the free store. on exit, 'state' contains
	//maps from the 'result' copies of the vector handles to the 'originalArguments' copies of
	//the vector handles, whose contents have been updated.
	updateExternalMutableVectors(state, originalArguments, result);

	ValueDeepcopier deepcopier(state, false, MemoryPool::getFreeStorePool(), false, false);

	return deepcopier.duplicate(result);
	}

Fora::Interpreter::ComputationResult updateFreeStoreValues(
						const ImplValContainer& originalArguments, 
						const Fora::Interpreter::ComputationResult& result
						)
	{
	@match Fora::Interpreter::ComputationResult(result)
		-| Exception(e, computationLog) ->> {

			ImplValContainer finalTup = updateFreeStoreValues(originalArguments, e);
			
			if (!finalTup.tupleGetItem(0))
				Fora::Interpreter::ComputationResult::Exception(
					finalTup,
					computationLog
					); 

			if (!finalTup.tupleGetItem(0)->tupleGetItem(0))
				Fora::Interpreter::ComputationResult::Exception(
					finalTup,
					computationLog
					); 

			return Fora::Interpreter::ComputationResult::Exception(
				ImplValContainerUtilities::createTuple(
					emptyTreeVec() + 
						 *finalTup.tupleGetItem(0)->tupleGetItem(0) + 
						 *finalTup.tupleGetItem(1)
					),
				computationLog
				);
			}
		-| Result(e, computationLog) ->> {
			return Fora::Interpreter::ComputationResult::Result(
				*updateFreeStoreValues(originalArguments, e).tupleGetItem(0),
				computationLog
				);
			}
		-| Failure(e) ->> {
			return Fora::Interpreter::ComputationResult::Failure(e);
			}
	}

ImplValContainer updateSplitPausedComputationFrame(
						const PausedComputation& originalArguments, 
						const ImplValContainer& value
						)
	{
	return updateFreeStoreValues(originalArguments, value);
	}

}
}

