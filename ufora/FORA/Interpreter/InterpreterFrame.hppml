/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../Runtime.hppml"
#include "../TypedFora/JitCompiler/Compiler.hppml"
#include "../Judgment/JudgmentOnValue.hppml"
#include "../Judgment/JudgmentOnAction.hppml"
#include "../Native/NativeRuntimeCallbacks.hppml"
#include "../Core/ExecutionContext.hppml"

class NativeRuntimeUntypedContinuation;

namespace TypedFora {

class Compiler;

}

namespace Fora {
namespace Compiler {

class InterpreterObserver;
class InterpreterTraceVisitor;

}
}

namespace Fora {
namespace Interpreter {

class ApplyArgs;
class ExecutionContext;
class CallFrame;
class EvalFrame;
class Continuation;
class Instruction;
class SingleAxiomCache;
class ExecutionContextConfiguration;
class InterpreterThreadObserver;

enum {
	cont_internal = 0,
	cont_cont_left = 1,
	cont_cont_right = 2
	};

//TODO DOCUMENT tom: add some description for this class
class InterpreterFrame {
public:
	InterpreterFrame(
		ExecutionContext& executionContext,
		StackFrame** memBlock,
		uword_t inContinuation, 
		EvalFrame* evalFramePtr
		);
	
	~InterpreterFrame();

	void resumeContinuation(
			NativeRuntimeContinuationValue<1> value,
			void* data,
			uword_t nBytes
			);
	
	void followContinuation(
			bool resultIsActive,
			Continuation& continuation
			);
	
	void step(void);
	
	void applyAxiom(const ApplyArgs& args, SingleAxiomCache* axiomIx);
	
	void applyJump(InstructionPtr targetInstruction, const ApplySignature& callSignature);
	
	bool attemptToBranchToNativeCode();

	bool valid(void) const;
	
	NativeRuntimeContinuationValue<1> terminal(void) const;
	
	static NativeRuntimeContinuationValue<1>
			interpreter(StackFrame** memory, uword_t continuation, void* data);

	InstructionPtr currentInstruction(void) const;

	StackFrameAllocator* stackFrameAllocator();

private:
	SingleAxiomCache* calculateAxiom();

		//check the interrupt flag. If it's true, sets the continuation and returns true.
	bool checkInterruptFlag();

	bool attemptExplicitAxiomCalculation();
	
	void logCurrentStep();
	
	NativeRuntimeUntypedContinuation createUntypedContinuation();

	uword_t mContinuation;	//0 means 'enter', 1 means 'normal', 2 means 'exception'
	
	EvalFrame* mEvalFramePtr; 

	TypedFora::Compiler* mTypedForaCompiler;
	
	bool mValid;
	
	Nullable<NativeRuntimeContinuationValue<1> > mExitPoint;	//continuation to follow when done
	
	ExecutionContext& mExecutionContext;

	InterpreterThreadObserver& mInterpreterHistory;
	
	StackFrame** mMemBlock;
	
	ExecutionContextConfiguration& mExecutionContextConfig;

	uint64_t mCurrentStep;
};

}
}

