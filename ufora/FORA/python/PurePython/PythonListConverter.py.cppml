/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "PythonListConverter.hppml"
#include "PythonConstantConverter.hppml"

#include "../../../native/Registrar.hpp"
#include "../../../core/python/CPPMLWrapper.hpp"
#include "../../../core/python/CPPMLToSimple.hpp"
#include "../../../core/python/ScopedPyThreads.hpp"
#include "../../python/FORAPythonUtil.hppml"
#include "../../Core/Type.hppml"
   
class PythonListConverterWrapper:
    public native::module::Exporter<PythonListConverterWrapper> {
public:
    std::string getModuleName() {
        return "FORA";
        }

    static ImplValContainer createList(
            PolymorphicSharedPtr<Fora::PythonListConverter> converter,
            boost::python::list elements,
            PolymorphicSharedPtr<VectorDataManager> vdm
            )
        {
        ImmutableTreeVector<ImplValContainer> listElements;


        for (long ix = 0; ix < boost::python::len(elements); ++ix)
            {
            boost::python::extract<ImplValContainer> extractor(elements[ix]);

            lassert(extractor.check());

            listElements = listElements + extractor();
            }

        return converter->createList(listElements, vdm);
        }

    static ImplValContainer createListOfPrimitives(
            PolymorphicSharedPtr<Fora::PythonListConverter> converter,
            boost::python::list elements,
            PolymorphicSharedPtr<Fora::PythonConstantConverter>& constantConverter,
            PolymorphicSharedPtr<VectorDataManager> vdm
            )
        {
        if (boost::python::len(elements) == 0)
            return createList(converter, elements, vdm);

        boost::python::object first = elements[0];
        if (!isHomegeneousList(elements) || PyString_Check(first.ptr()))
            {
            ImmutableTreeVector<ImplValContainer> listElements;
            for (long ix = 0; ix < boost::python::len(elements); ++ix)
                {
                boost::python::object element = elements[ix];
                const PyObject* pyObj = element.ptr();

                listElements = listElements + convertPrimitive(pyObj, constantConverter);
                }

            return converter->createList(listElements, vdm);
            }

        if (PyBool_Check(first.ptr()))
            {
            std::function<Type(bool)> typeConverter =
                [&] (bool val) { return constantConverter->convertBoolean(val).type(); };
            return convertHomegeneousListOfPrimitives<bool, uint8_t>(converter, elements, typeConverter);
            }
        if (PyInt_Check(first.ptr()))
            {
            std::function<Type(int64_t)> typeConverter =
                [&] (int64_t val) { return constantConverter->convertInt(val).type(); };
            return convertHomegeneousListOfPrimitives(converter, elements, typeConverter);
            }
        if (PyFloat_Check(first.ptr()))
            {
            std::function<Type(double)> typeConverter =
                [&] (double val) { return constantConverter->convertFloat(val).type(); };
            return convertHomegeneousListOfPrimitives(converter, elements, typeConverter);
            }
        if (first.ptr() == Py_None)
            {
            uint8_t dummy = 0;
            return converter->createListOfPrimitives(
                    &dummy,
                    boost::python::len(elements),
                    constantConverter->noneValue().type()
                    );
            }
        lassert_dump(false, "failed to create list of primitives");
        }

    template <class LogicalType, class StorageType = LogicalType>
    static ImplValContainer convertHomegeneousListOfPrimitives(
            PolymorphicSharedPtr<Fora::PythonListConverter> converter,
            boost::python::list elements,
            std::function<Type(LogicalType)>& computeType)
        {
        std::vector<StorageType> values;
        values.reserve(boost::python::len(elements));
        for (long ix = 0, len = boost::python::len(elements); ix < len; ++ix)
            {
                values.push_back(boost::python::extract<LogicalType>(elements[ix]));
            }

        return converter->createListOfPrimitives(
                reinterpret_cast<const uint8_t*>(&values[0]),
                values.size(),
                computeType(static_cast<LogicalType>(values[0]))
                );
        }

    static bool isHomegeneousList(boost::python::list list)
        {
        bool isHomegeneous = true;
        PyObject* firstType = getType(list[0]);
        for (long ix = 1, len = boost::python::len(list); ix < len && isHomegeneous; ++ix)
            {
                PyObject* curType = getType(list[ix]);
                isHomegeneous = (PyObject_Compare(curType, firstType) == 0);
                Py_DECREF(curType);
            }
        Py_DECREF(firstType);
        return isHomegeneous;
        }

    static PyObject* getType(const boost::python::object& obj)
        {
        PyObject* pyObj = obj.ptr();
        return PyObject_Type(pyObj);

        }

    static ImplValContainer convertPrimitive(
            const PyObject* pyObj,
            PolymorphicSharedPtr<Fora::PythonConstantConverter>& constantConverter
            )
        {
        if (PyLong_Check(pyObj))
            throw std::logic_error("Conversion of Python 'long' is not supported");

        if (PyInt_Check(pyObj))
            return constantConverter->convertInt(PyInt_AS_LONG(pyObj));

        if (PyBool_Check(pyObj))
            return constantConverter->convertBoolean(PyObject_IsTrue(const_cast<PyObject*>(pyObj)) == 1);

        if (PyFloat_Check(pyObj))
            return constantConverter->convertFloat(PyFloat_AS_DOUBLE(pyObj));

        if (PyString_Check(pyObj))
            return constantConverter->convertString(PyString_AS_STRING(pyObj));

        if (pyObj == Py_None)
            return constantConverter->noneValue();

        // Unexpected type - log it
        // The code below is equivalent to: str(type(o))
        PyObject* pyType = PyObject_Type(const_cast<PyObject*>(pyObj));
        PyObject* pyTypeName = PyObject_Str(pyType);
        Py_DECREF(pyType);
        LOG_ERROR << "Unexpected python type in convertPrimitive" << PyString_AsString(pyTypeName);
        Py_DECREF(pyTypeName);

        throw std::logic_error("Unexpected Python object type in list of primitives");
        }



    static PolymorphicSharedPtr<Fora::PythonListConverter>
    makePythonListConverter(ImplValContainer& pyListClass)
        {
        return PolymorphicSharedPtr<Fora::PythonListConverter>(
            new Fora::PythonListConverter(
                pyListClass
                )
            );
        }

    static boost::python::object invertList(
            PolymorphicSharedPtr<Fora::PythonListConverter> converter,
            ImplValContainer possible
            )
        {
        auto res = converter->invertList(possible);

        if (!res)
            return boost::python::object();

        return boost::python::object(*res);
        }


    void exportPythonWrapper()
        {
        using namespace boost::python;

        class_<PolymorphicSharedPtr<Fora::PythonListConverter>>(
            "PythonListConverter", no_init)
            .def("createList", createList)
            .def("invertList", invertList)
            .def("createListOfPrimitives", createListOfPrimitives)
            ;

        def("makePythonListConverter", makePythonListConverter);
        }
};

template<>
char native::module::Exporter<PythonListConverterWrapper>::mEnforceRegistration = 
    native::module::ExportRegistrar<PythonListConverterWrapper>::registerWrapper();

