#pragma once 

#include "CPPMLTransform.hppml"
#include <boost/bind.hpp>

template<class rename_type>
@type FunctionTransformer = boost::function1<rename_type, rename_type> rename {
public:
	template<class T>
	Nullable<T> processDown(const T& t, bool& b) const
		{
		return null();
		}
	
	template<class T>
	Nullable<T> processUp(const T& t) const
		{
		return null();
		}

	Nullable<rename_type> processDown(const rename_type& in, bool& b) const
		{
		return null() << rename()(in);
		}

	template<class container_type>
	static container_type apply(const container_type& c, boost::function1<rename_type, rename_type> f)
		{
		FunctionTransformer transformer(f);
		return ::transform(c, transformer);
		}
};

template<class T, class container_type>
container_type applyFunctionToObjectGraph(
						boost::function1<T, T> f,
						const container_type& in 
						)
	{
	return FunctionTransformer<T>::apply(in, f);
	}
