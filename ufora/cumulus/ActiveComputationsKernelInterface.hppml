/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ActiveComputations.hppml"
#include "ActiveComputationsEvent.hppml"
#include "ComputationState.hppml"
#include "ComputationDependencyGraph.hpp"
#include "MachineComputationMap.hppml"
#include "../FORA/Core/ExecutionContextConfiguration.hppml"
#include "../FORA/VectorDataManager/PageRefcountEvent.hppml"
#include "../FORA/VectorDataManager/PageRefcountTracker.hppml"
#include "SystemwidePageRefcountTracker.hppml"
#include "../FORA/TypedFora/ABI/BigVectorLayouts.hppml"
#include "../core/PolymorphicSharedPtrBinder.hpp"
#include "ComputationBackgroundAction.hppml"

namespace Cumulus {

typedef PolymorphicSharedPtr<ComputationState> ComputationStatePtr;

class ActiveComputationsKernelInterface {
public:
	ActiveComputationsKernelInterface()
		{
		}

	virtual ~ActiveComputationsKernelInterface()
		{
		}

	virtual void scheduleComputationToHandleBackgroundAction(
						ComputationId computation, 
						ComputationBackgroundAction action
						) = 0;

	virtual void scheduleSerializationAndSendOfComputation(
			ComputationId inId,
			MachineId inOtherMachine,
			DataTransferTokenId token,
			hash_type moveGuid
			) = 0;

	virtual void registerNewComputationState(const ComputationId& computationId) = 0;

	virtual void registerNewComputationState(const ComputationId& computationId, ComputationDefinition def) = 0;

	virtual void registerNewComputationState(const ComputationId& computationId, ComputationStatePtr def) = 0;

	virtual void registerNewComputationState(
								const ComputationId& computationId,
								PolymorphicSharedPtr<SerializedObject> object
								) = 0;
		
	virtual void dropComputationImmediately(const ComputationId& computationId) = 0;

	virtual PolymorphicSharedPtr<SerializedObject> getSerializedResult(ComputationId needed) = 0;
		
	virtual void onRequestComputationResultFromMachine(const RequestComputationResultFromMachine& in) = 0;
		
	virtual void onComputationResultFromMachine(const ComputationResultFromMachine& in) = 0;
		
	virtual hash_type generateGuid() = 0;
		
	virtual void broadcastBigvecsInFlight(
			ImmutableTreeSet<Fora::BigVectorId> id, 
			int32_t refcount,
			hash_type inMoveGuid
			) = 0;

	virtual ImmutableTreeVector<Fora::PageId> convertSliceToPages(Fora::BigVectorSlice slice) = 0;
		
	virtual bool pageIsInRam(Fora::PageId page) = 0;
		
	virtual const std::set<ComputationId>& allComputationIds() const = 0;
		
	virtual bool hasComputation(ComputationId computation) const = 0;
		
	virtual void enableVectorPagingForId(ComputationId id) = 0;
		
	virtual void pageLargeVectorHandles(ComputationId id) = 0;
		
	virtual void disableVectorPagingForId(ComputationId id) = 0;
		
	virtual void interruptComputation(ComputationId id) = 0;

	virtual void unloadAllVectorHandles(ComputationId id) = 0;
		
	virtual ImmutableTreeVector<pair<ForaStackTrace, Fora::Interpreter::StackframeMetadata> >  
					extractStacktraceForId(ComputationId id, bool extractValues) = 0;
		
	virtual ImmutableTreeVector<ImplValContainer> extractCurrentLogsForId(ComputationId id) = 0;
		
	virtual void addComputationResultToId(ComputationId id, Cumulus::ComputationResult result) = 0;
		
	virtual void addComputationResultToId(ComputationId id, 
									ComputationId computation, 
									Fora::Interpreter::ComputationResult result,
									ComputationStatistics statistics
									) = 0;
		
	virtual ComputationStatus currentComputationStatusForId(ComputationId id) = 0;

	virtual ImmutableTreeVector<ComputationEvent> extractRecentComputationEventsForId(ComputationId id) = 0;
		
	virtual void onCumulusComponentMessageCreated(CumulusComponentMessageCreated msg) = 0;

	virtual Nullable<pair<CheckpointStatus, CheckpointRequest> > 
			setCheckpointStatusTimestamp(ComputationId computation, CheckpointRequest timestamp) = 0;

	virtual Nullable<pair<CheckpointStatus, CheckpointRequest> > 
			getCheckpointStatus(ComputationId computation) = 0;

	virtual Nullable<pair<CheckpointStatus, CheckpointRequest> > 
			addChildComputationCheckpointStatus(
						ComputationId computation,
						ComputationId childComputation,
						CheckpointStatus stats,
						CheckpointRequest timestamp
						) = 0;
		
	virtual void resetInterruptStateForId(ComputationId computation) = 0;
		
	virtual void markSliceLoaded(ComputationId computation) = 0;
		
	virtual void markSliceLoadFailedPermanently(ComputationId comp) = 0;
		
	virtual void markComputationCircular(ComputationId computation) = 0;
		
	virtual void resetPagesHeld(ComputationId comp) = 0;
		
	virtual void markExternalIoTaskCompleted(ComputationId computation, ExternalIoTaskCompleted comp) = 0;
		
	virtual bool isPassthrough(const ComputationId& computation) const = 0;
		
	virtual Nullable<Fora::Interpreter::ComputationResult> getResultForId(ComputationId comp) = 0;
		
	virtual ComputationStatistics currentComputationStatisticsForId(ComputationId comp) = 0;
		
	virtual ImmutableTreeSet<Fora::BigVectorId> getReferencedBigVectors(ComputationId id) = 0;
		
	virtual void becomePassthroughTo(ComputationId source, ComputationId dest) = 0;
		
	virtual void tokenReceived(DataTransferTokenId inToken) = 0;
		
	virtual void updateBytecountForDataTransfers(DataTransferTokenId inToken, int64_t bytecount) = 0;
		
	virtual bool hasDataTransfers() = 0;
		
	virtual void scheduleDataTransferAsInitiateComputationMove(InitiateComputationMove move) = 0;
		
	virtual void scheduleDataTransferAsSendComputationResult(
									RequestComputationResultFromMachine inRequest
									) = 0;
		
	virtual bool canResubmitBlockingThreads(
				ComputationId computation
				) = 0;
			
	virtual CreatedComputations resubmitBlockingThreads(
				ComputationId computation,
				hash_type guid
				) = 0;
			
	virtual void notifyThreadsWaitingForSplits() = 0;

	virtual void waitForComputationToHandleSchedulerMessages(boost::recursive_mutex::scoped_lock& lock) = 0;
};

}


