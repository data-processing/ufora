/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../FORA/Core/ImplValContainer.hppml"
#include "../FORA/Core/PausedComputationTree.hppml"
#include "../FORA/Serialization/MemoizableDuringSerializationRegistrar.hpp"
#include "ComputationId.hppml"

namespace Cumulus {
	
/****************

ComputationDefinition

A description of a calculation we'd like to perform in Cumulus.

*****************/

@type
	ComputationDefinitionTerm = 
	-|	Value of ImplValContainer val, Nullable<Symbol> name
	-| 	Subcomputation of ImmutableTreeVector<ComputationDefinitionTerm> subcomputation
with
	hash_type hash = (hashCPPMLDirect(*this))
{
public:
	static ComputationDefinitionTerm UnnamedValue(ImplValContainer val);

	static ImmutableTreeVector<ComputationDefinitionTerm> ApplyFromTuple(const ImplValContainer& inApplyAsTuple);
}
and
	ComputationDefinition =
	-|	Root of ImmutableTreeVector<ComputationDefinitionTerm> terms
	-|	Split of 
			ComputationId parentComputation,
			Fora::Interpreter::PausedComputationTree pausedComputation
with
	hash_type hash = (hashCPPMLDirect(*this))
{
public:
	static ComputationDefinition ApplyFromTuple(ImplValContainer val);

	bool isTemporary() const
		{
		return isSplit();
		}
};

macro_defineCppmlComparisonOperators(ComputationDefinition);
macro_defineCppmlComparisonOperators(ComputationDefinitionTerm);


}

macro_defineMemberHashFunction(Cumulus::ComputationDefinition);
macro_defineMemberHashFunction(Cumulus::ComputationDefinitionTerm);

namespace Fora {
namespace MemoizableDuringSerialization {

template<>
class IsMemoizable<Cumulus::ComputationDefinitionTerm> {
public:
	const static bool isMemoizable = true;

	static bool wantsMemo(const Cumulus::ComputationDefinitionTerm& in)
		{
		return true;
		}

	static MemoStorageBaseRegistrar<
		Cumulus::ComputationDefinitionTerm
		> sRegistrar;
};

}
}
