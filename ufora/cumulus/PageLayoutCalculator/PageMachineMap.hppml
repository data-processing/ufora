/***************************************************************************
    Copyright 2015 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/TwoWaySetMap.hpp"
#include "../../core/containers/SetWithChanges.hpp"
#include "../../core/containers/MapWithIndex.hpp"
#include "../../FORA/VectorDataManager/PageId.hppml"
#include "../MachineId.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

class PageMachineMap {
public:
    PageMachineMap() : 
            mTotalBytecount(0)
        {
        }

    void setMemory(MachineId machine, int64_t memory)
        {
        mMachineSizes.set(machine, memory);
        mBytecounts.set(machine, bytecountFor(machine));
        updateBytecountRatio(machine);
        }

    void dropPage(Fora::PageId page)
        {
        std::set<MachineId> machines = mPages.getKeys(page);
        for (auto m: machines)
            drop(m, page);
        }

    bool hasPage(Fora::PageId page) const
        {
        return mPages.hasValue(page);
        }

    void drop(MachineId machine, Fora::PageId page)
        {
        if (!mPages.contains(machine, page))
            return;

        mPages.drop(machine, page);
        mChanges.erase(make_pair(machine, page));

        if (mPages.getKeys(page).size() == 0)
            mTotalBytecount -= page.bytecount();

        mBytecounts.set(machine, bytecountFor(machine) - page.bytecount());
        updateBytecountRatio(machine);
        }

    void add(MachineId machine, Fora::PageId page)
        {
        if (mPages.contains(machine, page))
            return;
        
        mPages.insert(machine, page);
        mChanges.insert(make_pair(machine, page));

        if (mPages.getKeys(page).size() == 1)
            mTotalBytecount += page.bytecount();

        mBytecounts.set(machine, bytecountFor(machine) + page.bytecount());
        updateBytecountRatio(machine);
        }

    void updateBytecountRatio(MachineId machine)
        {
        int64_t mem = memoryFor(machine);
        if (mem == 0)
            mBytecountRatios.set(machine, 0);
        else
            mBytecountRatios.set(machine, bytecountFor(machine) / double(mem));
        }

    int64_t bytecountFor(MachineId machine) const
        {
        if (mBytecounts.hasKey(machine))
            return mBytecounts.getValue(machine);
        return 0;
        }

    int64_t memoryFor(MachineId machine) const
        {
        if (mMachineSizes.hasKey(machine))
            return mMachineSizes.getValue(machine);
        return 0;
        }

    bool contains(MachineId machine, Fora::PageId page) const
        {
        return mPages.contains(machine, page);
        }

    void extractChanges(
                std::set<pair<MachineId, Fora::PageId> >& outAdded, 
                std::set<pair<MachineId, Fora::PageId> >& outDropped
                )
        {
        mChanges.extractChanges(outAdded, outDropped);
        }

    int64_t totalBytecount() const
        {
        return mTotalBytecount;
        }

    double bytecountRatioFor(MachineId m) const
        {
        if (!mBytecountRatios.hasKey(m))
            return 0;
        return mBytecountRatios.getValue(m);
        }

    const TwoWaySetMap<MachineId, Fora::PageId>& getPages() const
        {
        return mPages;
        }

    const MapWithIndex<MachineId, int64_t>& getBytecounts() const
        {
        return mBytecounts;
        }

    const MapWithIndex<MachineId, double>& getBytecountRatios() const
        {
        return mBytecountRatios;
        }
    
private:
    int64_t mTotalBytecount;

    TwoWaySetMap<MachineId, Fora::PageId> mPages;

    SetWithChanges<pair<MachineId, Fora::PageId> > mChanges;

    MapWithIndex<MachineId, int64_t> mBytecounts;

    MapWithIndex<MachineId, int64_t> mMachineSizes;

    MapWithIndex<MachineId, double> mBytecountRatios;
};

}
}
