/***************************************************************************
    Copyright 2015 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../MachineId.hppml"
#include "../../core/containers/TwoWaySetMap.hpp"
#include "../../core/containers/SetWithChanges.hpp"
#include "../SystemwideComputationScheduler/ThreadGroup.hppml"
#include "../SystemwideComputationScheduler/ThreadGroupStateUpdate.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

//tracks all the pages that are currently on machines as far as we know
//and our intended behavior for them
class MachinePageAllocation {
public:
	void pageAdded(MachineId machine, Fora::PageId page)
		{
		if (mPages.contains(machine, page))
			return;

		mPages.insert(machine, page);
		mMachineBytes[machine] += page.bytecount();

		if (mRequestedAdds.contains(machine, page))
			{
			mRequestedAdds.drop(machine, page);
			mMachineAddBytes[machine] -= page.bytecount();
			if (mNewAdds.contains(machine, page))
				mNewAdds.drop(machine, page);
			}
		else
			{
			mTargetPages.insert(machine, page);
			mTargetPageChanges.insert(make_pair(machine, page));
			}
		}

	void pageDropped(MachineId machine, Fora::PageId page)
		{
		if (!mPages.contains(machine, page))
			return;

		mPages.drop(machine, page);
		mMachineBytes[machine] -= page.bytecount();

		if (mRequestedDrops.contains(machine, page))
			{
			mRequestedDrops.drop(machine, page);
			mMachineDropBytes[machine] -= page.bytecount();
			if (mNewDrops.contains(machine, page))
				mNewDrops.drop(machine, page);
			}
		else
			{
			mTargetPages.drop(machine, page);
			mTargetPageChanges.erase(make_pair(machine, page));
			}
		}

	void requestPageAdd(MachineId machine, Fora::PageId page)
		{
		if (mTargetPages.contains(machine, page))
			return;

		mTargetPages.insert(machine, page);
		mTargetPageChanges.insert(make_pair(machine, page));

		if (mRequestedDrops.contains(machine, page))
			{
			mRequestedDrops.drop(machine, page);
			mMachineDropBytes[machine] -= page.bytecount();
			}
		else
			{
			mMachineAddBytes[machine] += page.bytecount();
			mRequestedAdds.insert(machine, page);
			}

		if (mNewDrops.contains(machine, page))
			mNewDrops.drop(machine, page);
		else
			mNewAdds.insert(machine, page);
		}

	void requestPageDrop(MachineId machine, Fora::PageId page)
		{
		if (!mTargetPages.contains(machine, page))
			return;

		mTargetPages.drop(machine, page);
		mTargetPageChanges.erase(make_pair(machine, page));

		if (mRequestedAdds.contains(machine, page))
			{
			mRequestedAdds.drop(machine, page);
			mMachineAddBytes[machine] -= page.bytecount();
			}
		else
			{
			mMachineDropBytes[machine] += page.bytecount();
			mRequestedDrops.insert(machine, page);
			}

		if (mNewAdds.contains(machine, page))
			mNewAdds.drop(machine, page);
		else
			mNewDrops.insert(machine, page);
		}

	bool isPageLoading(MachineId machine, Fora::PageId page) const
		{
		return !mPages.contains(machine, page) && mTargetPages.contains(machine, page);
		}

	bool isPageDropping(MachineId machine, Fora::PageId page) const
		{
		return mPages.contains(machine, page) && !mTargetPages.contains(machine, page);
		}

	const TwoWaySetMap<MachineId, Fora::PageId>& getPages() const
		{
		return mPages;
		}

	const TwoWaySetMap<MachineId, Fora::PageId>& getTargetPages() const
		{
		return mTargetPages;
		}

	void pageDroppedAcrossEntireSystem(Fora::PageId page)
		{
		for (auto m: mPages.getKeys(page))
			mMachineBytes[m] -= page.bytecount();

		for (auto m: mRequestedAdds.getKeys(page))
			mMachineAddBytes[m] -= page.bytecount();

		for (auto m: mRequestedDrops.getKeys(page))
			mMachineDropBytes[m] -= page.bytecount();
		
		mNewAdds.dropValue(page);
		mNewDrops.dropValue(page);
		mPages.dropValue(page);
		mTargetPages.dropValue(page);
		mRequestedAdds.dropValue(page);
		mRequestedDrops.dropValue(page);
		}

	void extractNewAddsAndDrops(
				std::set<pair<MachineId, Fora::PageId> >& outAdds, 
				std::set<pair<MachineId, Fora::PageId> >& outDrops
				)
		{
		outAdds.clear();
		outDrops.clear();

		for (auto& machineAndPages: mNewAdds.getKeysToValues())
			for (auto p: machineAndPages.second)
				outAdds.insert(make_pair(machineAndPages.first, p));
		for (auto& machineAndPages: mNewDrops.getKeysToValues())
			for (auto p: machineAndPages.second)
				outDrops.insert(make_pair(machineAndPages.first, p));

		mNewAdds = TwoWaySetMap<MachineId, Fora::PageId>();
		mNewDrops = TwoWaySetMap<MachineId, Fora::PageId>();
		}

	void extractTargetChanges(
				std::set<pair<MachineId, Fora::PageId> >& outAdds, 
				std::set<pair<MachineId, Fora::PageId> >& outDrops
				)
		{
		mTargetPageChanges.extractChanges(outAdds, outDrops);
		}

	int64_t bytesAddedToMachine(MachineId machine) const
		{
		auto it = mMachineAddBytes.find(machine);
		if (it != mMachineAddBytes.end())
			return it->second;
		return 0;
		}

	int64_t bytesDroppedFromMachine(MachineId machine) const
		{
		auto it = mMachineDropBytes.find(machine);
		if (it != mMachineDropBytes.end())
			return it->second;
		return 0;
		}

	int64_t bytesOnMachine(MachineId machine) const
		{
		auto it = mMachineBytes.find(machine);
		if (it != mMachineBytes.end())
			return it->second;
		return 0;
		}

	int64_t bytesTargetedOnMachine(MachineId machine) const
		{
		return bytesOnMachine(machine) 
			+ bytesAddedToMachine(machine) 
			- bytesDroppedFromMachine(machine);
		}

	bool pageIsLoading(MachineId machine, Fora::PageId page) const
		{
		return !mPages.contains(machine, page) &&
			mTargetPages.contains(machine, page);
		}

private:
	TwoWaySetMap<MachineId, Fora::PageId> mPages;

	std::map<MachineId, int64_t> mMachineBytes;

	std::map<MachineId, int64_t> mMachineAddBytes;

	std::map<MachineId, int64_t> mMachineDropBytes;

	TwoWaySetMap<MachineId, Fora::PageId> mNewAdds;

	TwoWaySetMap<MachineId, Fora::PageId> mNewDrops;

	TwoWaySetMap<MachineId, Fora::PageId> mRequestedAdds;

	TwoWaySetMap<MachineId, Fora::PageId> mRequestedDrops;

	TwoWaySetMap<MachineId, Fora::PageId> mTargetPages;

	SetWithChanges<pair<MachineId, Fora::PageId> > mTargetPageChanges;
};

}
}

