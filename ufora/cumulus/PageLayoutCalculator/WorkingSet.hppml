/***************************************************************************
    Copyright 2015 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../MachineId.hppml"
#include "../SystemwideComputationScheduler/ThreadGroup.hppml"
#include "../SystemwideComputationScheduler/ThreadGroupStateUpdate.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

class WorkingSet {
public:
	WorkingSet() : 
			mSetSize(0),
			mBytesInSet(0),
			mIndex(0)
		{
		}

	int64_t maxBytesInSet() const
		{
		return mSetSize;
		}

	int64_t bytesInSet() const
		{
		return mBytesInSet;
		}

	void setWorkingSetSize(int64_t totalBytes)
		{
		mSetSize = totalBytes;
		prune();
		}

	void touch(Fora::PageId page)
		{
		if (!mPageIndex.hasKey(page))
			{
			mBytesInSet += page.bytecount();
			mPages.insert(page);

			if (mPrunedPages.find(page) != mPrunedPages.end())
				mPrunedPages.erase(page);
			else
				mAddedPages.insert(page);
			}
		
		mPageIndex.set(page, mIndex++);

		prune();
		}

	bool contains(Fora::PageId page)
		{
		return mPageIndex.hasKey(page);
		}

	void prune()
		{
		while (mBytesInSet > mSetSize)
			{
			lassert(mPageIndex.size());

			int64_t index = mPageIndex.lowestValue();
			lassert(mPageIndex.getKeys(index).size());

			Fora::PageId page = *mPageIndex.getKeys(index).begin();

			mPageIndex.drop(page);
			mPages.erase(page);

			mBytesInSet -= page.bytecount();

			if (mAddedPages.find(page) != mAddedPages.end())
				mAddedPages.erase(page);
			else
				mPrunedPages.insert(page);
			}
		}

	void extractChanges(
				std::set<Fora::PageId>& outAdded,
				std::set<Fora::PageId>& outPruned
				)
		{
		outPruned.clear();
		outAdded.clear();

		std::swap(outAdded, mAddedPages);
		std::swap(outPruned, mPrunedPages);
		}

	const std::set<Fora::PageId>& getPages() const
		{
		return mPages;
		}

	void pageDroppedAcrossEntireSystem(Fora::PageId page)
		{
		if (mPageIndex.hasKey(page))
			mBytesInSet -= page.bytecount();

		mPageIndex.discard(page);
		mPages.erase(page);
		mPrunedPages.erase(page);
		mAddedPages.erase(page);
		}

private:
	MapWithIndex<Fora::PageId, int64_t> mPageIndex;

	std::set<Fora::PageId> mPages;

	std::set<Fora::PageId> mPrunedPages;

	std::set<Fora::PageId> mAddedPages;

	int64_t mSetSize;

	int64_t mBytesInSet;

	int64_t mIndex;
};


}
}