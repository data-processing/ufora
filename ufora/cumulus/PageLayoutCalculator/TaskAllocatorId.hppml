/***************************************************************************
    Copyright 2015 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/math/Hash.hpp"

namespace Cumulus {

namespace PageLayoutCalculator {

enum class TaskType {
	ThreadGroup,	//can be replicated, moved at will
	Temporary,		//single block of pages for a data task. Allocated once and then terminated
	Accumulator		//an accumulator for data-tasks. Can only grow.
};

@type TaskAllocatorId = TaskType type, hash_type guid {
public:
	static TaskAllocatorId ForDataTask(hash_type h)
		{
		return TaskAllocatorId(TaskType::Accumulator, h);
		}

	static TaskAllocatorId ForTemporary(hash_type h)
		{
		return TaskAllocatorId(TaskType::Temporary, h);
		}

	static TaskAllocatorId ForThreadGroup(hash_type h)
		{
		return TaskAllocatorId(TaskType::ThreadGroup, h);
		}

	bool operator<(const TaskAllocatorId& other) const
		{
		if (type() < other.type())
			return true;
		if (other.type() < type())
			return false;
		return guid() < other.guid();
		}
};

}
}