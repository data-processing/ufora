/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../FORA/VectorDataManager/PageId.hppml"
#include "../../FORA/ControlFlowGraph/CFGWithFutures.hppml"
#include "../../core/math/Random.hpp"
#include "../../core/containers/ImmutableTreeVector.hppml"
#include "../../core/PolymorphicSharedPtr.hpp"

namespace Fora {

class BigVectorSlice;

namespace Interpreter {

class ExecutionContext;
class PausedComputation;
class ComputationResult;

}
}

namespace Cumulus {
namespace FuturesCliqueFinder {

@type Event = 
    -|  Stackframe of ImmutableTreeVector<Event> events
    -|  Load of ImmutableTreeVector<Fora::PageId> pages
    -|  Result of std::string res
    -|  DidntFinish of ()
    ;

class Task : public PolymorphicSharedPtrBase<Task> {
public:
    Task(const Fora::Interpreter::PausedComputation& computation, 
        Fora::Interpreter::ExecutionContext& memoryContext
        );

    Task(const CFGWithFutures::SubmittableArgs& computation, 
        Fora::Interpreter::ExecutionContext& memoryContext
        );

    bool isFinished()
        {
        return mFinalResult.isValue();
        }

    Nullable<Fora::Interpreter::ComputationResult> finalResult() const
        {
        return mFinalResult;
        }

    const map<int64_t, PolymorphicSharedPtr<Task> >& subtasks() const
        {
        return mSubtasks;
        }

    long subtaskCount() const
        {
        return mSubtasks.size();
        }

    long subtaskIndexByIndex(long index) const
        {
        if (index < 0 || index >= mSubtasks.size())
            throw std::range_error("FuturesCliqueFinder range " + 
                    boost::lexical_cast<std::string>(index) + " is out of bounds.");

        auto it = mSubtasks.begin();

        while (index--)
            it++;

        return it->first;
        }

    PolymorphicSharedPtr<Task> subtaskByIndex(long index) const
        {
        if (index < 0 || index >= mSubtasks.size())
            throw std::range_error("FuturesCliqueFinder range " + 
                    boost::lexical_cast<std::string>(index) + " is out of bounds.");

        auto it = mSubtasks.begin();

        while (index--)
            it++;

        return it->second;
        }

    void toStringStream(std::ostringstream& stream, long depth, long maxDepth) const;

    std::string toStringWithDepth(long maxDepth) const;

    std::string toString() const
        {
        return toStringWithDepth(1000);
        }

    //roll forward at the top level until we get a second 'meaty-looking' branch
    long rollUntilTreeHasTwoBranches(double maxTimestamp, long maxValues);

    long absorbAnyFinalResultSubtasks();

    bool rollForward();

    bool splitLow();

    bool splitHigh();

    bool splitMid();

    Event extractAllEvents() const;

    long rollForwardAndReturnStepCount(long maxEvents);

    long rollForwardUntilACliqueIsProduced(long cliqueTarget, long maxEvents);

    long rollForwardWithSplitting(long maxEvents, long maxEventsPerChild, double maxTimestamp);

    pair<long, long> rollForwardAtTopOfTreeReturningStepsAndCliquesCreated(
                    double maxTimestamp, 
                    Ufora::math::Random::Uniform<float>& ioRand,
                    long depth
                    );

    long rollForwardAtTopOfTree(
                    double maxTimestamp,
                    Ufora::math::Random::Uniform<float>& ioRand
                    );

    long rollForwardAtTopOfTreeFromSeed(
                    double maxTimestamp,
                    long seed
                    );

    long stepsTaken() const;

    long stepsTakenInThisFrame() const;

    long stepsTakenBelowThisFrame() const;

    long frameCount() const
        {
        return mFrames.size() - (mFirstFrameIsConstructedToCreateApply ? 1:0);
        }

    bool hasCFGWithFutures() const
        {
        return mLowestFrame;
        }

    ImmutableTreeVector<Fora::PageId> pages() const;

    bool isLeaf() const { return mIsLeaf; }

    void setLeaf(bool inLeaf) { mIsLeaf = inLeaf; }

private:
    PolymorphicSharedPtr<Task> lastSubtask()
        {
        lassert(mSubtasks.size());
        return mSubtasks.rbegin()->second;
        }
    
    bool isTopSplittable() const;

    bool allUnfinishedStackframesAreImmediateReturns() const;

    bool split(long frameIndex);

    void absorbEvent(Event e);

    void recordStepsTakenInThisTask(long steps);

    void recordStepsTakenBelowThisTask(long steps);

    Event extractAllEventsFromSubframes() const;

    Task(Fora::Interpreter::ExecutionContext& context);

    //clone this object. Note that this doesn't clone the CFGWithFutures
    //so it's a 'shallow clone' rather than a deepcopy.
    PolymorphicSharedPtr<Task> shallowClone();

    void execute();

    bool rollLowestFrameForward();

    void rollLowestFrameForwardUntilMakingNoProgress();

    ImmutableTreeVector<Fora::PageId> 
            getPageIds(const Fora::BigVectorSlice& inBigVectorSlice);

    Fora::Interpreter::ExecutionContext& mContext;

    bool mFirstFrameIsConstructedToCreateApply;

    ImmutableTreeVector<Fora::Interpreter::PausedComputationFrame> mFrames;

    Nullable<pair<ImplValContainer, bool> > mPendingResult;

    Nullable<Fora::Interpreter::ComputationResult> mFinalResult;

    bool mLowestFrameIsUnsplittable;

    PolymorphicSharedPtr<CFGWithFutures> mLowestFrame;

    map<int64_t, PolymorphicSharedPtr<Task> > mSubtasks;

    map<int64_t, Event> mSubtaskEvents;

    std::vector<Event> mEvents;

    bool mWantsToBeExecuted;

    long mTotalStepsTakenInThisTask;

    long mTotalStepsTakenInThisTaskAndBelow;

    long mTotalStepsTakenInFinishedSubtasks;

    mutable Nullable<ImmutableTreeVector<Fora::PageId> > mPageCache;

    bool mIsLeaf;
};

class CliqueFinder : public PolymorphicSharedPtrBase<CliqueFinder> {
public:
    CliqueFinder(
        PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> inExecutionContextPtr
        );

    static Event searchForEvents(
        long totalSteps, 
        long stepsPerChild,
        PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> inExecutionContextPtr,
        double maxTimeToElapse = 1000000.0
        );      

    static ImmutableTreeVector<Fora::PageId> extractPages(Event e);

    void simulate(
            long totalSteps, 
            long stepsPerChild,
            double maxTimeToElapse
            );

    Event extractEvents();

    long searchFromTopOfTreeReturningCliquesCreated(
                                double maxTimestamp,
                                Ufora::math::Random::Uniform<float>& ioRand
                                );

    long searchFromTopOfTreeReturningCliquesCreatedSeed(
                                double maxTimestamp,
                                long seed
                                );

    ImmutableTreeVector<Fora::PageId> pages();

    PolymorphicSharedPtr<Task> getRootTask()
        {
        return mTask;
        }

private:
    PolymorphicSharedPtr<Task> mTask;

    PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> mExecutionContextPtr;

    PolymorphicSharedPtr<Fora::Interpreter::ExecutionContext> mMemoryExecutionContextPtr;
};

}
}

