/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ComputationPriority.hppml"
#include "ComputationId.hppml"
#include "../FORA/Vector/VectorDataID.hppml"
#include "../FORA/VectorDataManager/PageId.hppml"
#include "../FORA/TypedFora/ABI/VectorLoadRequest.hppml"
#include "MachineId.hppml"
#include "../core/containers/ImmutableTreeSet.hppml"
#include "SystemwideComputationScheduler/RuntimePrediction/RuntimePredictionSignature.hppml"

namespace Cumulus {
	
@type ComputationStatistics = 
		Nullable<RuntimePredictionSignature> initialPredictionSignature,
		double timeSpentInInterpreter,
		double timeSpentInCompiler,
		double timeSpentGarbageCollecting,
		uint64_t totalSplitCount,
		uint64_t totalBytesPaged,
		uint64_t totalBytesInMemory,
		uint64_t totalBytesInMemoryFromOS,
		uint64_t timesComputationsLost,
		uint64_t timesMoved,
		uint64_t timesReset,
		uint64_t timesMovedTimesBytesMoved,
		ImmutableTreeSet<Fora::PageId> pagesCurrentlyBeingUsed,
		uint64_t timesComputed
{
public:
	double estimatedTotalRuntime() const;

	uint64_t totalEvents() const;

	ComputationStatistics withTimesReset(long ct) const;

	ComputationStatistics incremented(long ct = 1) const;

	ComputationStatistics withInitialRuntimePrediction(Nullable<RuntimePredictionSignature> initialPredictionSignature);

	bool isFartherAheadThan(const ComputationStatistics& stats) const;

	static ComputationStatistics merge(
									const ComputationStatistics& first,
									const ComputationStatistics& second,
									//true if these statistics both exist at the second time,
									//false if "first" is current and "second" is historical
									bool simultaneous
									);
};

}

