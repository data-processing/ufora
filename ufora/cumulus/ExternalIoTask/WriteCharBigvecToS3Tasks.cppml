/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "WriteCharBigvecToS3Tasks.hppml"

using Cumulus::PersistentCache::PersistentCacheIndex;

namespace Cumulus {

WriteCharBigvecToS3Tasks::WriteCharBigvecToS3Tasks(
			PolymorphicSharedPtr<VectorDataManager> inVDM,
			PolymorphicSharedPtr<SystemwidePageRefcountTracker> inSPRT,
			boost::function0<hash_type> inCreateNewHash,
			boost::function1<void, PythonIoTaskRequest> inBroadcastPythonTask,
			boost::function1<void, ExternalIoTaskCreated> inCreateNewIoTask,
			boost::function1<void, ExternalIoTaskCompleted> inOnExternalIoTaskCompleted
			) : 
		mVDM(inVDM),
		mSPRT(inSPRT),
		mCreateNewHash(inCreateNewHash),
		mBroadcastPythonTask(inBroadcastPythonTask),
		mCreateNewIoTask(inCreateNewIoTask),
		mOnExternalIoTaskCompleted(inOnExternalIoTaskCompleted)
	{
	}

void WriteCharBigvecToS3Tasks::handleNewWriteCharBigvecToS3Task(ExternalIoTaskId taskId, hash_type bigvecGuid, S3KeyAndCredentials credentials)
	{
	mCurrentTasks.insert(taskId, make_pair(bigvecGuid, credentials));

	if (mCurrentTasks.getKeys(make_pair(bigvecGuid, credentials)).size() > 1)
		return;

	rollTaskStateForward_(bigvecGuid, credentials);
	}

void WriteCharBigvecToS3Tasks::handleExternalIoTaskCompleted(ExternalIoTaskCompleted completed)
	{
	auto it = mSavePageToS3Tasks.find(completed.taskId());

	if (it == mSavePageToS3Tasks.end())
		return;

	PageWrite write = it->second;

	mSavePageToS3Tasks.erase(it);

	auto key = make_pair(write.bigvecGuid(), write.credentials());

	lassert(mPendingPageWrites.hasKey(key));

	mCompletedPageWrites.insert(key, write.slot());

	if (!completed.result().isSuccess())
		mFailedPageWriteReason[key] = completed.result();

	rollTaskStateForward_(key.first, key.second);
	}

void WriteCharBigvecToS3Tasks::handlePythonIoTaskResponse(
					PythonIoTaskResponse loaded
					)
	{
	hash_type requestGuid = loaded.guid();

	if (mInitiateUploadIoTasks.find(requestGuid) != mInitiateUploadIoTasks.end())
		{
		auto guidAndCredentials = mInitiateUploadIoTasks[requestGuid];
		mInitiateUploadIoTasks.erase(requestGuid);

		@match PythonIoTaskResponse(loaded)
			-| MultipartS3UploadInitiated(_, uploadId) ->> {
				mUploadIds[guidAndCredentials] = uploadId;
				rollTaskStateForward_(guidAndCredentials.first, guidAndCredentials.second);
				}
			-| Failure(_, reason) ->> {
				broadcastTaskComplete_(
					guidAndCredentials.first,
					guidAndCredentials.second,
					ExternalIoTaskResult::PythonIoFailure(reason)
					);
				}
			-| _ ->> {
				broadcastTaskComplete_(
					guidAndCredentials.first,
					guidAndCredentials.second,
					ExternalIoTaskResult::PythonIoFailure("Failed to initiate multipart upload for unknown reason.")
					);
				}
		}

	if (mCompleteUploadIoTasks.find(requestGuid) != mCompleteUploadIoTasks.end())
		{
		auto guidAndCredentials = mCompleteUploadIoTasks[requestGuid];
		mCompleteUploadIoTasks.erase(requestGuid);

		@match PythonIoTaskResponse(loaded)
			-| Success() ->> {
				//this is the terminal state
				broadcastTaskComplete_(
					guidAndCredentials.first,
					guidAndCredentials.second,
					ExternalIoTaskResult::Success()
					);
				}
			-| Failure(_, reason) ->> {
				broadcastTaskComplete_(
					guidAndCredentials.first,
					guidAndCredentials.second,
					ExternalIoTaskResult::PythonIoFailure(reason)
					);
				}
			-| _ ->> {
				broadcastTaskComplete_(
					guidAndCredentials.first,
					guidAndCredentials.second,
					ExternalIoTaskResult::PythonIoFailure("Failed to initiate multipart upload for unknown reason.")
					);
				}
		}
	}

void WriteCharBigvecToS3Tasks::rollTaskStateForward_(hash_type bigvecGuid, S3KeyAndCredentials credentials)
	{
	if (mUploadIds.find(make_pair(bigvecGuid, credentials)) == mUploadIds.end())
		{
		hash_type pythonTaskGuid = mCreateNewHash();

		mInitiateUploadIoTasks[pythonTaskGuid] = make_pair(bigvecGuid, credentials);

		//fire off the python upload of the bigvec
		mBroadcastPythonTask(
			PythonIoTaskRequest::InitiateMultipartS3Upload(
				pythonTaskGuid,
				credentials
				)
			);
		return;
		}

	if (mPendingPageWrites.getValues(make_pair(bigvecGuid, credentials)).size() == 0)
		{
		//we didn't fire off any writes yet
		TypedFora::Abi::BigVectorPageLayout pageLayout = 
			mVDM->getBigVectorLayouts()->getLayoutForId(bigvecGuid);

		long index = 1;
		long bytesInCurrentSlice = 0;

		const static long minBytesPerUpload = std::max<int64_t>(mVDM->maxPageSizeInBytes(), 5 * 1024 * 1024);

		//buffer of page chunks to write. We must be careful to write chunks to S3 in
		//large blocks (e.g. > 5 mb), or S3 will not accept our upload.
		ImmutableTreeVector<pair<Fora::PageId, IntegerSequence> > curBuffer;

		//helper function to flush the current accumulated set of pages to an io task
		auto flush = [&]() {
			lassert(curBuffer.size());
			ExternalIoTaskId taskId(mCreateNewHash());

			mCreateNewIoTask(
				ExternalIoTaskCreated(
					taskId,
					ExternalIoTask::WriteCharPageToS3(
						WriteCharPageToS3Task(
							curBuffer,
							credentials,
							mUploadIds[make_pair(bigvecGuid, credentials)],
							index
							)
						)
					)
				);

			mPendingPageWrites.insert(make_pair(bigvecGuid,credentials), index);

			mSavePageToS3Tasks[taskId] = PageWrite(bigvecGuid, credentials, index);

			index++;

			curBuffer = emptyTreeVec();
			bytesInCurrentSlice = 0;
			};

		for (auto slice: pageLayout.vectorIdentities())
			{
			curBuffer = curBuffer + make_pair(slice.vector().getPage(), slice.slice());
			bytesInCurrentSlice += slice.slice().size();

			if (bytesInCurrentSlice > minBytesPerUpload)
				flush();
			}

		//we are always allowed to flush the last slice.
		if (bytesInCurrentSlice)
			flush();
		}

	if (mPendingPageWrites.getValues(make_pair(bigvecGuid, credentials)).size() == 
			mCompletedPageWrites.getValues(make_pair(bigvecGuid, credentials)).size())
		{
		//all writes are complete
		hash_type pythonTaskGuid = mCreateNewHash();

		auto key = make_pair(bigvecGuid, credentials);

		if (mFailedPageWriteReason.find(key) != mFailedPageWriteReason.end())
			{
			broadcastTaskComplete_(
				bigvecGuid,
				credentials,
				mFailedPageWriteReason[key]
				);

			return;
			}

		mCompleteUploadIoTasks[pythonTaskGuid] = key;

		//fire off the python upload of the bigvec
		mBroadcastPythonTask(
			PythonIoTaskRequest::CompleteMultipartS3Upload(
				pythonTaskGuid,
				credentials,
				mUploadIds[make_pair(bigvecGuid, credentials)]
				)
			);

		return;
		}
	}

void WriteCharBigvecToS3Tasks::broadcastTaskComplete_(hash_type guid, S3KeyAndCredentials credentials, ExternalIoTaskResult result)
	{
	for (auto task: mCurrentTasks.getKeys(make_pair(guid, credentials)))
		mOnExternalIoTaskCompleted(
			ExternalIoTaskCompleted(task, result)
			);

	mCurrentTasks.dropValue(make_pair(guid, credentials));

	mPendingPageWrites.dropKey(make_pair(guid, credentials));

	mCompletedPageWrites.dropKey(make_pair(guid, credentials));

	mUploadIds.erase(make_pair(guid, credentials));

	mFailedPageWriteReason.erase(make_pair(guid, credentials));
	}


}
