/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#include "RuntimePredictionValue.hppml"
#include "../../../FORA/TypedFora/ABI/VectorRecord.hpp"
#include "../../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"
#include "../../../FORA/Primitives/String.hppml"
#include "../../../FORA/Core/ClassMediator.hppml"

using namespace TypedFora::Abi;

namespace Cumulus {

Nullable<RuntimePredictionValue> RuntimePredictionValue::operator[](long index) const
    {
    @match RuntimePredictionValue(*this)
        -| Tuple(subs) ->> {
            if (index >= subs.size())
                return null();
            return null() << subs[index];
            }
        -| Class(_, _, subs) ->> {
            if (index >= subs.size())
                return null();
            return null() << subs[index];
            }
        -| _ ->> {
            return null();
            }
    }

Nullable<RuntimePredictionValue> RuntimePredictionValue::followPath(ImmutableTreeVector<int64_t> path, long index) const
    {
    if (path.size() == index)
        return null() << *this;
    
    if (path.size() > index)
        return null();

    @match RuntimePredictionValue(*this)
        -| Tuple(subs) ->> {
            if (path[index] >= subs.size())
                return null();
            return subs[path[index]].followPath(path, index+1);
            }
        -| Class(_, _, subs) ->> {
            if (path[index] >= subs.size())
                return null();
            return subs[path[index]].followPath(path, index+1);
            }
        -| _ ->> {
            return null();
            }
    }

RuntimePredictionValue RuntimePredictionValue::FromValue(
                                const ImmutableTreeVector<ImplValContainer>& ivc, 
                                PolymorphicSharedPtr<VectorDataManager> vdm
                                )
    {
    return RuntimePredictionValue::Tuple(
        mapITV(
            ivc,
            [&](ImplValContainer value) {
                return FromValue(value, vdm);
                }
            )
        );
    }

RuntimePredictionValue RuntimePredictionValue::FromValue(
                                const ImplValContainer& ivc, 
                                PolymorphicSharedPtr<VectorDataManager> vdm
                                )
    {
    if (ivc.type().size() == 0)
        {

    @match Type(ivc.type())
        -| Class(types, classBody) ->> {
            return RuntimePredictionValue::Class(classBody.mediator()->name(), hashValue(classBody), emptyTreeVec());
            }
        -| _ ->> {
            return RuntimePredictionValue::Leaf(ivc.type().hash());
            }
        }

    @match Type(ivc.type())
        -| Integer() ->> {
            return RuntimePredictionValue::Integer(*ivc.getUInt64());
            }
        -| Float(bits) ->> {
            if (bits == 32)
                return RuntimePredictionValue::Float(ivc.cast<float>());
            if (bits == 64)
                return RuntimePredictionValue::Float(ivc.cast<double>());
            }
        -| String() ->> {
            return RuntimePredictionValue::String(ivc.cast<string_type>().size());
            }
        -| Vector() ->> {
            return RuntimePredictionValue::Vector(
                hashValue(ivc.cast<VectorRecord>().jor()), 
                ivc.cast<VectorRecord>().size(), 
                ivc.cast<VectorRecord>().pagedValuesIdentity().size() && vdm ? 
                    vdm->getBigVectorLayouts()->getLayoutForId(ivc.cast<VectorRecord>().pagedValuesIdentity()).bytecount()
                :   0
                );
            }
        -| Tuple(types) ->> {
            ImmutableTreeVector<RuntimePredictionValue> subvals;

            for (long k = 0; k < types.size() && k < 8; k++)
                subvals = subvals + FromValue(*ivc.tupleGetItem(k), vdm);

            return RuntimePredictionValue::Tuple(subvals);
            }
        -| Class(types, classBody) ->> {
            ImmutableTreeVector<RuntimePredictionValue> subvals;

            for (long k = 0; k < types.size(); k++)
                subvals = subvals + FromValue(*ivc.classGetItem(k), vdm);

            return RuntimePredictionValue::Class(classBody.mediator()->name(), hashValue(classBody), subvals);
            }
        -| _ ->> {
            }

    return RuntimePredictionValue::Leaf(ivc.type().hash());
    }

}

