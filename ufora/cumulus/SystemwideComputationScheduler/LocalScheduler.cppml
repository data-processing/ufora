/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "LocalScheduler.hppml"
#include "LocalSchedulerImpl.hppml"
#include "../../core/PolymorphicSharedPtrBinder.hpp"

namespace Cumulus {
namespace SystemwideComputationScheduler {	

LocalScheduler::LocalScheduler(
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
            	PolymorphicSharedPtr<VectorDataManager> inVDM,
            	MachineId inOwnMachineId,
				long inActiveThreadCount,
				boost::function1<void, LocalSchedulerEvent> inEventHandler
				) : 
		mImpl(
			new LocalSchedulerImpl(
				inCallbackScheduler,
				inVDM,
				inOwnMachineId,
				inActiveThreadCount,
				inEventHandler
				)
			)
	{
	}

void LocalScheduler::teardown()
	{
	mImpl->teardown();
	}

void LocalScheduler::pageNoLongerReferencedAcrossSystem(Fora::PageId page)
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&LocalSchedulerImpl::pageNoLongerReferencedAcrossSystem
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			page
			),
		"LocalScheduler::pageNoLongerReferencedAcrossSystem"
		);
	}

void LocalScheduler::addMachine(MachineId inMachine)
	{
	mImpl->addMachine(inMachine);
	}

EventBroadcaster<InitiateComputationMove>& 
LocalScheduler::onInitiateComputationMove()
	{
	return mImpl->mOnInitiateComputationMoved;
	}

EventBroadcaster<CumulusComponentMessageCreated>& 
					LocalScheduler::onCumulusComponentMessageCreated()
	{
	return mImpl->mOnCumulusComponentMessageCreated;
	}

void LocalScheduler::initializeFromAddDropState(const AddDropFinalState& state)
	{
	mImpl->initializeFromAddDropState(state);
	}

void LocalScheduler::setDiagnosticLogfilePath(std::string inLogfilePath)
	{
	mImpl->setDiagnosticLogfilePath(inLogfilePath);
	}

Nullable<std::string> LocalScheduler::getDiagnosticLogfilePath()
	{
	return mImpl->getDiagnosticLogfilePath();
	}

void LocalScheduler::handleCumulusComponentMessage(
                const CumulusComponentMessage& message, 
                const CumulusClientOrMachine& source, 
                const CumulusComponentType& componentType
                )
	{
	mImpl->mCallbackScheduler->scheduleImmediately(
		boost::bind(
			PolymorphicSharedPtrBinder::memberFunctionToWeakPtrFunction(
				&LocalSchedulerImpl::handleCumulusComponentMessage
				),
			mImpl->polymorphicSharedWeakPtrFromThis(),
			message,
			source,
			componentType
			),
		"LocalScheduler::handleCumulusComponentMessage"
		);
	}

long LocalScheduler::getComputationsMoved() 
	{
	return mImpl->getComputationsMoved();
	}
}
}

