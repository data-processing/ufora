/***************************************************************************
    Copyright 2015 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "ThreadGroup.hppml"
#include "../../core/containers/TwoWaySetMap.hpp"
#include "../../core/containers/MapWithIndex.hpp"

namespace Cumulus {

class ThreadGroupTree {
public:
    //mark a computation as a root of a tree and get back the set of computations
    //that are now contained by this new group
    void insert(ThreadGroup group);

    void erase(ThreadGroup group);

    void clear();

    Nullable<ThreadGroup> containingThread(ThreadGroup group) const;

    const std::set<ThreadGroup>& groups() const
        {
        return mGroups;
        }

public:
    std::set<ThreadGroup> mGroups;
};

}
