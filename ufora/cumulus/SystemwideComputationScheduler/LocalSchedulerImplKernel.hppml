/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>

#include "MachineLoads.hppml"
#include "SchedulerInitializationParameters.hppml"
#include "ThreadGroupStatusTracker.hppml"
#include "ThreadGroupTree.hppml"
#include "RuntimePredictionModel.hppml"

#include "../ComputationId.hppml"
#include "../CumulusClientOrMachine.hppml"
#include "../CumulusComponentMessage.hppml"
#include "../LocalToLocalSchedulerBroadcastMessage.hppml"
#include "../SchedulerToComputationMessage.hppml"
#include "../DistributedDataTasks/MachineHashTable.hppml"
#include "../../core/containers/MapWithIndex.hpp"
#include "../../core/math/Random.hpp"
#include "../../core/PolymorphicSharedPtr.hpp"


class SystemwidePageRefcountTracker;

namespace TypedFora {
namespace Abi {

class BigVectorLayouts;
class BigVectorPageLayout;
}
}

namespace Cumulus {

class ComputationComputeStatusChanged;
class ComputationToSchedulerMessage;
class CumulusComponentMessageCreated;
class InitiateComputationMove;
class LocalComputationPriorityAndStatusChanged;

namespace SystemwideComputationScheduler {

/************

LocalSchedulerImplKernel

The single-threaded kernel for the computation scheduler

************/

class LocalSchedulerImplKernel {
public:
	LocalSchedulerImplKernel(
			uint64_t vdmMaxPageSizeInBytes,
			uint64_t vdmMemoryLimitInBytes,
	    	MachineId inOwnMachineId,
			long inActiveThreadCount,
			boost::function1<void, InitiateComputationMove> onInitiateComputationMoved,
			boost::function1<void, CumulusComponentMessageCreated> onCumulusComponentMessageCreated
			);

	~LocalSchedulerImplKernel();

	void addMachine(MachineId inMachine);

    void computationComputeStatusChanged(const ComputationComputeStatusChanged& change);

	void computationStatusChanged(
				const LocalComputationPriorityAndStatusChanged& change,
				double curTime
				);

	void handleComputationBlocked_(
				const ComputationId& computation, 
				ImmutableTreeSet<Fora::PageId> pages
				);

	void handleCumulusComponentMessage(
	            CumulusComponentMessage message, 
    	        CumulusClientOrMachine source, 
        	    CumulusComponentType componentType,
        	    double curTime
        	    );

	void handleInitiateComputationMoveResponse(const ComputationId& computation, bool success);

	void handleComputationToSchedulerMessage(
							const ComputationToSchedulerMessage& response,
							double curTime
							);

	void computationIsComputable_(ComputationId computation, ComputationPriority newPriority);

	void computationNotComputable_(ComputationId computation);
	
	void logTryingToMove_(	const ComputationId& computation,
							const MachineId& machine
							);

	Nullable<ComputationId> searchForSplittableComputation_();

	void recyclePriorityList_();

	void splitOrMoveIfNeeded(double curTime);

	void tryToSplitSomething_();

	bool tryToCalculateFuturePagesForSomething_();

	bool tryToMoveSomething_();

	void logCurrentState_();

	Nullable<MachineId> pickMachineWithLeastLoad_(ImmutableTreeSet<MachineId> machines);

	void pageNoLongerReferencedAcrossSystem(Fora::PageId page);

	void updateCurrentProcessorLoadAndBroadcast_(double curTime);

	void sendSchedulerToComputationMessage(SchedulerToComputationMessage msg);

	void sendLocalToGlobalSchedulerMessage(LocalToGlobalSchedulerMessage msg);

	void sendLocalToLocalSchedulerMessage(LocalToLocalSchedulerMessage msg);

	long mActiveThreadCount;

	boost::function1<void, InitiateComputationMove> mOnInitiateComputationMoved;

	boost::function1<void, CumulusComponentMessageCreated> mOnCumulusComponentMessageCreated;

	void handleLocalToLocalSchedulerBroadcastMessage(
										LocalToLocalSchedulerBroadcastMessage message
										);

	void handleLocalToLocalSchedulerMessage(
										LocalToLocalSchedulerMessage message
										);

	void handleGlobalToLocalSchedulerMessage(
										GlobalToLocalSchedulerMessage message
										);

	//for each computable computation, 0 or -1 indicating whether we've tried to split it
	//and the computation priority. We always try to split the 'highest' item in the list that's.
	//not currently pending for split. if all priorities have a -1, we set them back to '0'

	MapWithIndex<ComputationId, pair<long, ComputationPriority> > mCurrentlyComputableComputations;

	MapWithIndex<ComputationId, ComputationPriority> mCurrentlyComputableComputationsByPriority;

	PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> mBigVectorLayouts;

	std::set<ComputationId> mCurrentlyComputingComputations;

	std::map<ComputationId, double> mCurrentlyComputingComputationsLastPageResetTimes;

	std::set<ComputationId> mTryingToSplit;

	std::vector<ComputationId> mMoveCandidates;

	std::map<ComputationId, ComputationStatus> mLocalComputationStatuses;

	std::map<ComputationId, ComputationPriority> mLocalComputationPriorities;

	void tryToSplitComputation_(ComputationId toSplit);

	bool wantsToSplit_();

	void resetPageDataIfNecessary_(double curTime);

	void moveIncorrectlyScheduledTasks_();

	bool computationBelongsOnAnotherMachine_(ComputationId comp);

	const std::set<MachineId>& validMachinesForComputation_(ComputationId comp);

	bool tryToMoveComputationToOneOf_(ComputationId comp, const std::set<MachineId>& activeOn, bool moveEvenIfOtherMachineIsLoaded);

	std::set<MachineId> mCurrentMachines;

	MachineHashTable mMachineHashTable;

	MachineId mOwnMachineId;

	Ufora::math::Random::Uniform<double> mRandomGenerator;

	std::set<ComputationId> mComputationsBlockedOnVectorsLocally;

	std::set<ComputationId> mSplitComputationsFinishedButUncollected;

	std::set<ComputationId> mComputationsBlockedOnComputationsLocally;

	MapWithIndex<ComputationId, hash_type> mBlockedAndWaitingForFuturePages;

	hash_type mFuturePagesRequestGuid;

	std::set<ComputationId> mRecentlyCalculatedForFuturePages;

	map<MachineId, LocalToLocalSchedulerBroadcastMessage_CurrentLoadType> mMostRecentBroadcasts;

	long mComputationsMoved;

	ThreadGroupStatusTracker mThreadGroupStatusTracker;

	SchedulerInitializationParameters mInitializationParameters;

	double mLastDumpTime;

	double mLastBroadcast;

	long mLastBroadcastLoad;

	long mTimesCalledSinceLastDump;

	long mTotalMoveAttempts;

	long mTotalSplitAttempts;

	long mCalculationsCompleted;

	MachineLoads mMachineLoads;

	RuntimePredictionModel mRuntimePredictionModel;

	ThreadGroupTree mAllThreadGroups;

	TwoWaySetMap<ThreadGroup, MachineId> mAllThreadGroupsActiveOn;

	std::set<pair<ThreadGroup, Fora::PageId> > mSplitPages;

};
}
}

