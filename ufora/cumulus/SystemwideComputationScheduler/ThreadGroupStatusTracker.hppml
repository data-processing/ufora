/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/
#pragma once

#include "ThreadGroup.hppml"
#include "ThreadGroupState.hppml"
#include "../ComputationEvent.hppml"
#include "../LocalToLocalSchedulerMessage.hppml"
#include "../LocalToGlobalSchedulerMessage.hppml"
#include "../GlobalToLocalSchedulerMessage.hppml"
#include "../DistributedDataTasks/MachineHashTable.hppml"

namespace Cumulus {

namespace SystemwideComputationScheduler {

class ThreadGroupStatusTracker {
public:
    ThreadGroupStatusTracker(
                boost::function1<void, LocalToLocalSchedulerMessage> inOnSendLocal,
                boost::function1<void, LocalToGlobalSchedulerMessage> inOnSendGlobal,
                MachineHashTable& inMachineTable,
                MachineId ownMachine
                ) :
            mOnSendLocal(inOnSendLocal),
            mOnSendGlobal(inOnSendGlobal),
            mMachineTable(inMachineTable),
            mOwnMachine(ownMachine)
        {
        }

    void handleComputationEvents(ComputationId id, ImmutableTreeVector<ComputationEvent> events)
        {
        ThreadGroup group = ThreadGroup::groupFor(id);

        auto targetMachine = machineFor(group);

        if (targetMachine == mOwnMachine)
            handleComputationEventsLocally(group, events);
        else
            mOnSendLocal(
                LocalToLocalSchedulerMessage::ThreadGroupEvents(
                    mOwnMachine,
                    targetMachine,
                    group,
                    events
                    )
                );
        }

    void handleGlobalToLocalSchedulerMessage(const GlobalSchedulerToThreadGroupMessage& m)
        {
        ThreadGroup grp = m.targetGroup();

        if (mFinishedGroups.find(grp) != mFinishedGroups.end())
            return;

        ensureThreadGroup(grp);

        mStates[grp]->handleGlobalSchedulerToThreadGroupMessage(m);

        removeGroupIfFinished(grp);

        drainPendingMessages();
        }

    void handleLocalToLocalSchedulerMessage(const LocalToLocalSchedulerMessage& in)
        {
        @match LocalToLocalSchedulerMessage(in)
            -| ThreadGroupStatusChanged(change) ->> {
                handleStatusChangedLocally(change);
                }
            -| ThreadGroupEvents(group, events) ->> {
                handleComputationEventsLocally(group, events);
                }
            -| ThreadGroupPageUsedInFuture(group, page) ->> {
                handlePageUsedInFutureLocally(group, page);
                }
            -| CrossThreadGroup(msg) ->> {
                if (mFinishedGroups.find(msg.destinationGroup()) != mFinishedGroups.end())
                    return;

                ensureThreadGroup(msg.destinationGroup());
                
                mStates[msg.destinationGroup()]->handleMessageFromThreadGroup(msg);
                
                removeGroupIfFinished(msg.destinationGroup());

                drainPendingMessages();
                }
        }

    void pageNoLongerReferencedAcrossSystem(Fora::PageId page)
        {
        mPagesDropped.insert(page);
        std::set<ThreadGroup> groupsToWalk;

        for (auto group: mPagesUsedByThreadGroups.getKeys(page))
            groupsToWalk.insert(group);

        for (auto group: groupsToWalk)
            if (mStates.find(group) != mStates.end())
                mStates[group]->pageNoLongerReferencedAcrossSystem(page);

        lassert(!mPagesUsedByThreadGroups.hasValue(page));
        }

    //the status of the computation changed on this machine. If the owning machine
    //for this ThreadGroup is local, handle it here. Otherwise send it to another box.
    void handleStatusChanged(const LocalComputationPriorityAndStatusChanged& change)
        {
        ComputationId id = change.computation();

        MachineId targetMachine = machineFor(id);

        if (targetMachine == mOwnMachine)
            handleStatusChangedLocally(change);
        else
            mOnSendLocal(
                LocalToLocalSchedulerMessage::ThreadGroupStatusChanged(
                    mOwnMachine,
                    targetMachine,
                    change
                    )
                );
        }

    void pageUsedInFuture(ComputationId computation, Fora::PageId page)
        {
        ThreadGroup group = ThreadGroup::groupFor(computation);

        MachineId targetMachine = machineFor(group);

        if (targetMachine == mOwnMachine)
            handlePageUsedInFutureLocally(group, page);
        else
            mOnSendLocal(
                LocalToLocalSchedulerMessage::ThreadGroupPageUsedInFuture(
                    mOwnMachine, 
                    targetMachine, 
                    group, 
                    page
                    )
                );
        }

private:
    void handlePageUsedInFutureLocally(ThreadGroup group, Fora::PageId page)
        {
        if (mFinishedGroups.find(group) != mFinishedGroups.end())
            return;

        ensureThreadGroup(group);
    
        mStates[group]->handlePageUsedInFuture(page);
        
        removeGroupIfFinished(group);

        drainPendingMessages();        
        }

    void removeGroupIfFinished(ThreadGroup group)
        {
        auto it = mStates.find(group);

        if (it == mStates.end())
            return;

        if (mStates[group]->isFinishedAndChildrenFinished())
            {
            mFinishedGroups.insert(group);
            mStates.erase(group);
            mPagesUsedByThreadGroups.dropKey(group);
            }
        }

    void drainPendingMessages()
        {
        while (mPendingCrossGroupMessages.size())
            {
            std::vector<CrossThreadGroupMessage> messages;
            std::swap(mPendingCrossGroupMessages, messages);

            for (auto msg: messages)
                {
                if (mFinishedGroups.find(msg.destinationGroup()) == mFinishedGroups.end())
                    {
                    ensureThreadGroup(msg.destinationGroup());
                    mStates[msg.destinationGroup()]->handleMessageFromThreadGroup(msg);
                    removeGroupIfFinished(msg.destinationGroup());
                    }
                }
            }
        }

    void ensureThreadGroup(ThreadGroup group)
        {
        lassert_dump(
            machineFor(group) == mOwnMachine,
            "machine " << prettyPrintString(mOwnMachine) 
                << " shouldn't have been handed a message for " 
                << prettyPrintString(machineFor(group))
                << " for group with prefix " << group.prefix()
            );

        if (mStates.find(group) == mStates.end())
            mStates[group].reset(
                new ThreadGroupState(
                    group, 
                    mPagesUsedByThreadGroups, 
                    mPagesDropped,
                    boost::bind(&ThreadGroupStatusTracker::onSendCrossGroupMessage, this, boost::arg<1>()),
                    boost::bind(&ThreadGroupStatusTracker::onSendGroupToGlobalSchedulerMessage, this, boost::arg<1>())
                    )
                );
        }

    MachineId machineFor(const ComputationId& computationId)
        {
        return mMachineTable.lookup(ThreadGroup::groupFor(computationId).hash());
        }

    MachineId machineFor(const ThreadGroup& group)
        {
        return mMachineTable.lookup(group.hash());
        }

    //the status of this computation changed, and we are the owning machine for this threadgroup.
    void handleStatusChangedLocally(const LocalComputationPriorityAndStatusChanged& change)
        {
        @match LocalComputationPriorityAndStatusChanged(change)
            -| Active(c, _, newStatus, stats) ->> {
                ThreadGroup group = ThreadGroup::groupFor(c);

                if (mFinishedGroups.find(group) != mFinishedGroups.end())
                    return;

                ensureThreadGroup(group);

                mStates[group]->handleNewStatistics(newStatus, stats);
                
                removeGroupIfFinished(group);

                drainPendingMessages();
                }
            -| _ ->> {}
        }

    void handleComputationEventsLocally(ThreadGroup group, ImmutableTreeVector<ComputationEvent> events)
        {
        if (mFinishedGroups.find(group) != mFinishedGroups.end())
            return;

        ensureThreadGroup(group);

        mStates[group]->handleEvents(events);

        removeGroupIfFinished(group);

        drainPendingMessages();
        }

    void onSendGroupToGlobalSchedulerMessage(ThreadGroupToGlobalSchedulerMessage msg)
        {
        mOnSendGlobal(
            LocalToGlobalSchedulerMessage::ThreadGroup(msg, mOwnMachine)
            );
        }

    void onSendCrossGroupMessage(CrossThreadGroupMessage msg)
        {
        auto targetMachine = machineFor(msg.destinationGroup());

        if (targetMachine == mOwnMachine)
            mPendingCrossGroupMessages.push_back(msg);
        else
            mOnSendLocal(
                LocalToLocalSchedulerMessage::CrossThreadGroup(
                    mOwnMachine,
                    targetMachine,
                    msg
                    )
                );
        }

    std::vector<CrossThreadGroupMessage> mPendingCrossGroupMessages;

    boost::function1<void, LocalToLocalSchedulerMessage> mOnSendLocal;

    boost::function1<void, LocalToGlobalSchedulerMessage> mOnSendGlobal;
    
    MachineId mOwnMachine;

    MachineHashTable& mMachineTable;

    TwoWaySetMap<ThreadGroup, Fora::PageId> mPagesUsedByThreadGroups;

    std::set<Fora::PageId> mPagesDropped;

    std::set<ThreadGroup> mGroupsSentToGlobalScheduler;

    std::map<ThreadGroup, boost::shared_ptr<ThreadGroupState> > mStates;

    std::set<ThreadGroup> mFinishedGroups;
};

}

}