/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>

#include "CheckpointStatuses.hppml"
#include "SchedulerInitializationParameters.hppml"
#include "../PageLayoutCalculator/ActiveNeighborhoods.hppml"
#include "../../core/PolymorphicSharedPtr.hpp"

class SystemwidePageRefcountTracker;

namespace TypedFora {
namespace Abi {
class BigVectorLayouts;
}
}

namespace Cumulus {

class ComputationId;
class CumulusClientOrMachine;
class CumulusClientToGlobalSchedulerMessage;
class CumulusComponentMessageCreated;
class LocalToGlobalSchedulerMessage;

namespace SystemwideComputationScheduler {

/************

GlobalSchedulerImplKernel

The single-threaded kernel for the computation scheduler

************/

class GlobalSchedulerImplKernel {
public:
	GlobalSchedulerImplKernel(
			uint64_t vdmMaxPageSizeInBytes,
			uint64_t vdmMemoryLimitInBytes,
	    	MachineId inOwnMachineId,
			long inActiveThreadCount,
			CumulusCheckpointPolicy inCheckpointCommitPolicy,
			boost::function0<void> onTriggerRecomputePageLayoutIfNecessary,
			boost::function2<void, ComputationId, CheckpointRequest> onTriggerComputationStatusUpdate,
			boost::function1<void, CumulusComponentMessageCreated> onCumulusComponentMessageCreated
			);

	void addMachine(MachineId inMachine);

	void handleDataTasksToGlobalSchedulerMessage(const DataTasksToGlobalSchedulerMessage& inMsg);

    void consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId);

	std::string currentLayoutAsString();

	void setCheckpointStatusInterval(double inInterval);

	void computationStatusOnMachineChanged(
					const ComputationStatusOnMachineChanged& change,
					double curTime
					);

	void sendCommitCheckpointMessage(CheckpointRequest checkpoint);

	void markProgressMade_();

	std::string recomputePageLayout();

	void pageNoLongerReferencedAcrossSystem(Fora::PageId page);

	void triggerFullCheckpointsOnOutstandingComputations(double curTime);

	void handleLocalToGlobalSchedulerMessage(
							const LocalToGlobalSchedulerMessage& msg
							);

	void handleComputationToGlobalSchedulerMessage(
				const ComputationToGlobalSchedulerMessage& message,
				double curTime
				);

	long mActiveThreadCount;

	void logCurrentLayout(bool forceCritical = false);

	void handleCumulusClientToGlobalSchedulerMessage(const CumulusClientToGlobalSchedulerMessage& message, double curTime);

	void checkpointStatusesTriggeringStatusUpdate(const ComputationId& id, CheckpointRequest statusTimestamp);

	void checkCheckpointsAndStatuses(double curTime);

	void handleCumulusComponentMessage(
                    const CumulusComponentMessage& message, 
                    const CumulusClientOrMachine& source, 
                    const CumulusComponentType& componentType,
                    double curTime
                    );

	ImmutableTreeMap<ComputationId, pair<CheckpointStatus, CheckpointRequest> > 
					currentOutstandingCheckpointStatuses(bool onlyUnfinished, bool onlyCommitted);

	bool anyOutstandingTriggeredCheckpoints();

	void initializeFromAddDropState(const AddDropFinalState& state);

	map<hash_type, ImmutableTreeMap<MachineId, int64_t> > mAllocatedDataTasks;

	boost::function0<void> mTriggerRecomputePageLayoutIfNecessary;

	boost::function2<void, ComputationId, CheckpointRequest> mOnTriggerComputationStatusUpdate;

	boost::function1<void, CumulusComponentMessageCreated> mOnCumulusComponentMessageCreated;

	PolymorphicSharedPtr<SystemwidePageRefcountTracker> mSystemwidePageRefcountTracker;

	std::map<Fora::BigVectorId, long> mBigVectorRefcounts;

	PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> mBigVectorLayouts;

	std::set<MachineId> mCurrentMachines;

	MachineId mOwnMachineId;

	std::map<hash_type, std::map<MachineId, int64_t> > mDataTaskBytesAllocated;

	std::map<MachineId, int64_t> mBytesAddedByMachine;

	std::map<MachineId, int64_t> mBytesSentToDiskByMachine;
	
	PageLayoutCalculator::ActiveNeighborhoods mActiveNeighborhoods;

	long mSetDesireIndex;

	double mTimeOfLastProgress;

	SchedulerInitializationParameters mInitializationParameters;

	double mLastTimeDumped;

	CheckpointStatuses mCheckpointStatuses;

	bool mReportedMyExistence;
};

}
}

